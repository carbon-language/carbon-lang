; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Don't use SVE when its registers are no bigger than NEON.
; RUN: llc -aarch64-sve-vector-bits-min=128  < %s | not grep ptrue
; RUN: llc -aarch64-sve-vector-bits-min=256  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_256
; RUN: llc -aarch64-sve-vector-bits-min=384  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_256
; RUN: llc -aarch64-sve-vector-bits-min=512  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512
; RUN: llc -aarch64-sve-vector-bits-min=640  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512
; RUN: llc -aarch64-sve-vector-bits-min=768  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512
; RUN: llc -aarch64-sve-vector-bits-min=896  < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512
; RUN: llc -aarch64-sve-vector-bits-min=1024 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1152 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1280 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1408 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1536 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1664 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1792 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=1920 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024
; RUN: llc -aarch64-sve-vector-bits-min=2048 < %s | FileCheck %s -check-prefixes=CHECK,VBITS_GE_512,VBITS_GE_1024,VBITS_GE_2048

target triple = "aarch64-unknown-linux-gnu"

;
; LD1B
;

define void @masked_gather_v2i8(<2 x i8>* %a, <2 x i8*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrb w8, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    fmov s0, w8
; CHECK-NEXT:    ldrb w8, [x0, #1]
; CHECK-NEXT:    mov v0.s[1], w8
; CHECK-NEXT:    cmeq v0.2s, v0.2s, #0
; CHECK-NEXT:    sshll v0.2d, v0.2s, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1b { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    st1b { z0.s }, p0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x i8>, <2 x i8>* %a
  %ptrs = load <2 x i8*>, <2 x i8*>* %b
  %mask = icmp eq <2 x i8> %cval, zeroinitializer
  %vals = call <2 x i8> @llvm.masked.gather.v2i8(<2 x i8*> %ptrs, i32 8, <2 x i1> %mask, <2 x i8> undef)
  store <2 x i8> %vals, <2 x i8>* %a
  ret void
}

define void @masked_gather_v4i8(<4 x i8>* %a, <4 x i8*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr s0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    ushll v0.8h, v0.8b, #0
; CHECK-NEXT:    cmeq v0.4h, v0.4h, #0
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1b { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    st1b { z0.h }, p0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x i8>, <4 x i8>* %a
  %ptrs = load <4 x i8*>, <4 x i8*>* %b
  %mask = icmp eq <4 x i8> %cval, zeroinitializer
  %vals = call <4 x i8> @llvm.masked.gather.v4i8(<4 x i8*> %ptrs, i32 8, <4 x i1> %mask, <4 x i8> undef)
  store <4 x i8> %vals, <4 x i8>* %a
  ret void
}

define void @masked_gather_v8i8(<8 x i8>* %a, <8 x i8*>* %b) #0 {
; Ensure sensible type legalisation.
; VBITS_GE_256-LABEL: masked_gather_v8i8:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ldr d0, [x0]
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    cmeq v0.8b, v0.8b, #0
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    zip2 v1.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    zip1 v0.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    shl v1.4h, v1.4h, #8
; VBITS_GE_256-NEXT:    shl v0.4h, v0.4h, #8
; VBITS_GE_256-NEXT:    sshr v1.4h, v1.4h, #8
; VBITS_GE_256-NEXT:    sshr v0.4h, v0.4h, #8
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    cmpne p1.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1b { z0.d }, p1/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1b { z1.d }, p0/z, [z3.d]
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 v0.8b, v1.8b, v0.8b
; VBITS_GE_256-NEXT:    str d0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8i8:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ldr d0, [x0]
; VBITS_GE_512-NEXT:    ptrue p0.d, vl8
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_512-NEXT:    cmeq v0.8b, v0.8b, #0
; VBITS_GE_512-NEXT:    sunpklo z0.h, z0.b
; VBITS_GE_512-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_512-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_512-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_512-NEXT:    ld1b { z0.d }, p0/z, [z1.d]
; VBITS_GE_512-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_512-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_512-NEXT:    uzp1 z0.b, z0.b, z0.b
; VBITS_GE_512-NEXT:    str d0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x i8>, <8 x i8>* %a
  %ptrs = load <8 x i8*>, <8 x i8*>* %b
  %mask = icmp eq <8 x i8> %cval, zeroinitializer
  %vals = call <8 x i8> @llvm.masked.gather.v8i8(<8 x i8*> %ptrs, i32 8, <8 x i1> %mask, <8 x i8> undef)
  store <8 x i8> %vals, <8 x i8>* %a
  ret void
}

define void @masked_gather_v16i8(<16 x i8>* %a, <16 x i8*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16i8:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ldr q0, [x0]
; VBITS_GE_256-NEXT:    mov x10, #4
; VBITS_GE_256-NEXT:    mov x8, #8
; VBITS_GE_256-NEXT:    mov x9, #12
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    cmeq v0.16b, v0.16b, #0
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    zip2 v1.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    zip1 v2.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    ext v0.16b, v0.16b, v0.16b, #8
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    shl v1.4h, v1.4h, #8
; VBITS_GE_256-NEXT:    shl v2.4h, v2.4h, #8
; VBITS_GE_256-NEXT:    zip2 v3.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    zip1 v0.8b, v0.8b, v0.8b
; VBITS_GE_256-NEXT:    sshr v1.4h, v1.4h, #8
; VBITS_GE_256-NEXT:    sshr v2.4h, v2.4h, #8
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    sunpklo z2.s, z2.h
; VBITS_GE_256-NEXT:    shl v3.4h, v3.4h, #8
; VBITS_GE_256-NEXT:    shl v0.4h, v0.4h, #8
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    sunpklo z2.d, z2.s
; VBITS_GE_256-NEXT:    cmpne p1.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    sshr v1.4h, v3.4h, #8
; VBITS_GE_256-NEXT:    sshr v0.4h, v0.4h, #8
; VBITS_GE_256-NEXT:    cmpne p2.d, p0/z, z2.d, #0
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    ld1b { z2.d }, p1/z, [z6.d]
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    cmpne p1.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1b { z3.d }, p2/z, [z7.d]
; VBITS_GE_256-NEXT:    ld1b { z0.d }, p1/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1b { z1.d }, p0/z, [z4.d]
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    mov v3.d[1], v2.d[0]
; VBITS_GE_256-NEXT:    mov v1.d[1], v0.d[0]
; VBITS_GE_256-NEXT:    uzp1 v0.16b, v3.16b, v1.16b
; VBITS_GE_256-NEXT:    str q0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16i8:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ldr q0, [x0]
; VBITS_GE_1024-NEXT:    ptrue p0.d, vl16
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_1024-NEXT:    cmeq v0.16b, v0.16b, #0
; VBITS_GE_1024-NEXT:    sunpklo z0.h, z0.b
; VBITS_GE_1024-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_1024-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_1024-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_1024-NEXT:    ld1b { z0.d }, p0/z, [z1.d]
; VBITS_GE_1024-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    uzp1 z0.b, z0.b, z0.b
; VBITS_GE_1024-NEXT:    str q0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x i8>, <16 x i8>* %a
  %ptrs = load <16 x i8*>, <16 x i8*>* %b
  %mask = icmp eq <16 x i8> %cval, zeroinitializer
  %vals = call <16 x i8> @llvm.masked.gather.v16i8(<16 x i8*> %ptrs, i32 8, <16 x i1> %mask, <16 x i8> undef)
  store <16 x i8> %vals, <16 x i8>* %a
  ret void
}

define void @masked_gather_v32i8(<32 x i8>* %a, <32 x i8*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32i8:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; VBITS_GE_256-NEXT:    .cfi_def_cfa_offset 16
; VBITS_GE_256-NEXT:    mov x29, sp
; VBITS_GE_256-NEXT:    .cfi_def_cfa w29, 16
; VBITS_GE_256-NEXT:    .cfi_offset w30, -8
; VBITS_GE_256-NEXT:    .cfi_offset w29, -16
; VBITS_GE_256-NEXT:    sub x9, sp, #48
; VBITS_GE_256-NEXT:    and sp, x9, #0xffffffffffffffe0
; VBITS_GE_256-NEXT:    ptrue p0.b, vl32
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ld1b { z0.b }, p0/z, [x0]
; VBITS_GE_256-NEXT:    mov x9, #28
; VBITS_GE_256-NEXT:    mov x10, #8
; VBITS_GE_256-NEXT:    cmpeq p1.b, p0/z, z0.b, #0
; VBITS_GE_256-NEXT:    mov z4.b, p1/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    zip2 v2.8b, v4.8b, v0.8b
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    mov x9, #12
; VBITS_GE_256-NEXT:    shl v3.4h, v2.4h, #8
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    sshr v5.4h, v3.4h, #8
; VBITS_GE_256-NEXT:    mov x8, #20
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z5.s, z5.h
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1b { z5.d }, p2/z, [z7.d]
; VBITS_GE_256-NEXT:    zip1 v7.8b, v4.8b, v0.8b
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    shl v7.4h, v7.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z5.h, z5.h, z5.h
; VBITS_GE_256-NEXT:    umov w8, v5.h[3]
; VBITS_GE_256-NEXT:    umov w9, v5.h[2]
; VBITS_GE_256-NEXT:    umov w10, v5.h[1]
; VBITS_GE_256-NEXT:    sshr v7.4h, v7.4h, #8
; VBITS_GE_256-NEXT:    umov w11, v5.h[0]
; VBITS_GE_256-NEXT:    mov z5.d, z4.d
; VBITS_GE_256-NEXT:    sunpklo z7.s, z7.h
; VBITS_GE_256-NEXT:    ext z5.b, z5.b, z4.b, #16
; VBITS_GE_256-NEXT:    sunpklo z7.d, z7.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #7]
; VBITS_GE_256-NEXT:    strb w9, [sp, #6]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z7.d, #0
; VBITS_GE_256-NEXT:    strb w10, [sp, #5]
; VBITS_GE_256-NEXT:    strb w11, [sp, #4]
; VBITS_GE_256-NEXT:    ld1b { z7.d }, p2/z, [z17.d]
; VBITS_GE_256-NEXT:    zip2 v17.8b, v5.8b, v0.8b
; VBITS_GE_256-NEXT:    ext v4.16b, v4.16b, v4.16b, #8
; VBITS_GE_256-NEXT:    uzp1 z7.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    shl v17.4h, v17.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z7.h, z7.h, z7.h
; VBITS_GE_256-NEXT:    umov w8, v7.h[3]
; VBITS_GE_256-NEXT:    umov w9, v7.h[2]
; VBITS_GE_256-NEXT:    umov w10, v7.h[1]
; VBITS_GE_256-NEXT:    sshr v17.4h, v17.4h, #8
; VBITS_GE_256-NEXT:    umov w11, v7.h[0]
; VBITS_GE_256-NEXT:    sunpklo z7.s, z17.h
; VBITS_GE_256-NEXT:    sunpklo z7.d, z7.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #3]
; VBITS_GE_256-NEXT:    strb w9, [sp, #2]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z7.d, #0
; VBITS_GE_256-NEXT:    strb w10, [sp, #1]
; VBITS_GE_256-NEXT:    strb w11, [sp]
; VBITS_GE_256-NEXT:    ld1b { z7.d }, p2/z, [z16.d]
; VBITS_GE_256-NEXT:    zip1 v16.8b, v5.8b, v0.8b
; VBITS_GE_256-NEXT:    uzp1 z7.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    shl v16.4h, v16.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z7.h, z7.h, z7.h
; VBITS_GE_256-NEXT:    umov w8, v7.h[3]
; VBITS_GE_256-NEXT:    umov w9, v7.h[2]
; VBITS_GE_256-NEXT:    umov w10, v7.h[1]
; VBITS_GE_256-NEXT:    sshr v16.4h, v16.4h, #8
; VBITS_GE_256-NEXT:    umov w11, v7.h[0]
; VBITS_GE_256-NEXT:    sunpklo z7.s, z16.h
; VBITS_GE_256-NEXT:    sunpklo z7.d, z7.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #23]
; VBITS_GE_256-NEXT:    strb w9, [sp, #22]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z7.d, #0
; VBITS_GE_256-NEXT:    strb w10, [sp, #21]
; VBITS_GE_256-NEXT:    zip2 v7.8b, v4.8b, v0.8b
; VBITS_GE_256-NEXT:    strb w11, [sp, #20]
; VBITS_GE_256-NEXT:    zip1 v4.8b, v4.8b, v0.8b
; VBITS_GE_256-NEXT:    ld1b { z6.d }, p2/z, [z6.d]
; VBITS_GE_256-NEXT:    shl v7.4h, v7.4h, #8
; VBITS_GE_256-NEXT:    shl v4.4h, v4.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z6.s, z6.s, z6.s
; VBITS_GE_256-NEXT:    sshr v7.4h, v7.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z6.h, z6.h, z6.h
; VBITS_GE_256-NEXT:    sshr v4.4h, v4.4h, #8
; VBITS_GE_256-NEXT:    umov w8, v6.h[3]
; VBITS_GE_256-NEXT:    umov w9, v6.h[2]
; VBITS_GE_256-NEXT:    umov w10, v6.h[1]
; VBITS_GE_256-NEXT:    umov w11, v6.h[0]
; VBITS_GE_256-NEXT:    sunpklo z6.s, z7.h
; VBITS_GE_256-NEXT:    sunpklo z4.s, z4.h
; VBITS_GE_256-NEXT:    sunpklo z6.d, z6.s
; VBITS_GE_256-NEXT:    sunpklo z4.d, z4.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #19]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    strb w9, [sp, #18]
; VBITS_GE_256-NEXT:    strb w10, [sp, #17]
; VBITS_GE_256-NEXT:    strb w11, [sp, #16]
; VBITS_GE_256-NEXT:    ld1b { z3.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z4.d, #0
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    umov w8, v3.h[3]
; VBITS_GE_256-NEXT:    umov w9, v3.h[2]
; VBITS_GE_256-NEXT:    umov w10, v3.h[1]
; VBITS_GE_256-NEXT:    umov w11, v3.h[0]
; VBITS_GE_256-NEXT:    ext v3.16b, v5.16b, v5.16b, #8
; VBITS_GE_256-NEXT:    strb w8, [sp, #15]
; VBITS_GE_256-NEXT:    strb w9, [sp, #14]
; VBITS_GE_256-NEXT:    strb w10, [sp, #13]
; VBITS_GE_256-NEXT:    zip2 v4.8b, v3.8b, v0.8b
; VBITS_GE_256-NEXT:    strb w11, [sp, #12]
; VBITS_GE_256-NEXT:    ld1b { z2.d }, p2/z, [z2.d]
; VBITS_GE_256-NEXT:    shl v4.4h, v4.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    sshr v4.4h, v4.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    umov w8, v2.h[3]
; VBITS_GE_256-NEXT:    umov w9, v2.h[2]
; VBITS_GE_256-NEXT:    umov w10, v2.h[1]
; VBITS_GE_256-NEXT:    umov w11, v2.h[0]
; VBITS_GE_256-NEXT:    sunpklo z2.s, z4.h
; VBITS_GE_256-NEXT:    sunpklo z2.d, z2.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #11]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    strb w9, [sp, #10]
; VBITS_GE_256-NEXT:    zip1 v2.8b, v3.8b, v0.8b
; VBITS_GE_256-NEXT:    strb w10, [sp, #9]
; VBITS_GE_256-NEXT:    strb w11, [sp, #8]
; VBITS_GE_256-NEXT:    ld1b { z1.d }, p2/z, [z1.d]
; VBITS_GE_256-NEXT:    shl v2.4h, v2.4h, #8
; VBITS_GE_256-NEXT:    sshr v2.4h, v2.4h, #8
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    umov w8, v1.h[3]
; VBITS_GE_256-NEXT:    umov w9, v1.h[2]
; VBITS_GE_256-NEXT:    umov w10, v1.h[1]
; VBITS_GE_256-NEXT:    umov w11, v1.h[0]
; VBITS_GE_256-NEXT:    sunpklo z1.s, z2.h
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    strb w8, [sp, #31]
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    strb w9, [sp, #30]
; VBITS_GE_256-NEXT:    strb w10, [sp, #29]
; VBITS_GE_256-NEXT:    strb w11, [sp, #28]
; VBITS_GE_256-NEXT:    ld1b { z0.d }, p1/z, [z0.d]
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    umov w8, v0.h[3]
; VBITS_GE_256-NEXT:    umov w9, v0.h[2]
; VBITS_GE_256-NEXT:    umov w10, v0.h[1]
; VBITS_GE_256-NEXT:    umov w11, v0.h[0]
; VBITS_GE_256-NEXT:    strb w8, [sp, #27]
; VBITS_GE_256-NEXT:    strb w9, [sp, #26]
; VBITS_GE_256-NEXT:    strb w10, [sp, #25]
; VBITS_GE_256-NEXT:    strb w11, [sp, #24]
; VBITS_GE_256-NEXT:    ld1b { z0.b }, p0/z, [sp]
; VBITS_GE_256-NEXT:    st1b { z0.b }, p0, [x0]
; VBITS_GE_256-NEXT:    mov sp, x29
; VBITS_GE_256-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32i8:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.b, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1b { z0.b }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    cmpeq p1.b, p0/z, z0.b, #0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1b { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_2048-NEXT:    uzp1 z0.b, z0.b, z0.b
; VBITS_GE_2048-NEXT:    st1b { z0.b }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x i8>, <32 x i8>* %a
  %ptrs = load <32 x i8*>, <32 x i8*>* %b
  %mask = icmp eq <32 x i8> %cval, zeroinitializer
  %vals = call <32 x i8> @llvm.masked.gather.v32i8(<32 x i8*> %ptrs, i32 8, <32 x i1> %mask, <32 x i8> undef)
  store <32 x i8> %vals, <32 x i8>* %a
  ret void
}

;
; LD1H
;

define void @masked_gather_v2i16(<2 x i16>* %a, <2 x i16*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrh w8, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    fmov s0, w8
; CHECK-NEXT:    ldrh w8, [x0, #2]
; CHECK-NEXT:    mov v0.s[1], w8
; CHECK-NEXT:    cmeq v0.2s, v0.2s, #0
; CHECK-NEXT:    sshll v0.2d, v0.2s, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    st1h { z0.s }, p0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x i16>, <2 x i16>* %a
  %ptrs = load <2 x i16*>, <2 x i16*>* %b
  %mask = icmp eq <2 x i16> %cval, zeroinitializer
  %vals = call <2 x i16> @llvm.masked.gather.v2i16(<2 x i16*> %ptrs, i32 8, <2 x i1> %mask, <2 x i16> undef)
  store <2 x i16> %vals, <2 x i16>* %a
  ret void
}

define void @masked_gather_v4i16(<4 x i16>* %a, <4 x i16*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    cmeq v0.4h, v0.4h, #0
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x i16>, <4 x i16>* %a
  %ptrs = load <4 x i16*>, <4 x i16*>* %b
  %mask = icmp eq <4 x i16> %cval, zeroinitializer
  %vals = call <4 x i16> @llvm.masked.gather.v4i16(<4 x i16*> %ptrs, i32 8, <4 x i1> %mask, <4 x i16> undef)
  store <4 x i16> %vals, <4 x i16>* %a
  ret void
}

define void @masked_gather_v8i16(<8 x i16>* %a, <8 x i16*>* %b) #0 {
; Ensure sensible type legalisation.
; VBITS_GE_256-LABEL: masked_gather_v8i16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ldr q0, [x0]
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    cmeq v0.8h, v0.8h, #0
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    ext v1.16b, v0.16b, v0.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    cmpne p1.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p1/z, [z3.d]
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    cmpne p0.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p0/z, [z2.d]
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    mov v0.d[1], v1.d[0]
; VBITS_GE_256-NEXT:    str q0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8i16:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ldr q0, [x0]
; VBITS_GE_512-NEXT:    ptrue p0.d, vl8
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_512-NEXT:    cmeq v0.8h, v0.8h, #0
; VBITS_GE_512-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_512-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_512-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_512-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; VBITS_GE_512-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_512-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_512-NEXT:    str q0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x i16>, <8 x i16>* %a
  %ptrs = load <8 x i16*>, <8 x i16*>* %b
  %mask = icmp eq <8 x i16> %cval, zeroinitializer
  %vals = call <8 x i16> @llvm.masked.gather.v8i16(<8 x i16*> %ptrs, i32 8, <8 x i1> %mask, <8 x i16> undef)
  store <8 x i16> %vals, <8 x i16>* %a
  ret void
}

define void @masked_gather_v16i16(<16 x i16>* %a, <16 x i16*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16i16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x8, #12
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #4
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    cmpeq p2.h, p0/z, z0.h, #0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    mov z2.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z4.s, z2.h
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ext v5.16b, v2.16b, v2.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z4.d, z4.s
; VBITS_GE_256-NEXT:    ext z2.b, z2.b, z2.b, #16
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z4.d, #0
; VBITS_GE_256-NEXT:    ext v4.16b, v2.16b, v2.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z2.s, z2.h
; VBITS_GE_256-NEXT:    ld1h { z6.d }, p2/z, [z6.d]
; VBITS_GE_256-NEXT:    sunpklo z2.d, z2.s
; VBITS_GE_256-NEXT:    sunpklo z5.s, z5.h
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    sunpklo z4.s, z4.h
; VBITS_GE_256-NEXT:    ld1h { z3.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    sunpklo z2.d, z4.s
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p2/z, [z0.d]
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    uzp1 z2.s, z6.s, z6.s
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p1/z, [z1.d]
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    mov v2.d[1], v3.d[0]
; VBITS_GE_256-NEXT:    mov v0.d[1], v1.d[0]
; VBITS_GE_256-NEXT:    splice z2.h, p1, z2.h, z0.h
; VBITS_GE_256-NEXT:    st1h { z2.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16i16:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl16
; VBITS_GE_1024-NEXT:    ptrue p1.d, vl16
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    cmpeq p1.h, p0/z, z0.h, #0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x i16>, <16 x i16>* %a
  %ptrs = load <16 x i16*>, <16 x i16*>* %b
  %mask = icmp eq <16 x i16> %cval, zeroinitializer
  %vals = call <16 x i16> @llvm.masked.gather.v16i16(<16 x i16*> %ptrs, i32 8, <16 x i1> %mask, <16 x i16> undef)
  store <16 x i16> %vals, <16 x i16>* %a
  ret void
}

define void @masked_gather_v32i16(<32 x i16>* %a, <32 x i16*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32i16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    mov x9, #12
; VBITS_GE_256-NEXT:    mov x10, #8
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1h { z3.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z4.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    mov x11, #20
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    mov x9, #28
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    cmpeq p2.h, p0/z, z3.h, #0
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov z3.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z18.s, z3.h
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ext v5.16b, v3.16b, v3.16b, #8
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    sunpklo z18.d, z18.s
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z18.d, #0
; VBITS_GE_256-NEXT:    ext v18.16b, v3.16b, v3.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z3.s, z3.h
; VBITS_GE_256-NEXT:    sunpklo z5.s, z5.h
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    sunpklo z18.s, z18.h
; VBITS_GE_256-NEXT:    ld1h { z17.d }, p2/z, [z17.d]
; VBITS_GE_256-NEXT:    cmpeq p2.h, p0/z, z4.h, #0
; VBITS_GE_256-NEXT:    sunpklo z18.d, z18.s
; VBITS_GE_256-NEXT:    ld1h { z4.d }, p3/z, [z16.d]
; VBITS_GE_256-NEXT:    mov z16.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z18.d, #0
; VBITS_GE_256-NEXT:    ld1h { z3.d }, p2/z, [z7.d]
; VBITS_GE_256-NEXT:    ld1h { z6.d }, p3/z, [z6.d]
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    uzp1 z4.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z7.h, z17.h, z17.h
; VBITS_GE_256-NEXT:    uzp1 z4.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    uzp1 z6.s, z6.s, z6.s
; VBITS_GE_256-NEXT:    mov v7.d[1], v4.d[0]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    ext v4.16b, v16.16b, v16.16b, #8
; VBITS_GE_256-NEXT:    uzp1 z6.h, z6.h, z6.h
; VBITS_GE_256-NEXT:    mov v3.d[1], v6.d[0]
; VBITS_GE_256-NEXT:    sunpklo z6.s, z16.h
; VBITS_GE_256-NEXT:    ext z16.b, z16.b, z16.b, #16
; VBITS_GE_256-NEXT:    sunpklo z6.d, z6.s
; VBITS_GE_256-NEXT:    ext v17.16b, v16.16b, v16.16b, #8
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    sunpklo z4.s, z4.h
; VBITS_GE_256-NEXT:    sunpklo z4.d, z4.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z4.d, #0
; VBITS_GE_256-NEXT:    ld1h { z4.d }, p2/z, [z5.d]
; VBITS_GE_256-NEXT:    sunpklo z5.s, z16.h
; VBITS_GE_256-NEXT:    sunpklo z6.s, z17.h
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    sunpklo z6.d, z6.s
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    ld1h { z2.d }, p3/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p2/z, [z1.d]
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p1/z, [z0.d]
; VBITS_GE_256-NEXT:    uzp1 z4.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z4.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z7.h, p1, z7.h, z3.h
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    mov v4.d[1], v2.d[0]
; VBITS_GE_256-NEXT:    st1h { z7.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    mov v1.d[1], v0.d[0]
; VBITS_GE_256-NEXT:    splice z4.h, p1, z4.h, z1.h
; VBITS_GE_256-NEXT:    st1h { z4.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32i16:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.h, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    cmpeq p1.h, p0/z, z0.h, #0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1h { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_2048-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x i16>, <32 x i16>* %a
  %ptrs = load <32 x i16*>, <32 x i16*>* %b
  %mask = icmp eq <32 x i16> %cval, zeroinitializer
  %vals = call <32 x i16> @llvm.masked.gather.v32i16(<32 x i16*> %ptrs, i32 8, <32 x i1> %mask, <32 x i16> undef)
  store <32 x i16> %vals, <32 x i16>* %a
  ret void
}

;
; LD1W
;

define void @masked_gather_v2i32(<2 x i32>* %a, <2 x i32*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    cmeq v0.2s, v0.2s, #0
; CHECK-NEXT:    sshll v0.2d, v0.2s, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1w { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x i32>, <2 x i32>* %a
  %ptrs = load <2 x i32*>, <2 x i32*>* %b
  %mask = icmp eq <2 x i32> %cval, zeroinitializer
  %vals = call <2 x i32> @llvm.masked.gather.v2i32(<2 x i32*> %ptrs, i32 8, <2 x i1> %mask, <2 x i32> undef)
  store <2 x i32> %vals, <2 x i32>* %a
  ret void
}

define void @masked_gather_v4i32(<4 x i32>* %a, <4 x i32*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1w { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x i32>, <4 x i32>* %a
  %ptrs = load <4 x i32*>, <4 x i32*>* %b
  %mask = icmp eq <4 x i32> %cval, zeroinitializer
  %vals = call <4 x i32> @llvm.masked.gather.v4i32(<4 x i32*> %ptrs, i32 8, <4 x i1> %mask, <4 x i32> undef)
  store <4 x i32> %vals, <4 x i32>* %a
  ret void
}

define void @masked_gather_v8i32(<8 x i32>* %a, <8 x i32*>* %b) #0 {
; Ensure sensible type legalisation.
; VBITS_GE_256-LABEL: masked_gather_v8i32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    cmpeq p2.s, p0/z, z0.s, #0
; VBITS_GE_256-NEXT:    mov z0.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z2.d]
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_256-NEXT:    ptrue p1.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z1.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    splice z1.s, p1, z1.s, z0.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8i32:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ptrue p0.s, vl8
; VBITS_GE_512-NEXT:    ptrue p1.d, vl8
; VBITS_GE_512-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_512-NEXT:    cmpeq p1.s, p0/z, z0.s, #0
; VBITS_GE_512-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_512-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_512-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_512-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x i32>, <8 x i32>* %a
  %ptrs = load <8 x i32*>, <8 x i32*>* %b
  %mask = icmp eq <8 x i32> %cval, zeroinitializer
  %vals = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %ptrs, i32 8, <8 x i1> %mask, <8 x i32> undef)
  store <8 x i32> %vals, <8 x i32>* %a
  ret void
}

define void @masked_gather_v16i32(<16 x i32>* %a, <16 x i32*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16i32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #8
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #4
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    cmpeq p2.s, p0/z, z0.s, #0
; VBITS_GE_256-NEXT:    cmpeq p3.s, p0/z, z1.s, #0
; VBITS_GE_256-NEXT:    mov z0.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1w { z4.d }, p2/z, [z4.d]
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z0.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p3/z, [z3.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p2/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p1/z, [z2.d]
; VBITS_GE_256-NEXT:    ptrue p1.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z3.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    splice z3.s, p1, z3.s, z0.s
; VBITS_GE_256-NEXT:    splice z1.s, p1, z1.s, z2.s
; VBITS_GE_256-NEXT:    st1w { z3.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16i32:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.s, vl16
; VBITS_GE_1024-NEXT:    ptrue p1.d, vl16
; VBITS_GE_1024-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    cmpeq p1.s, p0/z, z0.s, #0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_1024-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x i32>, <16 x i32>* %a
  %ptrs = load <16 x i32*>, <16 x i32*>* %b
  %mask = icmp eq <16 x i32> %cval, zeroinitializer
  %vals = call <16 x i32> @llvm.masked.gather.v16i32(<16 x i32*> %ptrs, i32 8, <16 x i1> %mask, <16 x i32> undef)
  store <16 x i32> %vals, <16 x i32>* %a
  ret void
}

define void @masked_gather_v32i32(<32 x i32>* %a, <32 x i32*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32i32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    cmpeq p2.s, p0/z, z0.s, #0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    cmpeq p4.s, p0/z, z2.s, #0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z18.d]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [z17.d]
; VBITS_GE_256-NEXT:    cmpeq p3.s, p0/z, z1.s, #0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    cmpeq p2.s, p0/z, z3.s, #0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [z16.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [z6.d]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [z7.d]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [z0.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [z4.d]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32i32:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    cmpeq p1.s, p0/z, z0.s, #0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x i32>, <32 x i32>* %a
  %ptrs = load <32 x i32*>, <32 x i32*>* %b
  %mask = icmp eq <32 x i32> %cval, zeroinitializer
  %vals = call <32 x i32> @llvm.masked.gather.v32i32(<32 x i32*> %ptrs, i32 8, <32 x i1> %mask, <32 x i32> undef)
  store <32 x i32> %vals, <32 x i32>* %a
  ret void
}

;
; LD1D
;

; Scalarize 1 x i64 gathers
define void @masked_gather_v1i64(<1 x i64>* %a, <1 x i64*>* %b) #0 {
; CHECK-LABEL: masked_gather_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    // implicit-def: $d0
; CHECK-NEXT:    cbnz x8, .LBB15_2
; CHECK-NEXT:  // %bb.1: // %cond.load
; CHECK-NEXT:    ldr d0, [x1]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    ldr d0, [x8]
; CHECK-NEXT:  .LBB15_2: // %else
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <1 x i64>, <1 x i64>* %a
  %ptrs = load <1 x i64*>, <1 x i64*>* %b
  %mask = icmp eq <1 x i64> %cval, zeroinitializer
  %vals = call <1 x i64> @llvm.masked.gather.v1i64(<1 x i64*> %ptrs, i32 8, <1 x i1> %mask, <1 x i64> undef)
  store <1 x i64> %vals, <1 x i64>* %a
  ret void
}

define void @masked_gather_v2i64(<2 x i64>* %a, <2 x i64*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    cmeq v0.2d, v0.2d, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x i64>, <2 x i64>* %a
  %ptrs = load <2 x i64*>, <2 x i64*>* %b
  %mask = icmp eq <2 x i64> %cval, zeroinitializer
  %vals = call <2 x i64> @llvm.masked.gather.v2i64(<2 x i64*> %ptrs, i32 8, <2 x i1> %mask, <2 x i64> undef)
  store <2 x i64> %vals, <2 x i64>* %a
  ret void
}

define void @masked_gather_v4i64(<4 x i64>* %a, <4 x i64*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; CHECK-NEXT:    st1d { z0.d }, p0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x i64>, <4 x i64>* %a
  %ptrs = load <4 x i64*>, <4 x i64*>* %b
  %mask = icmp eq <4 x i64> %cval, zeroinitializer
  %vals = call <4 x i64> @llvm.masked.gather.v4i64(<4 x i64*> %ptrs, i32 8, <4 x i1> %mask, <4 x i64> undef)
  store <4 x i64> %vals, <4 x i64>* %a
  ret void
}

define void @masked_gather_v8i64(<8 x i64>* %a, <8 x i64*>* %b) #0 {
; Ensure sensible type legalisation.
; VBITS_GE_256-LABEL: masked_gather_v8i64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8i64:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ptrue p0.d, vl8
; VBITS_GE_512-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_512-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; VBITS_GE_512-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_512-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_512-NEXT:    ret

  %cval = load <8 x i64>, <8 x i64>* %a
  %ptrs = load <8 x i64*>, <8 x i64*>* %b
  %mask = icmp eq <8 x i64> %cval, zeroinitializer
  %vals = call <8 x i64> @llvm.masked.gather.v8i64(<8 x i64*> %ptrs, i32 8, <8 x i1> %mask, <8 x i64> undef)
  store <8 x i64> %vals, <8 x i64>* %a
  ret void
}

define void @masked_gather_v16i64(<16 x i64>* %a, <16 x i64*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16i64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #8
; VBITS_GE_256-NEXT:    mov x9, #4
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    cmpeq p3.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z2.d, #0
; VBITS_GE_256-NEXT:    cmpeq p4.d, p0/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p3/z, [z4.d]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z6.d]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p4/z, [z7.d]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z2.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z3.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16i64:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.d, vl16
; VBITS_GE_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_1024-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; VBITS_GE_1024-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x i64>, <16 x i64>* %a
  %ptrs = load <16 x i64*>, <16 x i64*>* %b
  %mask = icmp eq <16 x i64> %cval, zeroinitializer
  %vals = call <16 x i64> @llvm.masked.gather.v16i64(<16 x i64*> %ptrs, i32 8, <16 x i1> %mask, <16 x i64> undef)
  store <16 x i64> %vals, <16 x i64>* %a
  ret void
}

define void @masked_gather_v32i64(<32 x i64>* %a, <32 x i64*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32i64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    mov x11, #16
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    mov x13, #24
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z19.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z21.d }, p0/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z22.d }, p0/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z20.d }, p0/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p0/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p0/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p0/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z23.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p2/z, [z19.d]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    cmpeq p1.d, p0/z, z6.d, #0
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z21.d]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p2/z, [z22.d]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p2/z, [z20.d]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z4.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p2/z, [z18.d]
; VBITS_GE_256-NEXT:    cmpeq p2.d, p0/z, z5.d, #0
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p2/z, [z17.d]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [z16.d]
; VBITS_GE_256-NEXT:    cmpeq p1.d, p0/z, z7.d, #0
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [z23.d]
; VBITS_GE_256-NEXT:    st1d { z3.d }, p0, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z4.d }, p0, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z2.d }, p0, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z6.d }, p0, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z5.d }, p0, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z7.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32i64:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.d, vl32
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_2048-NEXT:    cmpeq p1.d, p0/z, z0.d, #0
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x i64>, <32 x i64>* %a
  %ptrs = load <32 x i64*>, <32 x i64*>* %b
  %mask = icmp eq <32 x i64> %cval, zeroinitializer
  %vals = call <32 x i64> @llvm.masked.gather.v32i64(<32 x i64*> %ptrs, i32 8, <32 x i1> %mask, <32 x i64> undef)
  store <32 x i64> %vals, <32 x i64>* %a
  ret void
}

;
; LD1H (float)
;

define void @masked_gather_v2f16(<2 x half>* %a, <2 x half*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr s1, [x0]
; CHECK-NEXT:    movi d0, #0000000000000000
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    fcmeq v1.4h, v1.4h, #0.0
; CHECK-NEXT:    umov w8, v1.h[0]
; CHECK-NEXT:    umov w9, v1.h[1]
; CHECK-NEXT:    fmov s1, w8
; CHECK-NEXT:    mov v1.s[1], w9
; CHECK-NEXT:    shl v1.2s, v1.2s, #16
; CHECK-NEXT:    sshr v1.2s, v1.2s, #16
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov w9, v1.s[1]
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    mov v0.h[0], w8
; CHECK-NEXT:    mov v0.h[1], w9
; CHECK-NEXT:    shl v0.4h, v0.4h, #15
; CHECK-NEXT:    cmlt v0.4h, v0.4h, #0
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    str s0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x half>, <2 x half>* %a
  %ptrs = load <2 x half*>, <2 x half*>* %b
  %mask = fcmp oeq <2 x half> %cval, zeroinitializer
  %vals = call <2 x half> @llvm.masked.gather.v2f16(<2 x half*> %ptrs, i32 8, <2 x i1> %mask, <2 x half> undef)
  store <2 x half> %vals, <2 x half>* %a
  ret void
}

define void @masked_gather_v4f16(<4 x half>* %a, <4 x half*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    fcmeq v0.4h, v0.4h, #0.0
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x half>, <4 x half>* %a
  %ptrs = load <4 x half*>, <4 x half*>* %b
  %mask = fcmp oeq <4 x half> %cval, zeroinitializer
  %vals = call <4 x half> @llvm.masked.gather.v4f16(<4 x half*> %ptrs, i32 8, <4 x i1> %mask, <4 x half> undef)
  store <4 x half> %vals, <4 x half>* %a
  ret void
}

define void @masked_gather_v8f16(<8 x half>* %a, <8 x half*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v8f16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ldr q0, [x0]
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    fcmeq v0.8h, v0.8h, #0.0
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    ext v1.16b, v0.16b, v0.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    cmpne p1.d, p0/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p1/z, [z3.d]
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    cmpne p0.d, p0/z, z1.d, #0
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p0/z, [z2.d]
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    mov v0.d[1], v1.d[0]
; VBITS_GE_256-NEXT:    str q0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8f16:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ldr q0, [x0]
; VBITS_GE_512-NEXT:    ptrue p0.d, vl8
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_512-NEXT:    fcmeq v0.8h, v0.8h, #0.0
; VBITS_GE_512-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_512-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_512-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; VBITS_GE_512-NEXT:    ld1h { z0.d }, p0/z, [z1.d]
; VBITS_GE_512-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_512-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_512-NEXT:    str q0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x half>, <8 x half>* %a
  %ptrs = load <8 x half*>, <8 x half*>* %b
  %mask = fcmp oeq <8 x half> %cval, zeroinitializer
  %vals = call <8 x half> @llvm.masked.gather.v8f16(<8 x half*> %ptrs, i32 8, <8 x i1> %mask, <8 x half> undef)
  store <8 x half> %vals, <8 x half>* %a
  ret void
}

define void @masked_gather_v16f16(<16 x half>* %a, <16 x half*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16f16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x8, #12
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #4
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z0.h, #0.0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    mov z2.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z4.s, z2.h
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ext v5.16b, v2.16b, v2.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z4.d, z4.s
; VBITS_GE_256-NEXT:    ext z2.b, z2.b, z2.b, #16
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z4.d, #0
; VBITS_GE_256-NEXT:    ext v4.16b, v2.16b, v2.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z2.s, z2.h
; VBITS_GE_256-NEXT:    ld1h { z6.d }, p2/z, [z6.d]
; VBITS_GE_256-NEXT:    sunpklo z2.d, z2.s
; VBITS_GE_256-NEXT:    sunpklo z5.s, z5.h
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    sunpklo z4.s, z4.h
; VBITS_GE_256-NEXT:    ld1h { z3.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    sunpklo z2.d, z4.s
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p2/z, [z0.d]
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    uzp1 z2.s, z6.s, z6.s
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p1/z, [z1.d]
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    mov v2.d[1], v3.d[0]
; VBITS_GE_256-NEXT:    mov v0.d[1], v1.d[0]
; VBITS_GE_256-NEXT:    splice z2.h, p1, z2.h, z0.h
; VBITS_GE_256-NEXT:    st1h { z2.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16f16:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl16
; VBITS_GE_1024-NEXT:    ptrue p1.d, vl16
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x half>, <16 x half>* %a
  %ptrs = load <16 x half*>, <16 x half*>* %b
  %mask = fcmp oeq <16 x half> %cval, zeroinitializer
  %vals = call <16 x half> @llvm.masked.gather.v16f16(<16 x half*> %ptrs, i32 8, <16 x i1> %mask, <16 x half> undef)
  store <16 x half> %vals, <16 x half>* %a
  ret void
}

define void @masked_gather_v32f16(<32 x half>* %a, <32 x half*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32f16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    mov x9, #12
; VBITS_GE_256-NEXT:    mov x10, #8
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1h { z3.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z4.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    mov x11, #20
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    mov x9, #28
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z3.h, #0.0
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov z3.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    sunpklo z18.s, z3.h
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ext v5.16b, v3.16b, v3.16b, #8
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    sunpklo z18.d, z18.s
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z18.d, #0
; VBITS_GE_256-NEXT:    ext v18.16b, v3.16b, v3.16b, #8
; VBITS_GE_256-NEXT:    sunpklo z3.s, z3.h
; VBITS_GE_256-NEXT:    sunpklo z5.s, z5.h
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    sunpklo z18.s, z18.h
; VBITS_GE_256-NEXT:    ld1h { z17.d }, p2/z, [z17.d]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z4.h, #0.0
; VBITS_GE_256-NEXT:    sunpklo z18.d, z18.s
; VBITS_GE_256-NEXT:    ld1h { z4.d }, p3/z, [z16.d]
; VBITS_GE_256-NEXT:    mov z16.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z18.d, #0
; VBITS_GE_256-NEXT:    ld1h { z3.d }, p2/z, [z7.d]
; VBITS_GE_256-NEXT:    ld1h { z6.d }, p3/z, [z6.d]
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    uzp1 z4.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z7.h, z17.h, z17.h
; VBITS_GE_256-NEXT:    uzp1 z4.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    uzp1 z6.s, z6.s, z6.s
; VBITS_GE_256-NEXT:    mov v7.d[1], v4.d[0]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z3.h, z3.h
; VBITS_GE_256-NEXT:    ext v4.16b, v16.16b, v16.16b, #8
; VBITS_GE_256-NEXT:    uzp1 z6.h, z6.h, z6.h
; VBITS_GE_256-NEXT:    mov v3.d[1], v6.d[0]
; VBITS_GE_256-NEXT:    sunpklo z6.s, z16.h
; VBITS_GE_256-NEXT:    ext z16.b, z16.b, z16.b, #16
; VBITS_GE_256-NEXT:    sunpklo z6.d, z6.s
; VBITS_GE_256-NEXT:    ext v17.16b, v16.16b, v16.16b, #8
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    sunpklo z4.s, z4.h
; VBITS_GE_256-NEXT:    sunpklo z4.d, z4.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z4.d, #0
; VBITS_GE_256-NEXT:    ld1h { z4.d }, p2/z, [z5.d]
; VBITS_GE_256-NEXT:    sunpklo z5.s, z16.h
; VBITS_GE_256-NEXT:    sunpklo z6.s, z17.h
; VBITS_GE_256-NEXT:    sunpklo z5.d, z5.s
; VBITS_GE_256-NEXT:    sunpklo z6.d, z6.s
; VBITS_GE_256-NEXT:    cmpne p2.d, p1/z, z5.d, #0
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    ld1h { z2.d }, p3/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1h { z1.d }, p2/z, [z1.d]
; VBITS_GE_256-NEXT:    ld1h { z0.d }, p1/z, [z0.d]
; VBITS_GE_256-NEXT:    uzp1 z4.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z4.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z7.h, p1, z7.h, z3.h
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    mov v4.d[1], v2.d[0]
; VBITS_GE_256-NEXT:    st1h { z7.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    mov v1.d[1], v0.d[0]
; VBITS_GE_256-NEXT:    splice z4.h, p1, z4.h, z1.h
; VBITS_GE_256-NEXT:    st1h { z4.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32f16:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.h, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1h { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_2048-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x half>, <32 x half>* %a
  %ptrs = load <32 x half*>, <32 x half*>* %b
  %mask = fcmp oeq <32 x half> %cval, zeroinitializer
  %vals = call <32 x half> @llvm.masked.gather.v32f16(<32 x half*> %ptrs, i32 8, <32 x i1> %mask, <32 x half> undef)
  store <32 x half> %vals, <32 x half>* %a
  ret void
}

;
; LD1W (float)
;

define void @masked_gather_v2f32(<2 x float>* %a, <2 x float*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    fcmeq v0.2s, v0.2s, #0.0
; CHECK-NEXT:    sshll v0.2d, v0.2s, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1w { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x float>, <2 x float>* %a
  %ptrs = load <2 x float*>, <2 x float*>* %b
  %mask = fcmp oeq <2 x float> %cval, zeroinitializer
  %vals = call <2 x float> @llvm.masked.gather.v2f32(<2 x float*> %ptrs, i32 8, <2 x i1> %mask, <2 x float> undef)
  store <2 x float> %vals, <2 x float>* %a
  ret void
}

define void @masked_gather_v4f32(<4 x float>* %a, <4 x float*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    fcmeq v0.4s, v0.4s, #0.0
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1w { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x float>, <4 x float>* %a
  %ptrs = load <4 x float*>, <4 x float*>* %b
  %mask = fcmp oeq <4 x float> %cval, zeroinitializer
  %vals = call <4 x float> @llvm.masked.gather.v4f32(<4 x float*> %ptrs, i32 8, <4 x i1> %mask, <4 x float> undef)
  store <4 x float> %vals, <4 x float>* %a
  ret void
}

define void @masked_gather_v8f32(<8 x float>* %a, <8 x float*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v8f32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov z0.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z2.d]
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z0.d, #0
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_256-NEXT:    ptrue p1.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z1.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    splice z1.s, p1, z1.s, z0.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8f32:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ptrue p0.s, vl8
; VBITS_GE_512-NEXT:    ptrue p1.d, vl8
; VBITS_GE_512-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_512-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_512-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_512-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_512-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_512-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x float>, <8 x float>* %a
  %ptrs = load <8 x float*>, <8 x float*>* %b
  %mask = fcmp oeq <8 x float> %cval, zeroinitializer
  %vals = call <8 x float> @llvm.masked.gather.v8f32(<8 x float*> %ptrs, i32 8, <8 x i1> %mask, <8 x float> undef)
  store <8 x float> %vals, <8 x float>* %a
  ret void
}

define void @masked_gather_v16f32(<16 x float>* %a, <16 x float*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16f32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #8
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #4
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z0.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1w { z4.d }, p2/z, [z4.d]
; VBITS_GE_256-NEXT:    sunpklo z0.d, z0.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z0.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p3/z, [z3.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p2/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p1/z, [z2.d]
; VBITS_GE_256-NEXT:    ptrue p1.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z3.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    splice z3.s, p1, z3.s, z0.s
; VBITS_GE_256-NEXT:    splice z1.s, p1, z1.s, z2.s
; VBITS_GE_256-NEXT:    st1w { z3.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16f32:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.s, vl16
; VBITS_GE_1024-NEXT:    ptrue p1.d, vl16
; VBITS_GE_1024-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_1024-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x float>, <16 x float>* %a
  %ptrs = load <16 x float*>, <16 x float*>* %b
  %mask = fcmp oeq <16 x float> %cval, zeroinitializer
  %vals = call <16 x float> @llvm.masked.gather.v16f32(<16 x float*> %ptrs, i32 8, <16 x i1> %mask, <16 x float> undef)
  store <16 x float> %vals, <16 x float>* %a
  ret void
}

define void @masked_gather_v32f32(<32 x float>* %a, <32 x float*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32f32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z18.d]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [z17.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [z16.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [z6.d]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [z7.d]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [z0.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [z4.d]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32f32:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x float>, <32 x float>* %a
  %ptrs = load <32 x float*>, <32 x float*>* %b
  %mask = fcmp oeq <32 x float> %cval, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

;
; LD1D (float)
;

; Scalarize 1 x double gathers
define void @masked_gather_v1f64(<1 x double>* %a, <1 x double*>* %b) #0 {
; CHECK-LABEL: masked_gather_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    fcmp d0, #0.0
; CHECK-NEXT:    // implicit-def: $d0
; CHECK-NEXT:    b.ne .LBB31_2
; CHECK-NEXT:  // %bb.1: // %cond.load
; CHECK-NEXT:    ldr d0, [x1]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    ldr d0, [x8]
; CHECK-NEXT:  .LBB31_2: // %else
; CHECK-NEXT:    str d0, [x0]
; CHECK-NEXT:    ret
  %cval = load <1 x double>, <1 x double>* %a
  %ptrs = load <1 x double*>, <1 x double*>* %b
  %mask = fcmp oeq <1 x double> %cval, zeroinitializer
  %vals = call <1 x double> @llvm.masked.gather.v1f64(<1 x double*> %ptrs, i32 8, <1 x i1> %mask, <1 x double> undef)
  store <1 x double> %vals, <1 x double>* %a
  ret void
}

define void @masked_gather_v2f64(<2 x double>* %a, <2 x double*>* %b) #0 {
; CHECK-LABEL: masked_gather_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldr q1, [x1]
; CHECK-NEXT:    fcmeq v0.2d, v0.2d, #0.0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [z1.d]
; CHECK-NEXT:    str q0, [x0]
; CHECK-NEXT:    ret
  %cval = load <2 x double>, <2 x double>* %a
  %ptrs = load <2 x double*>, <2 x double*>* %b
  %mask = fcmp oeq <2 x double> %cval, zeroinitializer
  %vals = call <2 x double> @llvm.masked.gather.v2f64(<2 x double*> %ptrs, i32 8, <2 x i1> %mask, <2 x double> undef)
  store <2 x double> %vals, <2 x double>* %a
  ret void
}

define void @masked_gather_v4f64(<4 x double>* %a, <4 x double*>* %b) #0 {
; CHECK-LABEL: masked_gather_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x1]
; CHECK-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; CHECK-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; CHECK-NEXT:    st1d { z0.d }, p0, [x0]
; CHECK-NEXT:    ret
  %cval = load <4 x double>, <4 x double>* %a
  %ptrs = load <4 x double*>, <4 x double*>* %b
  %mask = fcmp oeq <4 x double> %cval, zeroinitializer
  %vals = call <4 x double> @llvm.masked.gather.v4f64(<4 x double*> %ptrs, i32 8, <4 x i1> %mask, <4 x double> undef)
  store <4 x double> %vals, <4 x double>* %a
  ret void
}

define void @masked_gather_v8f64(<8 x double>* %a, <8 x double*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v8f64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z1.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_512-LABEL: masked_gather_v8f64:
; VBITS_GE_512:       // %bb.0:
; VBITS_GE_512-NEXT:    ptrue p0.d, vl8
; VBITS_GE_512-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_512-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_512-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_512-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_512-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_512-NEXT:    ret
  %cval = load <8 x double>, <8 x double>* %a
  %ptrs = load <8 x double*>, <8 x double*>* %b
  %mask = fcmp oeq <8 x double> %cval, zeroinitializer
  %vals = call <8 x double> @llvm.masked.gather.v8f64(<8 x double*> %ptrs, i32 8, <8 x i1> %mask, <8 x double> undef)
  store <8 x double> %vals, <8 x double>* %a
  ret void
}

define void @masked_gather_v16f64(<16 x double>* %a, <16 x double*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v16f64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #8
; VBITS_GE_256-NEXT:    mov x9, #4
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.d, p0/z, z1.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z2.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p4.d, p0/z, z3.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p3/z, [z4.d]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z6.d]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p4/z, [z7.d]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z2.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z3.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_v16f64:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.d, vl16
; VBITS_GE_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_1024-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_1024-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cval = load <16 x double>, <16 x double>* %a
  %ptrs = load <16 x double*>, <16 x double*>* %b
  %mask = fcmp oeq <16 x double> %cval, zeroinitializer
  %vals = call <16 x double> @llvm.masked.gather.v16f64(<16 x double*> %ptrs, i32 8, <16 x i1> %mask, <16 x double> undef)
  store <16 x double> %vals, <16 x double>* %a
  ret void
}

define void @masked_gather_v32f64(<32 x double>* %a, <32 x double*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_v32f64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #4
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #12
; VBITS_GE_256-NEXT:    mov x11, #16
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    mov x13, #24
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z19.d }, p0/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z21.d }, p0/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z22.d }, p0/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z20.d }, p0/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z0.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p0/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p0/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p0/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z23.d }, p0/z, [x1]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p2/z, [z19.d]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z1.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z6.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [z21.d]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z2.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p2/z, [z22.d]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z3.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p2/z, [z20.d]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z4.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p2/z, [z18.d]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z5.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p2/z, [z17.d]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [z16.d]
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z7.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [z23.d]
; VBITS_GE_256-NEXT:    st1d { z3.d }, p0, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z4.d }, p0, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z2.d }, p0, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z6.d }, p0, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z5.d }, p0, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z7.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_v32f64:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.d, vl32
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cval = load <32 x double>, <32 x double>* %a
  %ptrs = load <32 x double*>, <32 x double*>* %b
  %mask = fcmp oeq <32 x double> %cval, zeroinitializer
  %vals = call <32 x double> @llvm.masked.gather.v32f64(<32 x double*> %ptrs, i32 8, <32 x i1> %mask, <32 x double> undef)
  store <32 x double> %vals, <32 x double>* %a
  ret void
}

; The above tests test the types, the below tests check that the addressing
; modes still function

define void @masked_gather_32b_scaled_sext_f16(<32 x half>* %a, <32 x i32>* %b, half* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_scaled_sext_f16:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    ptrue p1.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z1.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p1/z, [x1, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p1/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p1/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z0.h, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.h, p0/z, z1.h, #0.0
; VBITS_GE_256-NEXT:    mov z0.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    mov z1.h, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    ld1h { z4.s }, p2/z, [x2, z4.s, sxtw #1]
; VBITS_GE_256-NEXT:    cmpne p2.s, p1/z, z0.s, #0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1h { z0.s }, p2/z, [x2, z3.s, sxtw #1]
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.s, p1/z, z1.s, #0
; VBITS_GE_256-NEXT:    ld1h { z1.s }, p2/z, [x2, z5.s, sxtw #1]
; VBITS_GE_256-NEXT:    ld1h { z2.s }, p1/z, [x2, z2.s, sxtw #1]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z3.h, p1, z3.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    splice z1.h, p1, z1.h, z2.h
; VBITS_GE_256-NEXT:    st1h { z3.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    st1h { z1.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_32b_scaled_sext_f16:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl32
; VBITS_GE_1024-NEXT:    ptrue p1.s, vl32
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1w { z1.s }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.s }, p1/z, [x2, z1.s, sxtw #1]
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cvals = load <32 x half>, <32 x half>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = sext <32 x i32> %idxs to <32 x i64>
  %ptrs = getelementptr half, half* %base, <32 x i64> %ext
  %mask = fcmp oeq <32 x half> %cvals, zeroinitializer
  %vals = call <32 x half> @llvm.masked.gather.v32f16(<32 x half*> %ptrs, i32 8, <32 x i1> %mask, <32 x half> undef)
  store <32 x half> %vals, <32 x half>* %a
  ret void
}

define void @masked_gather_32b_scaled_sext_f32(<32 x float>* %a, <32 x i32>* %b, float* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_scaled_sext_f32:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p0/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p0/z, [x1, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z6.s }, p0/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z7.s }, p0/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p3/z, [x2, z4.s, sxtw #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p2/z, [x2, z6.s, sxtw #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p1/z, [x2, z5.s, sxtw #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p4/z, [x2, z7.s, sxtw #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z3.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_32b_scaled_sext_f32:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.s, vl32
; VBITS_GE_1024-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1w { z1.s }, p0/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_1024-NEXT:    ld1w { z0.s }, p1/z, [x2, z1.s, sxtw #2]
; VBITS_GE_1024-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = sext <32 x i32> %idxs to <32 x i64>
  %ptrs = getelementptr float, float* %base, <32 x i64> %ext
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_32b_scaled_sext_f64(<32 x double>* %a, <32 x i32>* %b, double* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_scaled_sext_f64:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #12
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x11, #20
; VBITS_GE_256-NEXT:    mov x12, #24
; VBITS_GE_256-NEXT:    mov x13, #28
; VBITS_GE_256-NEXT:    mov x14, #4
; VBITS_GE_256-NEXT:    ptrue p0.d, vl4
; VBITS_GE_256-NEXT:    ptrue p1.s, vl8
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p0/z, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p0/z, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p0/z, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p0/z, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p0/z, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p0/z, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z18.s }, p1/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z17.s }, p1/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z16.s }, p1/z, [x1, x12, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z19.s }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z0.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z5.d, #0.0
; VBITS_GE_256-NEXT:    sunpklo z22.d, z18.s
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    sunpklo z18.d, z18.s
; VBITS_GE_256-NEXT:    sunpklo z21.d, z17.s
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p2/z, [x2, z18.d, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z1.d, #0.0
; VBITS_GE_256-NEXT:    ext z17.b, z17.b, z17.b, #16
; VBITS_GE_256-NEXT:    ld1d { z1.d }, p2/z, [x2, z22.d, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z2.d, #0.0
; VBITS_GE_256-NEXT:    sunpklo z20.d, z16.s
; VBITS_GE_256-NEXT:    ext z16.b, z16.b, z16.b, #16
; VBITS_GE_256-NEXT:    sunpklo z17.d, z17.s
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p2/z, [x2, z21.d, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z3.d, #0.0
; VBITS_GE_256-NEXT:    sunpklo z16.d, z16.s
; VBITS_GE_256-NEXT:    sunpklo z23.d, z19.s
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p2/z, [x2, z17.d, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z4.d, #0.0
; VBITS_GE_256-NEXT:    sunpklo z19.d, z19.s
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p2/z, [x2, z20.d, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x2, z16.d, lsl #3]
; VBITS_GE_256-NEXT:    fcmeq p1.d, p0/z, z6.d, #0.0
; VBITS_GE_256-NEXT:    fcmeq p2.d, p0/z, z7.d, #0.0
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p2/z, [x2, z23.d, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x2, z19.d, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z3.d }, p0, [x0, x11, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z2.d }, p0, [x0, x10, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z5.d }, p0, [x0, x13, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z4.d }, p0, [x0, x12, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z1.d }, p0, [x0, x9, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z0.d }, p0, [x0, x8, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z7.d }, p0, [x0, x14, lsl #3]
; VBITS_GE_256-NEXT:    st1d { z6.d }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_32b_scaled_sext_f64:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.d, vl32
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1sw { z1.d }, p0/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.d, p0/z, z0.d, #0.0
; VBITS_GE_2048-NEXT:    ld1d { z0.d }, p1/z, [x2, z1.d, lsl #3]
; VBITS_GE_2048-NEXT:    st1d { z0.d }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x double>, <32 x double>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = sext <32 x i32> %idxs to <32 x i64>
  %ptrs = getelementptr double, double* %base, <32 x i64> %ext
  %mask = fcmp oeq <32 x double> %cvals, zeroinitializer
  %vals = call <32 x double> @llvm.masked.gather.v32f64(<32 x double*> %ptrs, i32 8, <32 x i1> %mask, <32 x double> undef)
  store <32 x double> %vals, <32 x double>* %a
  ret void
}

define void @masked_gather_32b_scaled_zext(<32 x half>* %a, <32 x i32>* %b, half* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_scaled_zext:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    ptrue p1.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z1.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p1/z, [x1, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p1/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p1/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z0.h, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.h, p0/z, z1.h, #0.0
; VBITS_GE_256-NEXT:    mov z0.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    mov z1.h, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    ld1h { z4.s }, p2/z, [x2, z4.s, uxtw #1]
; VBITS_GE_256-NEXT:    cmpne p2.s, p1/z, z0.s, #0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1h { z0.s }, p2/z, [x2, z3.s, uxtw #1]
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.s, p1/z, z1.s, #0
; VBITS_GE_256-NEXT:    ld1h { z1.s }, p2/z, [x2, z5.s, uxtw #1]
; VBITS_GE_256-NEXT:    ld1h { z2.s }, p1/z, [x2, z2.s, uxtw #1]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z3.h, p1, z3.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    splice z1.h, p1, z1.h, z2.h
; VBITS_GE_256-NEXT:    st1h { z3.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    st1h { z1.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_32b_scaled_zext:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl32
; VBITS_GE_1024-NEXT:    ptrue p1.s, vl32
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1w { z1.s }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.s }, p1/z, [x2, z1.s, uxtw #1]
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cvals = load <32 x half>, <32 x half>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = zext <32 x i32> %idxs to <32 x i64>
  %ptrs = getelementptr half, half* %base, <32 x i64> %ext
  %mask = fcmp oeq <32 x half> %cvals, zeroinitializer
  %vals = call <32 x half> @llvm.masked.gather.v32f16(<32 x half*> %ptrs, i32 8, <32 x i1> %mask, <32 x half> undef)
  store <32 x half> %vals, <32 x half>* %a
  ret void
}

define void @masked_gather_32b_unscaled_sext(<32 x half>* %a, <32 x i32>* %b, i8* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_unscaled_sext:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    ptrue p1.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z1.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p1/z, [x1, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p1/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p1/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z0.h, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.h, p0/z, z1.h, #0.0
; VBITS_GE_256-NEXT:    mov z0.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    mov z1.h, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    ld1h { z4.s }, p2/z, [x2, z4.s, sxtw]
; VBITS_GE_256-NEXT:    cmpne p2.s, p1/z, z0.s, #0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1h { z0.s }, p2/z, [x2, z3.s, sxtw]
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.s, p1/z, z1.s, #0
; VBITS_GE_256-NEXT:    ld1h { z1.s }, p2/z, [x2, z5.s, sxtw]
; VBITS_GE_256-NEXT:    ld1h { z2.s }, p1/z, [x2, z2.s, sxtw]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z3.h, p1, z3.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    splice z1.h, p1, z1.h, z2.h
; VBITS_GE_256-NEXT:    st1h { z3.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    st1h { z1.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_32b_unscaled_sext:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl32
; VBITS_GE_1024-NEXT:    ptrue p1.s, vl32
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1w { z1.s }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.s }, p1/z, [x2, z1.s, sxtw]
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cvals = load <32 x half>, <32 x half>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = sext <32 x i32> %idxs to <32 x i64>
  %byte_ptrs = getelementptr i8, i8* %base, <32 x i64> %ext
  %ptrs = bitcast <32 x i8*> %byte_ptrs to <32 x half*>
  %mask = fcmp oeq <32 x half> %cvals, zeroinitializer
  %vals = call <32 x half> @llvm.masked.gather.v32f16(<32 x half*> %ptrs, i32 8, <32 x i1> %mask, <32 x half> undef)
  store <32 x half> %vals, <32 x half>* %a
  ret void
}

define void @masked_gather_32b_unscaled_zext(<32 x half>* %a, <32 x i32>* %b, i8* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_32b_unscaled_zext:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #16
; VBITS_GE_256-NEXT:    ptrue p0.h, vl16
; VBITS_GE_256-NEXT:    mov x10, #24
; VBITS_GE_256-NEXT:    ptrue p1.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    ld1h { z0.h }, p0/z, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    ld1h { z1.h }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p1/z, [x1, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p1/z, [x1, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p1/z, [x1, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p1/z, [x1]
; VBITS_GE_256-NEXT:    fcmeq p2.h, p0/z, z0.h, #0.0
; VBITS_GE_256-NEXT:    fcmeq p3.h, p0/z, z1.h, #0.0
; VBITS_GE_256-NEXT:    mov z0.h, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    ext z0.b, z0.b, z0.b, #16
; VBITS_GE_256-NEXT:    mov z1.h, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z0.s, z0.h
; VBITS_GE_256-NEXT:    ld1h { z4.s }, p2/z, [x2, z4.s, uxtw]
; VBITS_GE_256-NEXT:    cmpne p2.s, p1/z, z0.s, #0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    ld1h { z0.s }, p2/z, [x2, z3.s, uxtw]
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.s, z1.h
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.s, p1/z, z1.s, #0
; VBITS_GE_256-NEXT:    ld1h { z1.s }, p2/z, [x2, z5.s, uxtw]
; VBITS_GE_256-NEXT:    ld1h { z2.s }, p1/z, [x2, z2.s, uxtw]
; VBITS_GE_256-NEXT:    uzp1 z3.h, z4.h, z4.h
; VBITS_GE_256-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_256-NEXT:    ptrue p1.h, vl8
; VBITS_GE_256-NEXT:    splice z3.h, p1, z3.h, z0.h
; VBITS_GE_256-NEXT:    uzp1 z1.h, z1.h, z1.h
; VBITS_GE_256-NEXT:    uzp1 z2.h, z2.h, z2.h
; VBITS_GE_256-NEXT:    splice z1.h, p1, z1.h, z2.h
; VBITS_GE_256-NEXT:    st1h { z3.h }, p0, [x0, x8, lsl #1]
; VBITS_GE_256-NEXT:    st1h { z1.h }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_1024-LABEL: masked_gather_32b_unscaled_zext:
; VBITS_GE_1024:       // %bb.0:
; VBITS_GE_1024-NEXT:    ptrue p0.h, vl32
; VBITS_GE_1024-NEXT:    ptrue p1.s, vl32
; VBITS_GE_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; VBITS_GE_1024-NEXT:    ld1w { z1.s }, p1/z, [x1]
; VBITS_GE_1024-NEXT:    fcmeq p1.h, p0/z, z0.h, #0.0
; VBITS_GE_1024-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_1024-NEXT:    ld1h { z0.s }, p1/z, [x2, z1.s, uxtw]
; VBITS_GE_1024-NEXT:    uzp1 z0.h, z0.h, z0.h
; VBITS_GE_1024-NEXT:    st1h { z0.h }, p0, [x0]
; VBITS_GE_1024-NEXT:    ret
  %cvals = load <32 x half>, <32 x half>* %a
  %idxs = load <32 x i32>, <32 x i32>* %b
  %ext = zext <32 x i32> %idxs to <32 x i64>
  %byte_ptrs = getelementptr i8, i8* %base, <32 x i64> %ext
  %ptrs = bitcast <32 x i8*> %byte_ptrs to <32 x half*>
  %mask = fcmp oeq <32 x half> %cvals, zeroinitializer
  %vals = call <32 x half> @llvm.masked.gather.v32f16(<32 x half*> %ptrs, i32 8, <32 x i1> %mask, <32 x half> undef)
  store <32 x half> %vals, <32 x half>* %a
  ret void
}

define void @masked_gather_64b_scaled(<32 x float>* %a, <32 x i64>* %b, float* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_64b_scaled:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [x2, z18.d, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [x2, z17.d, lsl #2]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [x2, z16.d, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [x2, z6.d, lsl #2]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [x2, z7.d, lsl #2]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [x2, z5.d, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [x2, z0.d, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [x2, z4.d, lsl #2]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_64b_scaled:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [x2, z1.d, lsl #2]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %idxs = load <32 x i64>, <32 x i64>* %b
  %ptrs = getelementptr float, float* %base, <32 x i64> %idxs
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_64b_unscaled(<32 x float>* %a, <32 x i64>* %b, i8* %base) #0 {
; VBITS_GE_256-LABEL: masked_gather_64b_unscaled:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [x2, z18.d]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [x2, z17.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [x2, z16.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [x2, z6.d]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [x2, z7.d]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [x2, z5.d]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [x2, z0.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [x2, z4.d]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_64b_unscaled:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [x2, z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %idxs = load <32 x i64>, <32 x i64>* %b
  %byte_ptrs = getelementptr i8, i8* %base, <32 x i64> %idxs
  %ptrs = bitcast <32 x i8*> %byte_ptrs to <32 x float*>
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_vec_plus_reg(<32 x float>* %a, <32 x i8*>* %b, i64 %off) #0 {
; VBITS_GE_256-LABEL: masked_gather_vec_plus_reg:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [x2, z18.d]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [x2, z17.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [x2, z16.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [x2, z6.d]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [x2, z7.d]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [x2, z5.d]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [x2, z0.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [x2, z4.d]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_vec_plus_reg:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [x2, z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %bases = load <32 x i8*>, <32 x i8*>* %b
  %byte_ptrs = getelementptr i8, <32 x i8*> %bases, i64 %off
  %ptrs = bitcast <32 x i8*> %byte_ptrs to <32 x float*>
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_vec_plus_imm(<32 x float>* %a, <32 x i8*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_vec_plus_imm:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z18.d, #4]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [z17.d, #4]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [z16.d, #4]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [z6.d, #4]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [z7.d, #4]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [z5.d, #4]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [z0.d, #4]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [z4.d, #4]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_vec_plus_imm:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [z1.d, #4]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %bases = load <32 x i8*>, <32 x i8*>* %b
  %byte_ptrs = getelementptr i8, <32 x i8*> %bases, i64 4
  %ptrs = bitcast <32 x i8*> %byte_ptrs to <32 x float*>
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> undef)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_passthru(<32 x float>* %a, <32 x float*>* %b, <32 x float>* %c) #0 {
; VBITS_GE_256-LABEL: masked_gather_passthru:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z4.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    ld1w { z17.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z20.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z7.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z23.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z4.s, #0.0
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    punpklo p3.h, p2.b
; VBITS_GE_256-NEXT:    ld1d { z2.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    ld1d { z19.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z21.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z22.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z3.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x2, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z5.s }, p0/z, [x2, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z16.s }, p0/z, [x2, x8, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z6.s }, p0/z, [x2]
; VBITS_GE_256-NEXT:    ld1w { z4.d }, p3/z, [z23.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z17.s, #0.0
; VBITS_GE_256-NEXT:    mov z17.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    uzp1 z4.s, z4.s, z4.s
; VBITS_GE_256-NEXT:    bif v4.16b, v16.16b, v17.16b
; VBITS_GE_256-NEXT:    ext z17.b, z17.b, z17.b, #16
; VBITS_GE_256-NEXT:    sunpklo z23.d, z17.s
; VBITS_GE_256-NEXT:    ext z16.b, z16.b, z16.b, #16
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z23.d, #0
; VBITS_GE_256-NEXT:    ld1w { z22.d }, p4/z, [z22.d]
; VBITS_GE_256-NEXT:    ld1w { z21.d }, p2/z, [z21.d]
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z20.s, #0.0
; VBITS_GE_256-NEXT:    mov z20.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p2.b
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    uzp1 z21.s, z21.s, z21.s
; VBITS_GE_256-NEXT:    uzp1 z22.s, z22.s, z22.s
; VBITS_GE_256-NEXT:    bif v21.16b, v5.16b, v20.16b
; VBITS_GE_256-NEXT:    ext z20.b, z20.b, z20.b, #16
; VBITS_GE_256-NEXT:    sunpklo z23.d, z20.s
; VBITS_GE_256-NEXT:    ext z5.b, z5.b, z5.b, #16
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z23.d, #0
; VBITS_GE_256-NEXT:    ld1w { z19.d }, p4/z, [z19.d]
; VBITS_GE_256-NEXT:    ld1w { z18.d }, p3/z, [z18.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z7.s, #0.0
; VBITS_GE_256-NEXT:    mov z7.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p2.h, p3.b
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    uzp1 z18.s, z18.s, z18.s
; VBITS_GE_256-NEXT:    bif v18.16b, v1.16b, v7.16b
; VBITS_GE_256-NEXT:    ext z7.b, z7.b, z7.b, #16
; VBITS_GE_256-NEXT:    sunpklo z23.d, z7.s
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z23.d, #0
; VBITS_GE_256-NEXT:    mov z23.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p4/z, [z2.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p2/z, [z3.d]
; VBITS_GE_256-NEXT:    bit v16.16b, v22.16b, v17.16b
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    bif v3.16b, v6.16b, v23.16b
; VBITS_GE_256-NEXT:    ext z23.b, z23.b, z23.b, #16
; VBITS_GE_256-NEXT:    sunpklo z17.d, z23.s
; VBITS_GE_256-NEXT:    ext z6.b, z6.b, z6.b, #16
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z17.d, #0
; VBITS_GE_256-NEXT:    uzp1 z17.s, z19.s, z19.s
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p1/z, [z0.d]
; VBITS_GE_256-NEXT:    ptrue p1.s, vl4
; VBITS_GE_256-NEXT:    bit v5.16b, v17.16b, v20.16b
; VBITS_GE_256-NEXT:    splice z4.s, p1, z4.s, z16.s
; VBITS_GE_256-NEXT:    bit v1.16b, v2.16b, v7.16b
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    bif v0.16b, v6.16b, v23.16b
; VBITS_GE_256-NEXT:    splice z21.s, p1, z21.s, z5.s
; VBITS_GE_256-NEXT:    splice z18.s, p1, z18.s, z1.s
; VBITS_GE_256-NEXT:    st1w { z21.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z18.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    splice z3.s, p1, z3.s, z0.s
; VBITS_GE_256-NEXT:    st1w { z3.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_passthru:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x2]
; VBITS_GE_2048-NEXT:    punpklo p2.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z1.d }, p2/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_2048-NEXT:    mov z0.s, p1/m, z1.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %ptrs = load <32 x float*>, <32 x float*>* %b
  %passthru = load <32 x float>, <32 x float>* %c
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> %passthru)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

define void @masked_gather_passthru_0(<32 x float>* %a, <32 x float*>* %b) #0 {
; VBITS_GE_256-LABEL: masked_gather_passthru_0:
; VBITS_GE_256:       // %bb.0:
; VBITS_GE_256-NEXT:    mov x8, #24
; VBITS_GE_256-NEXT:    ptrue p0.s, vl8
; VBITS_GE_256-NEXT:    mov x10, #16
; VBITS_GE_256-NEXT:    mov x9, #8
; VBITS_GE_256-NEXT:    mov x14, #28
; VBITS_GE_256-NEXT:    ptrue p1.d, vl4
; VBITS_GE_256-NEXT:    ld1w { z0.s }, p0/z, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    mov x11, #4
; VBITS_GE_256-NEXT:    ld1w { z2.s }, p0/z, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z1.s }, p0/z, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    ld1w { z3.s }, p0/z, [x0]
; VBITS_GE_256-NEXT:    ld1d { z17.d }, p1/z, [x1, x14, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z18.d }, p1/z, [x1, x8, lsl #3]
; VBITS_GE_256-NEXT:    mov x12, #20
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z0.s, #0.0
; VBITS_GE_256-NEXT:    mov x13, #12
; VBITS_GE_256-NEXT:    mov z19.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p4.s, p0/z, z2.s, #0.0
; VBITS_GE_256-NEXT:    ext z19.b, z19.b, z19.b, #16
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z2.d, z19.s
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p3.d, p1/z, z2.d, #0
; VBITS_GE_256-NEXT:    ld1d { z4.d }, p1/z, [x1, x11, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z5.d }, p1/z, [x1, x12, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z6.d }, p1/z, [x1, x13, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z7.d }, p1/z, [x1, x10, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z16.d }, p1/z, [x1, x9, lsl #3]
; VBITS_GE_256-NEXT:    ld1d { z0.d }, p1/z, [x1]
; VBITS_GE_256-NEXT:    ld1w { z2.d }, p2/z, [z18.d]
; VBITS_GE_256-NEXT:    ld1w { z17.d }, p3/z, [z17.d]
; VBITS_GE_256-NEXT:    fcmeq p3.s, p0/z, z1.s, #0.0
; VBITS_GE_256-NEXT:    mov z1.s, p3/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    fcmeq p2.s, p0/z, z3.s, #0.0
; VBITS_GE_256-NEXT:    ext z1.b, z1.b, z1.b, #16
; VBITS_GE_256-NEXT:    mov z18.s, p4/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    mov z3.s, p2/z, #-1 // =0xffffffffffffffff
; VBITS_GE_256-NEXT:    punpklo p3.h, p3.b
; VBITS_GE_256-NEXT:    sunpklo z1.d, z1.s
; VBITS_GE_256-NEXT:    and p3.b, p3/z, p3.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p5.d, p1/z, z1.d, #0
; VBITS_GE_256-NEXT:    punpklo p4.h, p4.b
; VBITS_GE_256-NEXT:    ext z18.b, z18.b, z18.b, #16
; VBITS_GE_256-NEXT:    ext z3.b, z3.b, z3.b, #16
; VBITS_GE_256-NEXT:    ld1w { z16.d }, p3/z, [z16.d]
; VBITS_GE_256-NEXT:    ld1w { z1.d }, p5/z, [z6.d]
; VBITS_GE_256-NEXT:    and p4.b, p4/z, p4.b, p1.b
; VBITS_GE_256-NEXT:    sunpklo z6.d, z18.s
; VBITS_GE_256-NEXT:    punpklo p2.h, p2.b
; VBITS_GE_256-NEXT:    sunpklo z3.d, z3.s
; VBITS_GE_256-NEXT:    ld1w { z7.d }, p4/z, [z7.d]
; VBITS_GE_256-NEXT:    cmpne p4.d, p1/z, z6.d, #0
; VBITS_GE_256-NEXT:    and p2.b, p2/z, p2.b, p1.b
; VBITS_GE_256-NEXT:    cmpne p1.d, p1/z, z3.d, #0
; VBITS_GE_256-NEXT:    ld1w { z5.d }, p4/z, [z5.d]
; VBITS_GE_256-NEXT:    ld1w { z0.d }, p2/z, [z0.d]
; VBITS_GE_256-NEXT:    ld1w { z3.d }, p1/z, [z4.d]
; VBITS_GE_256-NEXT:    ptrue p3.s, vl4
; VBITS_GE_256-NEXT:    uzp1 z4.s, z16.s, z16.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z1.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z2.s, z2.s, z2.s
; VBITS_GE_256-NEXT:    uzp1 z17.s, z17.s, z17.s
; VBITS_GE_256-NEXT:    splice z4.s, p3, z4.s, z1.s
; VBITS_GE_256-NEXT:    uzp1 z1.s, z7.s, z7.s
; VBITS_GE_256-NEXT:    uzp1 z5.s, z5.s, z5.s
; VBITS_GE_256-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_256-NEXT:    uzp1 z3.s, z3.s, z3.s
; VBITS_GE_256-NEXT:    splice z2.s, p3, z2.s, z17.s
; VBITS_GE_256-NEXT:    splice z1.s, p3, z1.s, z5.s
; VBITS_GE_256-NEXT:    splice z0.s, p3, z0.s, z3.s
; VBITS_GE_256-NEXT:    st1w { z1.s }, p0, [x0, x10, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z4.s }, p0, [x0, x9, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z2.s }, p0, [x0, x8, lsl #2]
; VBITS_GE_256-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_256-NEXT:    ret
;
; VBITS_GE_2048-LABEL: masked_gather_passthru_0:
; VBITS_GE_2048:       // %bb.0:
; VBITS_GE_2048-NEXT:    ptrue p0.s, vl32
; VBITS_GE_2048-NEXT:    ptrue p1.d, vl32
; VBITS_GE_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; VBITS_GE_2048-NEXT:    ld1d { z1.d }, p1/z, [x1]
; VBITS_GE_2048-NEXT:    fcmeq p1.s, p0/z, z0.s, #0.0
; VBITS_GE_2048-NEXT:    punpklo p1.h, p1.b
; VBITS_GE_2048-NEXT:    ld1w { z0.d }, p1/z, [z1.d]
; VBITS_GE_2048-NEXT:    uzp1 z0.s, z0.s, z0.s
; VBITS_GE_2048-NEXT:    st1w { z0.s }, p0, [x0]
; VBITS_GE_2048-NEXT:    ret
  %cvals = load <32 x float>, <32 x float>* %a
  %ptrs = load <32 x float*>, <32 x float*>* %b
  %mask = fcmp oeq <32 x float> %cvals, zeroinitializer
  %vals = call <32 x float> @llvm.masked.gather.v32f32(<32 x float*> %ptrs, i32 8, <32 x i1> %mask, <32 x float> zeroinitializer)
  store <32 x float> %vals, <32 x float>* %a
  ret void
}

declare <2 x i8> @llvm.masked.gather.v2i8(<2 x i8*>, i32, <2 x i1>, <2 x i8>)
declare <4 x i8> @llvm.masked.gather.v4i8(<4 x i8*>, i32, <4 x i1>, <4 x i8>)
declare <8 x i8> @llvm.masked.gather.v8i8(<8 x i8*>, i32, <8 x i1>, <8 x i8>)
declare <16 x i8> @llvm.masked.gather.v16i8(<16 x i8*>, i32, <16 x i1>, <16 x i8>)
declare <32 x i8> @llvm.masked.gather.v32i8(<32 x i8*>, i32, <32 x i1>, <32 x i8>)

declare <2 x i16> @llvm.masked.gather.v2i16(<2 x i16*>, i32, <2 x i1>, <2 x i16>)
declare <4 x i16> @llvm.masked.gather.v4i16(<4 x i16*>, i32, <4 x i1>, <4 x i16>)
declare <8 x i16> @llvm.masked.gather.v8i16(<8 x i16*>, i32, <8 x i1>, <8 x i16>)
declare <16 x i16> @llvm.masked.gather.v16i16(<16 x i16*>, i32, <16 x i1>, <16 x i16>)
declare <32 x i16> @llvm.masked.gather.v32i16(<32 x i16*>, i32, <32 x i1>, <32 x i16>)

declare <2 x i32> @llvm.masked.gather.v2i32(<2 x i32*>, i32, <2 x i1>, <2 x i32>)
declare <4 x i32> @llvm.masked.gather.v4i32(<4 x i32*>, i32, <4 x i1>, <4 x i32>)
declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32>)
declare <16 x i32> @llvm.masked.gather.v16i32(<16 x i32*>, i32, <16 x i1>, <16 x i32>)
declare <32 x i32> @llvm.masked.gather.v32i32(<32 x i32*>, i32, <32 x i1>, <32 x i32>)

declare <1 x i64> @llvm.masked.gather.v1i64(<1 x i64*>, i32, <1 x i1>, <1 x i64>)
declare <2 x i64> @llvm.masked.gather.v2i64(<2 x i64*>, i32, <2 x i1>, <2 x i64>)
declare <4 x i64> @llvm.masked.gather.v4i64(<4 x i64*>, i32, <4 x i1>, <4 x i64>)
declare <8 x i64> @llvm.masked.gather.v8i64(<8 x i64*>, i32, <8 x i1>, <8 x i64>)
declare <16 x i64> @llvm.masked.gather.v16i64(<16 x i64*>, i32, <16 x i1>, <16 x i64>)
declare <32 x i64> @llvm.masked.gather.v32i64(<32 x i64*>, i32, <32 x i1>, <32 x i64>)

declare <2 x half> @llvm.masked.gather.v2f16(<2 x half*>, i32, <2 x i1>, <2 x half>)
declare <4 x half> @llvm.masked.gather.v4f16(<4 x half*>, i32, <4 x i1>, <4 x half>)
declare <8 x half> @llvm.masked.gather.v8f16(<8 x half*>, i32, <8 x i1>, <8 x half>)
declare <16 x half> @llvm.masked.gather.v16f16(<16 x half*>, i32, <16 x i1>, <16 x half>)
declare <32 x half> @llvm.masked.gather.v32f16(<32 x half*>, i32, <32 x i1>, <32 x half>)

declare <2 x float> @llvm.masked.gather.v2f32(<2 x float*>, i32, <2 x i1>, <2 x float>)
declare <4 x float> @llvm.masked.gather.v4f32(<4 x float*>, i32, <4 x i1>, <4 x float>)
declare <8 x float> @llvm.masked.gather.v8f32(<8 x float*>, i32, <8 x i1>, <8 x float>)
declare <16 x float> @llvm.masked.gather.v16f32(<16 x float*>, i32, <16 x i1>, <16 x float>)
declare <32 x float> @llvm.masked.gather.v32f32(<32 x float*>, i32, <32 x i1>, <32 x float>)

declare <1 x double> @llvm.masked.gather.v1f64(<1 x double*>, i32, <1 x i1>, <1 x double>)
declare <2 x double> @llvm.masked.gather.v2f64(<2 x double*>, i32, <2 x i1>, <2 x double>)
declare <4 x double> @llvm.masked.gather.v4f64(<4 x double*>, i32, <4 x i1>, <4 x double>)
declare <8 x double> @llvm.masked.gather.v8f64(<8 x double*>, i32, <8 x i1>, <8 x double>)
declare <16 x double> @llvm.masked.gather.v16f64(<16 x double*>, i32, <16 x i1>, <16 x double>)
declare <32 x double> @llvm.masked.gather.v32f64(<32 x double*>, i32, <32 x i1>, <32 x double>)

attributes #0 = { "target-features"="+sve" }
