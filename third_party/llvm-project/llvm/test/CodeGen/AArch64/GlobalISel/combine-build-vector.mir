# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - -march=aarch64 -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs %s | FileCheck %s
---
name:            full_extracts_from_build_vector
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
  - { reg: '$x1' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: full_extracts_from_build_vector
    ; CHECK: liveins: $x0, $x1
    ; CHECK: %arg1:_(s64) = COPY $x0
    ; CHECK: %arg2:_(s64) = COPY $x1
    ; CHECK: $x0 = COPY %arg1(s64)
    ; CHECK: $x1 = COPY %arg2(s64)
    ; CHECK: RET_ReallyLR implicit $x0
    %arg1:_(s64) = COPY $x0
    %arg2:_(s64) = COPY $x1
    %zero:_(s32) = G_CONSTANT i32 0
    %one:_(s32) = G_CONSTANT i32 1
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %one(s32)
    $x0 = COPY %extract(s64)
    $x1 = COPY %extract2(s64)
    RET_ReallyLR implicit $x0

...
---
name:            full_extracts_from_build_vector_other_use
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
  - { reg: '$x1' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: full_extracts_from_build_vector_other_use
    ; CHECK: liveins: $x0, $x1
    ; CHECK: %arg1:_(s64) = COPY $x0
    ; CHECK: %arg2:_(s64) = COPY $x1
    ; CHECK: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK: %one:_(s32) = G_CONSTANT i32 1
    ; CHECK: %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    ; CHECK: %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    ; CHECK: %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %one(s32)
    ; CHECK: $x0 = COPY %extract(s64)
    ; CHECK: $x1 = COPY %extract2(s64)
    ; CHECK: $q0 = COPY %bv(<2 x s64>)
    ; CHECK: RET_ReallyLR implicit $x0
    %arg1:_(s64) = COPY $x0
    %arg2:_(s64) = COPY $x1
    %zero:_(s32) = G_CONSTANT i32 0
    %one:_(s32) = G_CONSTANT i32 1
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %one(s32)
    $x0 = COPY %extract(s64)
    $x1 = COPY %extract2(s64)
    $q0 = COPY %bv(<2 x s64>)
    RET_ReallyLR implicit $x0

...
---
name:            partial_extracts_from_build_vector_multiple_per_elt
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
  - { reg: '$x1' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: partial_extracts_from_build_vector_multiple_per_elt
    ; CHECK: liveins: $x0, $x1
    ; CHECK: %arg1:_(s64) = COPY $x0
    ; CHECK: %arg2:_(s64) = COPY $x1
    ; CHECK: $x0 = COPY %arg1(s64)
    ; CHECK: $x1 = COPY %arg2(s64)
    ; CHECK: $x2 = COPY %arg2(s64)
    ; CHECK: RET_ReallyLR implicit $x0
    %arg1:_(s64) = COPY $x0
    %arg2:_(s64) = COPY $x1
    %zero:_(s32) = G_CONSTANT i32 0
    %one:_(s32) = G_CONSTANT i32 1
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %one(s32)
    %extract3:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %one(s32)
    $x0 = COPY %extract(s64)
    $x1 = COPY %extract2(s64)
    $x2 = COPY %extract3(s64)
    RET_ReallyLR implicit $x0

...
---
name:            full_extracts_from_build_vector_idx_out_of_range
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
  - { reg: '$x1' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: full_extracts_from_build_vector_idx_out_of_range
    ; CHECK: liveins: $x0, $x1
    ; CHECK: %arg1:_(s64) = COPY $x0
    ; CHECK: %arg2:_(s64) = COPY $x1
    ; CHECK: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK: %two:_(s32) = G_CONSTANT i32 2
    ; CHECK: %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    ; CHECK: %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    ; CHECK: %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %two(s32)
    ; CHECK: $x0 = COPY %extract(s64)
    ; CHECK: $x1 = COPY %extract2(s64)
    ; CHECK: RET_ReallyLR implicit $x0
    %arg1:_(s64) = COPY $x0
    %arg2:_(s64) = COPY $x1
    %zero:_(s32) = G_CONSTANT i32 0
    %one:_(s32) = G_CONSTANT i32 1
    %two:_(s32) = G_CONSTANT i32 2
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    %extract:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %zero(s32)
    %extract2:_(s64) = G_EXTRACT_VECTOR_ELT %bv(<2 x s64>), %two(s32)
    $x0 = COPY %extract(s64)
    $x1 = COPY %extract2(s64)
    RET_ReallyLR implicit $x0

...
