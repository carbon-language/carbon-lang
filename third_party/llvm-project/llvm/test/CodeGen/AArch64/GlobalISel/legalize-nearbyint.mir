# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple aarch64-unknown-unknown -run-pass=legalizer -mattr=+fullfp16 -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=FP16
# RUN: llc -mtriple aarch64-unknown-unknown -run-pass=legalizer -mattr=-fullfp16 -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=NO-FP16

...
---
name:            test_v4f16.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $d0

    ; FP16-LABEL: name: test_v4f16.nearbyint
    ; FP16: liveins: $d0
    ; FP16: [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $d0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(<4 x s16>) = G_FNEARBYINT [[COPY]]
    ; FP16: $d0 = COPY [[FNEARBYINT]](<4 x s16>)
    ; FP16: RET_ReallyLR implicit $d0
    ; NO-FP16-LABEL: name: test_v4f16.nearbyint
    ; NO-FP16: liveins: $d0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $d0
    ; NO-FP16: [[UV:%[0-9]+]]:_(s16), [[UV1:%[0-9]+]]:_(s16), [[UV2:%[0-9]+]]:_(s16), [[UV3:%[0-9]+]]:_(s16) = G_UNMERGE_VALUES [[COPY]](<4 x s16>)
    ; NO-FP16: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[UV]](s16)
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT]]
    ; NO-FP16: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT]](s32)
    ; NO-FP16: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[UV1]](s16)
    ; NO-FP16: [[FNEARBYINT1:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT1]]
    ; NO-FP16: [[FPTRUNC1:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT1]](s32)
    ; NO-FP16: [[FPEXT2:%[0-9]+]]:_(s32) = G_FPEXT [[UV2]](s16)
    ; NO-FP16: [[FNEARBYINT2:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT2]]
    ; NO-FP16: [[FPTRUNC2:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT2]](s32)
    ; NO-FP16: [[FPEXT3:%[0-9]+]]:_(s32) = G_FPEXT [[UV3]](s16)
    ; NO-FP16: [[FNEARBYINT3:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT3]]
    ; NO-FP16: [[FPTRUNC3:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT3]](s32)
    ; NO-FP16: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[FPTRUNC]](s16), [[FPTRUNC1]](s16), [[FPTRUNC2]](s16), [[FPTRUNC3]](s16)
    ; NO-FP16: $d0 = COPY [[BUILD_VECTOR]](<4 x s16>)
    ; NO-FP16: RET_ReallyLR implicit $d0
    %0:_(<4 x s16>) = COPY $d0
    %1:_(<4 x s16>) = G_FNEARBYINT %0
    $d0 = COPY %1(<4 x s16>)
    RET_ReallyLR implicit $d0

...
---
name:            test_v8f16.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $q0

    ; FP16-LABEL: name: test_v8f16.nearbyint
    ; FP16: liveins: $q0
    ; FP16: [[COPY:%[0-9]+]]:_(<8 x s16>) = COPY $q0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(<8 x s16>) = G_FNEARBYINT [[COPY]]
    ; FP16: $q0 = COPY [[FNEARBYINT]](<8 x s16>)
    ; FP16: RET_ReallyLR implicit $q0
    ; NO-FP16-LABEL: name: test_v8f16.nearbyint
    ; NO-FP16: liveins: $q0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(<8 x s16>) = COPY $q0
    ; NO-FP16: [[UV:%[0-9]+]]:_(s16), [[UV1:%[0-9]+]]:_(s16), [[UV2:%[0-9]+]]:_(s16), [[UV3:%[0-9]+]]:_(s16), [[UV4:%[0-9]+]]:_(s16), [[UV5:%[0-9]+]]:_(s16), [[UV6:%[0-9]+]]:_(s16), [[UV7:%[0-9]+]]:_(s16) = G_UNMERGE_VALUES [[COPY]](<8 x s16>)
    ; NO-FP16: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[UV]](s16)
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT]]
    ; NO-FP16: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT]](s32)
    ; NO-FP16: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[UV1]](s16)
    ; NO-FP16: [[FNEARBYINT1:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT1]]
    ; NO-FP16: [[FPTRUNC1:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT1]](s32)
    ; NO-FP16: [[FPEXT2:%[0-9]+]]:_(s32) = G_FPEXT [[UV2]](s16)
    ; NO-FP16: [[FNEARBYINT2:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT2]]
    ; NO-FP16: [[FPTRUNC2:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT2]](s32)
    ; NO-FP16: [[FPEXT3:%[0-9]+]]:_(s32) = G_FPEXT [[UV3]](s16)
    ; NO-FP16: [[FNEARBYINT3:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT3]]
    ; NO-FP16: [[FPTRUNC3:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT3]](s32)
    ; NO-FP16: [[FPEXT4:%[0-9]+]]:_(s32) = G_FPEXT [[UV4]](s16)
    ; NO-FP16: [[FNEARBYINT4:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT4]]
    ; NO-FP16: [[FPTRUNC4:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT4]](s32)
    ; NO-FP16: [[FPEXT5:%[0-9]+]]:_(s32) = G_FPEXT [[UV5]](s16)
    ; NO-FP16: [[FNEARBYINT5:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT5]]
    ; NO-FP16: [[FPTRUNC5:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT5]](s32)
    ; NO-FP16: [[FPEXT6:%[0-9]+]]:_(s32) = G_FPEXT [[UV6]](s16)
    ; NO-FP16: [[FNEARBYINT6:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT6]]
    ; NO-FP16: [[FPTRUNC6:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT6]](s32)
    ; NO-FP16: [[FPEXT7:%[0-9]+]]:_(s32) = G_FPEXT [[UV7]](s16)
    ; NO-FP16: [[FNEARBYINT7:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT7]]
    ; NO-FP16: [[FPTRUNC7:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT7]](s32)
    ; NO-FP16: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s16>) = G_BUILD_VECTOR [[FPTRUNC]](s16), [[FPTRUNC1]](s16), [[FPTRUNC2]](s16), [[FPTRUNC3]](s16), [[FPTRUNC4]](s16), [[FPTRUNC5]](s16), [[FPTRUNC6]](s16), [[FPTRUNC7]](s16)
    ; NO-FP16: $q0 = COPY [[BUILD_VECTOR]](<8 x s16>)
    ; NO-FP16: RET_ReallyLR implicit $q0
    %0:_(<8 x s16>) = COPY $q0
    %1:_(<8 x s16>) = G_FNEARBYINT %0
    $q0 = COPY %1(<8 x s16>)
    RET_ReallyLR implicit $q0

...
---
name:            test_v2f32.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $d0

    ; FP16-LABEL: name: test_v2f32.nearbyint
    ; FP16: liveins: $d0
    ; FP16: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $d0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(<2 x s32>) = G_FNEARBYINT [[COPY]]
    ; FP16: $d0 = COPY [[FNEARBYINT]](<2 x s32>)
    ; FP16: RET_ReallyLR implicit $d0
    ; NO-FP16-LABEL: name: test_v2f32.nearbyint
    ; NO-FP16: liveins: $d0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $d0
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(<2 x s32>) = G_FNEARBYINT [[COPY]]
    ; NO-FP16: $d0 = COPY [[FNEARBYINT]](<2 x s32>)
    ; NO-FP16: RET_ReallyLR implicit $d0
    %0:_(<2 x s32>) = COPY $d0
    %1:_(<2 x s32>) = G_FNEARBYINT %0
    $d0 = COPY %1(<2 x s32>)
    RET_ReallyLR implicit $d0

...
---
name:            test_v2f64.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $q0

    ; FP16-LABEL: name: test_v2f64.nearbyint
    ; FP16: liveins: $q0
    ; FP16: [[COPY:%[0-9]+]]:_(<2 x s64>) = COPY $q0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(<2 x s64>) = G_FNEARBYINT [[COPY]]
    ; FP16: $q0 = COPY [[FNEARBYINT]](<2 x s64>)
    ; FP16: RET_ReallyLR implicit $q0
    ; NO-FP16-LABEL: name: test_v2f64.nearbyint
    ; NO-FP16: liveins: $q0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(<2 x s64>) = COPY $q0
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(<2 x s64>) = G_FNEARBYINT [[COPY]]
    ; NO-FP16: $q0 = COPY [[FNEARBYINT]](<2 x s64>)
    ; NO-FP16: RET_ReallyLR implicit $q0
    %0:_(<2 x s64>) = COPY $q0
    %1:_(<2 x s64>) = G_FNEARBYINT %0
    $q0 = COPY %1(<2 x s64>)
    RET_ReallyLR implicit $q0

...
---
name:            test_f32.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $s0

    ; FP16-LABEL: name: test_f32.nearbyint
    ; FP16: liveins: $s0
    ; FP16: [[COPY:%[0-9]+]]:_(s32) = COPY $s0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[COPY]]
    ; FP16: $s0 = COPY [[FNEARBYINT]](s32)
    ; FP16: RET_ReallyLR implicit $s0
    ; NO-FP16-LABEL: name: test_f32.nearbyint
    ; NO-FP16: liveins: $s0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(s32) = COPY $s0
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[COPY]]
    ; NO-FP16: $s0 = COPY [[FNEARBYINT]](s32)
    ; NO-FP16: RET_ReallyLR implicit $s0
    %0:_(s32) = COPY $s0
    %1:_(s32) = G_FNEARBYINT %0
    $s0 = COPY %1(s32)
    RET_ReallyLR implicit $s0

...
---
name:            test_f64.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $d0

    ; FP16-LABEL: name: test_f64.nearbyint
    ; FP16: liveins: $d0
    ; FP16: [[COPY:%[0-9]+]]:_(s64) = COPY $d0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(s64) = G_FNEARBYINT [[COPY]]
    ; FP16: $d0 = COPY [[FNEARBYINT]](s64)
    ; FP16: RET_ReallyLR implicit $d0
    ; NO-FP16-LABEL: name: test_f64.nearbyint
    ; NO-FP16: liveins: $d0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(s64) = COPY $d0
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(s64) = G_FNEARBYINT [[COPY]]
    ; NO-FP16: $d0 = COPY [[FNEARBYINT]](s64)
    ; NO-FP16: RET_ReallyLR implicit $d0
    %0:_(s64) = COPY $d0
    %1:_(s64) = G_FNEARBYINT %0
    $d0 = COPY %1(s64)
    RET_ReallyLR implicit $d0

...
---
name:            test_f16.nearbyint
alignment:       4
tracksRegLiveness: true
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $h0

    ; FP16-LABEL: name: test_f16.nearbyint
    ; FP16: liveins: $h0
    ; FP16: [[COPY:%[0-9]+]]:_(s16) = COPY $h0
    ; FP16: [[FNEARBYINT:%[0-9]+]]:_(s16) = G_FNEARBYINT [[COPY]]
    ; FP16: $h0 = COPY [[FNEARBYINT]](s16)
    ; FP16: RET_ReallyLR implicit $h0
    ; NO-FP16-LABEL: name: test_f16.nearbyint
    ; NO-FP16: liveins: $h0
    ; NO-FP16: [[COPY:%[0-9]+]]:_(s16) = COPY $h0
    ; NO-FP16: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[COPY]](s16)
    ; NO-FP16: [[FNEARBYINT:%[0-9]+]]:_(s32) = G_FNEARBYINT [[FPEXT]]
    ; NO-FP16: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[FNEARBYINT]](s32)
    ; NO-FP16: $h0 = COPY [[FPTRUNC]](s16)
    ; NO-FP16: RET_ReallyLR implicit $h0
    %0:_(s16) = COPY $h0
    %1:_(s16) = G_FNEARBYINT %0
    $h0 = COPY %1(s16)
    RET_ReallyLR implicit $h0

...
