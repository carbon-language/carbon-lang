# RUN: llc -march=hexagon -run-pass hexagon-packetizer %s -o - | FileCheck %s

# Make sure that we don't try to packetize the two stores together. The
# dependence on $r0 could be broken by updating the offset in the storeiri,
# but then the offset would become invalid for that instruction (it has to
# be a multiple of 4).

# CHECK: S4_storeiri_io killed $r0, 0, 0

--- |
  define void @fred() {
    ret void
  }

  @g0 = global i8 zeroinitializer, align 2
  @g1 = global i32 zeroinitializer, align 4
...

---
name: fred
tracksRegLiveness: true
body: |
 bb.0:
  successors: %bb.0, %bb.1
  liveins: $lc0, $r0, $r27
  $r1 = A2_addi $r0, 24
  $r0 = S2_storerb_pi $r0, 2, $r27 :: (store (s8) into @g0, align 2)
  S4_storeiri_io killed $r0, 0, 0 :: (store (s32) into @g1, align 4)
  $r0 = A2_tfr killed $r1
  ENDLOOP0 %bb.0, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0

 bb.1:

...
