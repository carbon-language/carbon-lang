; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mcpu=pwr8 < %s | \
; RUN: FileCheck %s --check-prefix=CHECK-DEFAULT
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix -mcpu=pwr8 \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names < %s | FileCheck %s \
; RUN:   --check-prefix=CHECK-DEFAULT
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix -mcpu=pwr7 \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names < %s | FileCheck %s \
; RUN:   --check-prefix=CHECK-DEFAULT
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-aix -mcpu=pwr7 \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names < %s | FileCheck %s \
; RUN:   --check-prefix=CHECK-DEFAULT
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix -mcpu=pwr6 \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mattr=+vsx < %s | \
; RUN: FileCheck %s --check-prefix=CHECK-DEFAULT

; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mcpu=pwr6 < %s | \
; RUN: FileCheck %s --check-prefix=CHECK-NOVSX
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-aix \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mcpu=pwr6 < %s | \
; RUN: FileCheck %s --check-prefix=CHECK-NOVSX
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mcpu=pwr8 \
; RUN:   -mattr=-vsx < %s | FileCheck %s --check-prefix=CHECK-NOVSX
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-aix \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names -mcpu=pwr8 \
; RUN:   -mattr=-vsx < %s | FileCheck %s --check-prefix=CHECK-NOVSX

declare double @llvm.ppc.fnabs(double)
declare float @llvm.ppc.fnabss(float)

define double @test_fnabs2(double %d) {
; CHECK-DEFAULT-LABEL: test_fnabs2:
; CHECK-DEFAULT:       # %bb.0: # %entry
; CHECK-DEFAULT-NEXT:    xsnabsdp f1, f1
; CHECK-DEFAULT-NEXT:    blr
;
; CHECK-NOVSX-LABEL: test_fnabs2:
; CHECK-NOVSX:       # %bb.0: # %entry
; CHECK-NOVSX-NEXT:    fnabs f1, f1
; CHECK-NOVSX-NEXT:    blr
entry:
  %0 = tail call double @llvm.ppc.fnabs(double %d)
  ret double %0
}

define float @test_fnabss(float %f) {
; CHECK-DEFAULT-LABEL: test_fnabss:
; CHECK-DEFAULT:       # %bb.0: # %entry
; CHECK-DEFAULT-NEXT:    xsnabsdp f1, f1
; CHECK-DEFAULT-NEXT:    blr
;
; CHECK-NOVSX-LABEL: test_fnabss:
; CHECK-NOVSX:       # %bb.0: # %entry
; CHECK-NOVSX-NEXT:    fnabs f1, f1
; CHECK-NOVSX-NEXT:    blr
entry:
  %0 = tail call float @llvm.ppc.fnabss(float %f)
  ret float %0
}

