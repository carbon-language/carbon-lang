; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=mipsel-linux-gnu -global-isel -verify-machineinstrs %s -o -| FileCheck %s -check-prefixes=MIPS32
; RUN: llc -O0 -mtriple=mipsel-linux-gnu -global-isel -mattr=+mips32r2 -verify-machineinstrs %s -o -| FileCheck %s -check-prefixes=MIPS32R2

declare i32 @llvm.bswap.i32(i32)
define i32 @bswap_i32(i32 %x) {
; MIPS32-LABEL: bswap_i32:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    sll $2, $4, 24
; MIPS32-NEXT:    srl $1, $4, 24
; MIPS32-NEXT:    or $1, $1, $2
; MIPS32-NEXT:    andi $2, $4, 65280
; MIPS32-NEXT:    sll $2, $2, 8
; MIPS32-NEXT:    or $1, $1, $2
; MIPS32-NEXT:    srl $2, $4, 8
; MIPS32-NEXT:    andi $2, $2, 65280
; MIPS32-NEXT:    or $2, $1, $2
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
;
; MIPS32R2-LABEL: bswap_i32:
; MIPS32R2:       # %bb.0: # %entry
; MIPS32R2-NEXT:    wsbh $1, $4
; MIPS32R2-NEXT:    rotr $2, $1, 16
; MIPS32R2-NEXT:    jr $ra
; MIPS32R2-NEXT:    nop
entry:
  %0 = tail call i32 @llvm.bswap.i32(i32 %x)
  ret i32 %0
}

declare i64 @llvm.bswap.i64(i64)
define i64 @bswap_i64(i64 %x) {
; MIPS32-LABEL: bswap_i64:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    sll $2, $5, 24
; MIPS32-NEXT:    srl $1, $5, 24
; MIPS32-NEXT:    or $1, $1, $2
; MIPS32-NEXT:    andi $2, $5, 65280
; MIPS32-NEXT:    sll $2, $2, 8
; MIPS32-NEXT:    or $1, $1, $2
; MIPS32-NEXT:    srl $2, $5, 8
; MIPS32-NEXT:    andi $2, $2, 65280
; MIPS32-NEXT:    or $2, $1, $2
; MIPS32-NEXT:    sll $3, $4, 24
; MIPS32-NEXT:    srl $1, $4, 24
; MIPS32-NEXT:    or $1, $1, $3
; MIPS32-NEXT:    andi $3, $4, 65280
; MIPS32-NEXT:    sll $3, $3, 8
; MIPS32-NEXT:    or $1, $1, $3
; MIPS32-NEXT:    srl $3, $4, 8
; MIPS32-NEXT:    andi $3, $3, 65280
; MIPS32-NEXT:    or $3, $1, $3
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
;
; MIPS32R2-LABEL: bswap_i64:
; MIPS32R2:       # %bb.0: # %entry
; MIPS32R2-NEXT:    wsbh $1, $5
; MIPS32R2-NEXT:    rotr $2, $1, 16
; MIPS32R2-NEXT:    wsbh $1, $4
; MIPS32R2-NEXT:    rotr $3, $1, 16
; MIPS32R2-NEXT:    jr $ra
; MIPS32R2-NEXT:    nop
entry:
  %0 = tail call i64 @llvm.bswap.i64(i64 %x)
  ret i64 %0
}
