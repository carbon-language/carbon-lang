; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=x86_64-linux < %s | FileCheck %s

declare dso_local i8* @foo()

define dereferenceable(8) i8* @test1() nounwind {
; CHECK-LABEL: test1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call i8* @foo()
  ret i8* %ret
}

define i8* @test2() nounwind {
; CHECK-LABEL: test2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call dereferenceable(8)  i8* @foo()
  ret i8* %ret
}

define dereferenceable_or_null(8) i8* @test3() nounwind {
; CHECK-LABEL: test3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call i8* @foo()
  ret i8* %ret
}

define i8* @test4() nounwind {
; CHECK-LABEL: test4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call dereferenceable_or_null(8) i8* @foo()
  ret i8* %ret
}

define align 8 i8* @test5() nounwind {
; CHECK-LABEL: test5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call i8* @foo()
  ret i8* %ret
}

define i8* @test6() nounwind {
; CHECK-LABEL: test6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call align 8 i8* @foo()
  ret i8* %ret
}


define noundef i8* @test7() nounwind {
; CHECK-LABEL: test7:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call i8* @foo()
  ret i8* %ret
}

define i8* @test8() nounwind {
; CHECK-LABEL: test8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp foo # TAILCALL
  %ret = tail call noundef i8* @foo()
  ret i8* %ret
}
