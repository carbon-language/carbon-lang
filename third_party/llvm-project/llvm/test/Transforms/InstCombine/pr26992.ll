; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=instcombine -S < %s | FileCheck %s
target triple = "x86_64-pc-windows-msvc"

define i1 @test1(i8* %p) personality i32 (...)* @__CxxFrameHandler3 {
; CHECK-LABEL: @test1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A:%.*]] = getelementptr i8, i8* [[P:%.*]], i64 1
; CHECK-NEXT:    invoke void @may_throw()
; CHECK-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[CATCH_DISPATCH:%.*]]
; CHECK:       invoke.cont:
; CHECK-NEXT:    [[B:%.*]] = getelementptr i8, i8* [[P]], i64 2
; CHECK-NEXT:    invoke void @may_throw()
; CHECK-NEXT:    to label [[EXIT:%.*]] unwind label [[CATCH_DISPATCH]]
; CHECK:       catch.dispatch:
; CHECK-NEXT:    [[C:%.*]] = phi i8* [ [[B]], [[INVOKE_CONT]] ], [ [[A]], [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = catchswitch within none [label %catch] unwind to caller
; CHECK:       catch:
; CHECK-NEXT:    [[TMP2:%.*]] = catchpad within [[TMP1]] [i8* null, i32 64, i8* null]
; CHECK-NEXT:    catchret from [[TMP2]] to label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    [[D:%.*]] = phi i8* [ [[A]], [[INVOKE_CONT]] ], [ [[C]], [[CATCH:%.*]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8* [[D]], [[A]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %a = getelementptr i8, i8* %p, i64 1
  invoke void @may_throw()
  to label %invoke.cont unwind label %catch.dispatch

invoke.cont:
  %b = getelementptr inbounds i8, i8* %a, i64 1
  invoke void @may_throw()
  to label %exit unwind label %catch.dispatch

catch.dispatch:
  %c = phi i8* [ %b, %invoke.cont ], [ %a, %entry ]
  %tmp1 = catchswitch within none [label %catch] unwind to caller

catch:
  %tmp2 = catchpad within %tmp1 [i8* null, i32 64, i8* null]
  catchret from %tmp2 to label %exit

exit:
  %d = phi i8* [ %a, %invoke.cont ], [ %c, %catch ]
  %cmp = icmp eq i8* %d, %a
  ret i1 %cmp
}

declare void @may_throw()

declare i32 @__CxxFrameHandler3(...)
