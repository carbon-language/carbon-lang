; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -codegenprepare < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i1 @PR41004(i32 %x, i32 %y, i32 %t1) {
; CHECK-LABEL: @PR41004(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[MUL_FR:%.*]] = freeze i32 [[Y:%.*]]
; CHECK-NEXT:    [[T0:%.*]] = icmp eq i32 [[MUL_FR]], 1
; CHECK-NEXT:    br i1 [[T0]], label [[SELECT_TRUE_SINK:%.*]], label [[SELECT_END:%.*]]
; CHECK:       select.true.sink:
; CHECK-NEXT:    [[REM:%.*]] = srem i32 [[X:%.*]], 2
; CHECK-NEXT:    br label [[SELECT_END]]
; CHECK:       select.end:
; CHECK-NEXT:    [[MUL:%.*]] = phi i32 [ [[REM]], [[SELECT_TRUE_SINK]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[USUB:%.*]] = call { i32, i1 } @llvm.usub.with.overflow.i32(i32 [[T1:%.*]], i32 1)
; CHECK-NEXT:    [[NEG:%.*]] = extractvalue { i32, i1 } [[USUB]], 0
; CHECK-NEXT:    [[TOBOOL:%.*]] = extractvalue { i32, i1 } [[USUB]], 1
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[NEG]], [[MUL]]
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
entry:
  %rem = srem i32 %x, 2
  %t0 = icmp eq i32 %y, 1
  %mul = select i1 %t0, i32 %rem, i32 0
  %neg = add i32 %t1, -1
  %add = add i32 %neg, %mul
  br label %if

if:
  %tobool = icmp eq i32 %t1, 0
  ret i1 %tobool
}
