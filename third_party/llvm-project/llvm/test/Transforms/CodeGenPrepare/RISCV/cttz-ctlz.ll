; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -codegenprepare < %s | FileCheck %s

target triple = "riscv64-unknown-unknown"

; Check that despeculating count-zeros intrinsics doesn't crash when those
; intrinsics use scalable types.

define <vscale x 4 x i64> @cttz_nxv4i64(<vscale x 4 x i64> %x) {
; CHECK-LABEL: @cttz_nxv4i64(
; CHECK-NEXT:    [[Z:%.*]] = call <vscale x 4 x i64> @llvm.cttz.nxv4i64(<vscale x 4 x i64> [[X:%.*]], i1 false)
; CHECK-NEXT:    ret <vscale x 4 x i64> [[Z]]
;
  %z = call <vscale x 4 x i64> @llvm.cttz.nxv4i64(<vscale x 4 x i64> %x, i1 false)
  ret <vscale x 4 x i64> %z
}

define <vscale x 4 x i64> @ctlz_nxv4i64(<vscale x 4 x i64> %x) {
; CHECK-LABEL: @ctlz_nxv4i64(
; CHECK-NEXT:    [[Z:%.*]] = call <vscale x 4 x i64> @llvm.ctlz.nxv4i64(<vscale x 4 x i64> [[X:%.*]], i1 false)
; CHECK-NEXT:    ret <vscale x 4 x i64> [[Z]]
;
  %z = call <vscale x 4 x i64> @llvm.ctlz.nxv4i64(<vscale x 4 x i64> %x, i1 false)
  ret <vscale x 4 x i64> %z
}

declare <vscale x 4 x i64> @llvm.cttz.nxv4i64(<vscale x 4 x i64>, i1)
declare <vscale x 4 x i64> @llvm.ctlz.nxv4i64(<vscale x 4 x i64>, i1)
