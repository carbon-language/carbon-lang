; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=sccp -S | FileCheck %s
; PR1938

define i32 @main() {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[BB:%.*]]
; CHECK:       bb:
; CHECK-NEXT:    [[INDVAR:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[K:%.*]], [[BB_BACKEDGE:%.*]] ]
; CHECK-NEXT:    [[K]] = add i32 [[INDVAR]], 1
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond_true:
; CHECK-NEXT:    br i1 undef, label [[BB_BACKEDGE]], label [[BB12:%.*]]
; CHECK:       bb.backedge:
; CHECK-NEXT:    br label [[BB]]
; CHECK:       cond_false:
; CHECK-NEXT:    [[TMP9:%.*]] = icmp slt i32 [[K]], 10
; CHECK-NEXT:    br i1 [[TMP9]], label [[BB_BACKEDGE]], label [[BB12]]
; CHECK:       bb12:
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[K]], 10
; CHECK-NEXT:    br i1 [[TMP14]], label [[COND_NEXT18:%.*]], label [[COND_TRUE17:%.*]]
; CHECK:       cond_true17:
; CHECK-NEXT:    tail call void @abort()
; CHECK-NEXT:    unreachable
; CHECK:       cond_next18:
; CHECK-NEXT:    ret i32 0
;
entry:
  br label %bb

bb:
  %indvar = phi i32 [ 0, %entry ], [ %k, %bb.backedge ]
  %k = add i32 %indvar, 1
  br i1 undef, label %cond_true, label %cond_false

cond_true:
  %tmp97 = icmp slt i32 %k, 10
  br i1 %tmp97, label %bb.backedge, label %bb12

bb.backedge:
  br label %bb

cond_false:
  %tmp9 = icmp slt i32 %k, 10
  br i1 %tmp9, label %bb.backedge, label %bb12

bb12:
  %tmp14 = icmp eq i32 %k, 10
  br i1 %tmp14, label %cond_next18, label %cond_true17

cond_true17:
  tail call void @abort( )
  unreachable

cond_next18:
  ret i32 0
}

declare void @abort()
