; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt -S -verify -iroutliner -ir-outlining-no-cost < %s | FileCheck %s

; Show that we are able to outline the simple phi node case of constants when
; the corresponding labels match.

define void @function1(i32* %a, i32* %b) {
entry:
  br label %test
test:
  br label %first
first:
  %0 = phi i32 [ 0, %test ]
  store i32 2, i32* %a, align 4
  store i32 3, i32* %b, align 4
  ret void
}

define void @function2(i32* %a, i32* %b) {
entry:
  br label %test
test:
  br label %first
first:
  %0 = phi i32 [ 0, %test ]
  store i32 2, i32* %a, align 4
  store i32 3, i32* %b, align 4
  ret void
}
; CHECK-LABEL: @function1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_0(i32* [[A:%.*]], i32* [[B:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @function2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_0(i32* [[A:%.*]], i32* [[B:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK: define internal void @outlined_ir_func_0(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[ENTRY_TO_OUTLINE:%.*]]
; CHECK:       entry_to_outline:
; CHECK-NEXT:    br label [[TEST:%.*]]
; CHECK:       test:
; CHECK-NEXT:    br label [[FIRST:%.*]]
; CHECK:       first:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i32 [ 0, [[TEST]] ]
; CHECK-NEXT:    store i32 2, i32* [[TMP0:%.*]], align 4
; CHECK-NEXT:    store i32 3, i32* [[TMP1:%.*]], align 4
; CHECK-NEXT:    br label [[ENTRY_AFTER_OUTLINE_EXITSTUB:%.*]]
; CHECK:       entry_after_outline.exitStub:
; CHECK-NEXT:    ret void
;
