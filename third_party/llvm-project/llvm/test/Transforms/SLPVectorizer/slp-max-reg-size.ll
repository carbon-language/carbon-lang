; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -slp-max-vf=8 -slp-min-reg-size=32 -slp-max-reg-size=160 -S | FileCheck  -check-prefix CHECK-VF8-160 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=4 -slp-min-reg-size=32 -slp-max-reg-size=160 -S | FileCheck  -check-prefix CHECK-VF4-160 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=2 -slp-min-reg-size=32 -slp-max-reg-size=160 -S | FileCheck  -check-prefix CHECK-VF2-160 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=8 -slp-min-reg-size=32 -slp-max-reg-size=128 -S | FileCheck -check-prefix CHECK-VF8-128 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=4 -slp-min-reg-size=32 -slp-max-reg-size=128 -S | FileCheck -check-prefix CHECK-VF4-128 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=2 -slp-min-reg-size=32 -slp-max-reg-size=128 -S | FileCheck -check-prefix CHECK-VF2-128 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=8 -slp-min-reg-size=32 -slp-max-reg-size=256 -S | FileCheck -check-prefix CHECK-VF8-256 %s
; RUN: opt < %s -slp-vectorizer -slp-max-vf=2 -slp-min-reg-size=128 -slp-max-reg-size=128 -S | FileCheck -check-prefix CHECK-VF2-128-128 %s

; This test case is checking if max register size (and max VF) is honored when
; vecorizing store chains in SLPVectorizer.

@X = external global [8 x i32], align 1

define void @foo() {
; CHECK-VF8-160-LABEL: @foo(
; CHECK-VF8-160-NEXT:    store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* bitcast ([8 x i32]* @X to <4 x i32>*), align 1
; CHECK-VF8-160-NEXT:    store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <4 x i32>*), align 1
; CHECK-VF8-160-NEXT:    ret void
;
; CHECK-VF4-160-LABEL: @foo(
; CHECK-VF4-160-NEXT:    store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* bitcast ([8 x i32]* @X to <4 x i32>*), align 1
; CHECK-VF4-160-NEXT:    store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <4 x i32>*), align 1
; CHECK-VF4-160-NEXT:    ret void
;
; CHECK-VF2-160-LABEL: @foo(
; CHECK-VF2-160-NEXT:    store <2 x i32> <i32 1, i32 2>, <2 x i32>* bitcast ([8 x i32]* @X to <2 x i32>*), align 1
; CHECK-VF2-160-NEXT:    store <2 x i32> <i32 3, i32 4>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 2) to <2 x i32>*), align 1
; CHECK-VF2-160-NEXT:    store <2 x i32> <i32 5, i32 6>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <2 x i32>*), align 1
; CHECK-VF2-160-NEXT:    store <2 x i32> <i32 7, i32 8>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 6) to <2 x i32>*), align 1
; CHECK-VF2-160-NEXT:    ret void
;
; CHECK-VF8-128-LABEL: @foo(
; CHECK-VF8-128-NEXT:    store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* bitcast ([8 x i32]* @X to <4 x i32>*), align 1
; CHECK-VF8-128-NEXT:    store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <4 x i32>*), align 1
; CHECK-VF8-128-NEXT:    ret void
;
; CHECK-VF4-128-LABEL: @foo(
; CHECK-VF4-128-NEXT:    store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* bitcast ([8 x i32]* @X to <4 x i32>*), align 1
; CHECK-VF4-128-NEXT:    store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <4 x i32>*), align 1
; CHECK-VF4-128-NEXT:    ret void
;
; CHECK-VF2-128-LABEL: @foo(
; CHECK-VF2-128-NEXT:    store <2 x i32> <i32 1, i32 2>, <2 x i32>* bitcast ([8 x i32]* @X to <2 x i32>*), align 1
; CHECK-VF2-128-NEXT:    store <2 x i32> <i32 3, i32 4>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 2) to <2 x i32>*), align 1
; CHECK-VF2-128-NEXT:    store <2 x i32> <i32 5, i32 6>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4) to <2 x i32>*), align 1
; CHECK-VF2-128-NEXT:    store <2 x i32> <i32 7, i32 8>, <2 x i32>* bitcast (i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 6) to <2 x i32>*), align 1
; CHECK-VF2-128-NEXT:    ret void
;
; CHECK-VF8-256-LABEL: @foo(
; CHECK-VF8-256-NEXT:    store <8 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>, <8 x i32>* bitcast ([8 x i32]* @X to <8 x i32>*), align 1
; CHECK-VF8-256-NEXT:    ret void
;
; CHECK-VF2-128-128-LABEL: @foo(
; CHECK-VF2-128-128-NEXT:    store i32 1, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 0), align 1
; CHECK-VF2-128-128-NEXT:    store i32 2, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 1), align 1
; CHECK-VF2-128-128-NEXT:    store i32 3, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 2), align 1
; CHECK-VF2-128-128-NEXT:    store i32 4, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 3), align 1
; CHECK-VF2-128-128-NEXT:    store i32 5, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4), align 1
; CHECK-VF2-128-128-NEXT:    store i32 6, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 5), align 1
; CHECK-VF2-128-128-NEXT:    store i32 7, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 6), align 1
; CHECK-VF2-128-128-NEXT:    store i32 8, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 7), align 1
; CHECK-VF2-128-128-NEXT:    ret void
;
  store i32 1, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 0), align 1
  store i32 2, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 1), align 1
  store i32 3, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 2), align 1
  store i32 4, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 3), align 1
  store i32 5, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 4), align 1
  store i32 6, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 5), align 1
  store i32 7, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 6), align 1
  store i32 8, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @X, i16 0, i16 7), align 1
  ret void
}
