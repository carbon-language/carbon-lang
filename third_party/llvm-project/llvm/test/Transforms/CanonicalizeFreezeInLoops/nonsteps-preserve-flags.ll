; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -canon-freeze -S | FileCheck %s
declare void @call(i32)

define void @add(i32 %init, i32 %n) {
; CHECK-LABEL: @add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[INIT_FROZEN:%.*]] = freeze i32 [[INIT:%.*]]
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[I:%.*]] = phi i32 [ [[INIT_FROZEN]], [[ENTRY:%.*]] ], [ [[I_NEXT:%.*]], [[LOOP]] ]
; CHECK-NEXT:    [[I_NEXT]] = add i32 [[I]], 1
; CHECK-NEXT:    [[NONSTEP:%.*]] = mul nsw i32 [[I]], 2
; CHECK-NEXT:    call void @call(i32 [[NONSTEP]])
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i32 [[I_NEXT]], [[N:%.*]]
; CHECK-NEXT:    br i1 [[COND]], label [[LOOP]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  br label %loop

loop:
  %i = phi i32 [ %init, %entry], [%i.next, %loop ]
  %i.next = add nsw i32 %i, 1
  %i.next.fr = freeze i32 %i.next
  %nonstep = mul nsw i32 %i, 2
  call void @call(i32 %nonstep)
  %cond = icmp eq i32 %i.next.fr, %n
  br i1 %cond, label %loop, label %exit

exit:
  ret void
}
