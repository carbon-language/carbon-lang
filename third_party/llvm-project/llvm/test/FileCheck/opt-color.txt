; Create a case that produces a simple diagnostic.
; RUN: echo foo > %t.in
; CHECK: bar

; Run without and with -color.  In the former case, FileCheck should suppress
; color in its diagnostics because stderr is a file.
; RUN: %ProtectFileCheckOutput not FileCheck %s < %t.in 2> %t.no-color
; RUN: %ProtectFileCheckOutput not FileCheck -color %s < %t.in 2> %t.color

; Check whether color was produced.
; RUN: FileCheck -check-prefix NO-COLOR %s < %t.no-color
; RUN: FileCheck -check-prefix COLOR %s < %t.color

; Make sure our NO-COLOR and COLOR patterns are sane: they don't match the
; opposite cases.
; RUN: not FileCheck -check-prefix COLOR %s < %t.no-color
; RUN: not FileCheck -check-prefix NO-COLOR %s < %t.color

; I don't know of a good way to check for ANSI color codes, so just make sure
; some new characters show up where those codes should appear.
; NO-COLOR: : error: CHECK: expected string not found in input
; COLOR: : {{.+}}error: {{.+}}CHECK: expected string not found in input
