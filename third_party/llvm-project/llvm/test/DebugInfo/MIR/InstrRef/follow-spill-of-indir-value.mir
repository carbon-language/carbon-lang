# RUN: llc %s -o - -experimental-debug-variable-locations=true \
# RUN:   -run-pass=livedebugvalues \
# RUN: | FileCheck %s --implicit-check-not=DBG_VALUE
# RUN: llc %s -o - -experimental-debug-variable-locations=true \
# RUN:   -start-before=livedebugvalues -filetype=obj \
# RUN: | llvm-dwarfdump - | FileCheck %s --check-prefix=DWARF

## Test that we can spill indirect plain variable locations, and those with
## non-empty expressions, to the stack. And that the derefs go in the right
## place.

## Capture variable num,
# CHECK-DAG: ![[VARNUM:[0-9]+]] = !DILocalVariable(name: "nt",

# DWARF:      DW_TAG_formal_parameter
# DWARF-NEXT: DW_AT_location
# DWARF-NEXT: DW_OP_breg5 RDI+0
##
## First location: variable pointed to by basereg $rdi
##
# DWARF-NEXT: DW_OP_breg7 RSP-8, DW_OP_deref
##
## Spilt to stack: push stack address and deref, variable pointed to by the
## pointer loaded off the stack.
##
# DWARF-NEXT: DW_OP_breg5 RDI+8
## 
## Second location, variable pointed to by the register value plus eight.
##
# DWARF-NEXT: DW_OP_breg7 RSP-8, DW_OP_deref, DW_OP_lit8, DW_OP_plus)
##
## Spilt to stack: push stack location and deref the pointer onto the dwarf
## expr stack. Then add eight to it, and it points to the variable.
##


--- |
  source_filename = "t.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64--linux"
  
  %struct.NonTrivial = type { i32 }
  
  ; Function Attrs: nounwind uwtable
  define i32 @_Z3foo10NonTrivial(%struct.NonTrivial* nocapture readonly %nt) local_unnamed_addr #0 !dbg !7 {
  entry:
    tail call void @llvm.dbg.declare(metadata %struct.NonTrivial* %nt, metadata !20, metadata !DIExpression()), !dbg !21
    tail call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{rbp},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15},~{dirflag},~{fpsr},~{flags}"() #2, !dbg !22, !srcloc !23
    %i1 = bitcast %struct.NonTrivial* %nt to i32*, !dbg !24
    %0 = load i32, i32* %i1, align 4, !dbg !24, !tbaa !25
    ret i32 %0, !dbg !30
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
  
  attributes #0 = { nounwind uwtable }
  attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn }
  attributes #2 = { nounwind }
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 6.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
  !1 = !DIFile(filename: "t.cpp", directory: "C:\\src\\llvm-project\\build")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{!"clang version 6.0.0 "}
  !7 = distinct !DISubprogram(name: "foo", linkageName: "_Z3foo10NonTrivial", scope: !1, file: !1, line: 10, type: !8, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !19)
  !8 = !DISubroutineType(types: !9)
  !9 = !{!10, !11}
  !10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !11 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "NonTrivial", file: !1, line: 5, size: 32, elements: !12, identifier: "_ZTS10NonTrivial")
  !12 = !{!13, !14, !18}
  !13 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !11, file: !1, line: 8, baseType: !10, size: 32)
  !14 = !DISubprogram(name: "NonTrivial", scope: !11, file: !1, line: 6, type: !15, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !15 = !DISubroutineType(types: !16)
  !16 = !{null, !17}
  !17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
  !18 = !DISubprogram(name: "~NonTrivial", scope: !11, file: !1, line: 7, type: !15, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)
  !19 = !{!20}
  !20 = !DILocalVariable(name: "nt", arg: 1, scope: !7, file: !1, line: 10, type: !11)
  !21 = !DILocation(line: 10, column: 20, scope: !7)
  !22 = !DILocation(line: 11, column: 3, scope: !7)
  !23 = !{i32 -2147471481}
  !24 = !DILocation(line: 12, column: 13, scope: !7)
  !25 = !{!26, !27, i64 0}
  !26 = !{!"_ZTS10NonTrivial", !27, i64 0}
  !27 = !{!"int", !28, i64 0}
  !28 = !{!"omnipotent char", !29, i64 0}
  !29 = !{!"Simple C++ TBAA"}
  !30 = !DILocation(line: 12, column: 3, scope: !7)

...
---
name:            _Z3foo10NonTrivial
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$rdi' }
frameInfo:
  stackSize:       48
  offsetAdjustment: -48
  maxAlignment:    8
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 48
fixedStack:
  - { id: 0, type: spill-slot, offset: -56, size: 8, alignment: 8, callee-saved-register: '$rbx' }
  - { id: 1, type: spill-slot, offset: -48, size: 8, alignment: 16, callee-saved-register: '$r12' }
  - { id: 2, type: spill-slot, offset: -40, size: 8, alignment: 8, callee-saved-register: '$r13' }
  - { id: 3, type: spill-slot, offset: -32, size: 8, alignment: 16, callee-saved-register: '$r14' }
  - { id: 4, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '$r15' }
  - { id: 5, type: spill-slot, offset: -16, size: 8, alignment: 16, callee-saved-register: '$rbp' }
stack:
  - { id: 0, type: spill-slot, offset: -64, size: 8, alignment: 8 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $rdi, $rbp, $r15, $r14, $r13, $r12, $rbx
  
    DBG_VALUE $rdi, 0, !20, !DIExpression(), debug-location !21
    ; CHECK: DBG_VALUE $rdi,
    MOV64mr $rsp, 1, $noreg, -8, $noreg, $rdi :: (store (s64) into %stack.0)
    $rdi = MOV64ri 0
    ; CHECK: DBG_VALUE $rsp, 0, ![[VARNUM]], !DIExpression(DW_OP_constu, 8, DW_OP_minus, DW_OP_deref),

    $rdi = MOV64ri 0 ; dummy instr for the above DBG_VALUE to cover in a loclist

    DBG_VALUE $rdi, 0, !20, !DIExpression(DW_OP_constu, 8, DW_OP_plus), debug-location !21
    ; CHECK: DBG_VALUE $rdi,
    MOV64mr $rsp, 1, $noreg, -8, $noreg, $rdi :: (store (s64) into %stack.0)
    $rdi = MOV64ri 0
    ; CHECK: DBG_VALUE $rsp, 0, ![[VARNUM]], !DIExpression(DW_OP_constu, 8, DW_OP_minus, DW_OP_deref, DW_OP_constu, 8, DW_OP_plus),

    renamable $rax = MOV64rm $rsp, 1, $noreg, -8, $noreg :: (load (s64) from %stack.0)
    renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !24 :: (load (s32) from %ir.i1, !tbaa !25)
    RET64 $eax, debug-location !30

...
