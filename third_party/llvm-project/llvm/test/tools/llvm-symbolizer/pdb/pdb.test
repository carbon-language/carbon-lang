RUN: echo 0x401380 > %t.input
RUN: echo 0x401390 >> %t.input
RUN: echo 0x4013A0 >> %t.input
RUN: echo 0x4013C0 >> %t.input
RUN: echo 0x4013D0 >> %t.input
RUN: echo 0x4013E0 >> %t.input
RUN: echo 0x4013F0 >> %t.input
RUN: echo 0x401420 >> %t.input
RUN: llvm-symbolizer --obj="%p/Inputs/test.exe" < %t.input \
RUN:    | FileCheck %s
RUN: llvm-symbolizer --obj="%p/Inputs/test.exe" --no-demangle < %t.input \
RUN:    | FileCheck %s --check-prefix=CHECK-NO-DEMANGLE

; Check that -dia works
RUN: llvm-symbolizer --dia --obj="%p/Inputs/test.exe" < %t.input \
RUN:    | FileCheck %s
RUN: llvm-symbolizer --dia --obj="%p/Inputs/test.exe" --no-demangle < %t.input \
RUN:    | FileCheck %s --check-prefix=CHECK-NO-DEMANGLE


Subtract ImageBase from all the offsets and run the test again with
--relative-address.

RUN: %python -c 'import sys;print("\n".join([hex(int(x, 16) - 0x400000) for x in sys.stdin]))' < %t.input \
RUN:    | llvm-symbolizer --obj="%p/Inputs/test.exe" --no-demangle --relative-address \
RUN:    | FileCheck %s --check-prefix=CHECK-NO-DEMANGLE

CHECK: foo(void)
CHECK-NEXT: test.cpp:10
CHECK: {{^private_symbol$}}
CHECK-NEXT: test.cpp:13:0
CHECK: {{^main}}
CHECK-NEXT: test.cpp:16:0
CHECK: {{^foo_cdecl$}}
CHECK: {{^foo_stdcall$}}
CHECK: {{^foo_fastcall$}}
CHECK: {{^foo_vectorcall$}}
CHECK: NS::Foo::bar(void)
CHECK-NEXT: test.cpp:6:0

CHECK-NO-DEMANGLE: ?foo@@YAXXZ
CHECK-NO-DEMANGLE-NEXT: test.cpp:10
CHECK-NO-DEMANGLE: private_symbol
CHECK-NO-DEMANGLE-NEXT: test.cpp:13
CHECK-NO-DEMANGLE: _main
CHECK-NO-DEMANGLE-NEXT: test.cpp:16
CHECK-NO-DEMANGLE: _foo_cdecl
CHECK-NO-DEMANGLE: _foo_stdcall@0
CHECK-NO-DEMANGLE: @foo_fastcall@0
CHECK-NO-DEMANGLE: foo_vectorcall@@0
CHECK-NO-DEMANGLE: ?bar@Foo@NS@@QAEXXZ
CHECK-NO-DEMANGLE-NEXT: test.cpp:6
