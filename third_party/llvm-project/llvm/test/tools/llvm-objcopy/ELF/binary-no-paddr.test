# RUN: yaml2obj -D PADDR=1 %s -o %t1
# RUN: llvm-objcopy -O binary %t1 %t1.out
# RUN: od -t x2 -v %t1.out | FileCheck %s --ignore-case
# RUN: wc -c < %t1.out | FileCheck %s --check-prefix=SIZE

## When all p_paddr fields are 0, GNU objcopy resets LMA to VMA
## and gives a different output.
## https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=6ffd79000b45e77b3625143932ffbf781b6aecab
## We don't implement this special rule. The p_paddr=0 output is the same as
## the p_paddr=1 case.
# RUN: yaml2obj -D PADDR=0 %s -o %t0
# RUN: llvm-objcopy -O binary %t0 %t0.out
# RUN: cmp %t1.out %t0.out

!ELF
FileHeader:
  Class:           ELFCLASS64
  Data:            ELFDATA2LSB
  Type:            ET_EXEC
  Machine:         EM_X86_64
Sections:
  - Name:            .text
    Type:            SHT_PROGBITS
    Flags:           [ SHF_ALLOC, SHF_EXECINSTR ]
    Address:         0x1000
    AddressAlign:    0x0000000000001000
    Content:         "c3c3c3c3"
  - Name:            .data
    Type:            SHT_PROGBITS
    Flags:           [ SHF_ALLOC ]
    Address:         0x1004
    AddressAlign:    0x0000000000000004
    Content:         "3232"
ProgramHeaders:
  - Type:     PT_LOAD
    Flags:    [ PF_X, PF_R ]
    VAddr:    0x1000
    PAddr:    [[PADDR]]
    FirstSec: .text
    LastSec:  .text
  - Type:     PT_LOAD
    Flags:    [ PF_R, PF_W ]
    VAddr:    0x1004
    PAddr:    [[PADDR]]
    FirstSec: .data
    LastSec:  .data

# CHECK: 0000000 3232 c3c3
# SIZE:  4
