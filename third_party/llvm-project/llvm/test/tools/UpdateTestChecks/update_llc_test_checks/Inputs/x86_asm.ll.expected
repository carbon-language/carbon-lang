; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=x86_64 < %s | FileCheck %s --check-prefix=PIC
; RUN: llc -mtriple=x86_64-windows < %s | FileCheck %s --check-prefix=WIN

define i64 @i64_test(i64 %i) nounwind readnone {
; PIC-LABEL: i64_test:
; PIC:       # %bb.0:
; PIC-NEXT:    movq %rdi, %rax
; PIC-NEXT:    addq -{{[0-9]+}}(%rsp), %rax
; PIC-NEXT:    retq
;
; WIN-LABEL: i64_test:
; WIN:       # %bb.0:
; WIN-NEXT:    pushq %rax
; WIN-NEXT:    movq %rcx, %rax
; WIN-NEXT:    addq (%rsp), %rax
; WIN-NEXT:    popq %rcx
; WIN-NEXT:    retq
  %loc = alloca i64
  %j = load i64, i64 * %loc
  %r = add i64 %i, %j
  ret i64 %r
}

define i64 @i32_test(i32 %i) nounwind readnone {
; PIC-LABEL: i32_test:
; PIC:       # %bb.0:
; PIC-NEXT:    movl %edi, %eax
; PIC-NEXT:    addl -{{[0-9]+}}(%rsp), %eax
; PIC-NEXT:    retq
;
; WIN-LABEL: i32_test:
; WIN:       # %bb.0:
; WIN-NEXT:    pushq %rax
; WIN-NEXT:    movl %ecx, %eax
; WIN-NEXT:    addl {{[0-9]+}}(%rsp), %eax
; WIN-NEXT:    popq %rcx
; WIN-NEXT:    retq
  %loc = alloca i32
  %j = load i32, i32 * %loc
  %r = add i32 %i, %j
  %ext = zext i32 %r to i64
  ret i64 %ext
}

define i64 @i16_test(i16 %i) nounwind readnone {
; PIC-LABEL: i16_test:
; PIC:       # %bb.0:
; PIC-NEXT:    addw -{{[0-9]+}}(%rsp), %di
; PIC-NEXT:    movzwl %di, %eax
; PIC-NEXT:    retq
;
; WIN-LABEL: i16_test:
; WIN:       # %bb.0:
; WIN-NEXT:    pushq %rax
; WIN-NEXT:    addw {{[0-9]+}}(%rsp), %cx
; WIN-NEXT:    movzwl %cx, %eax
; WIN-NEXT:    popq %rcx
; WIN-NEXT:    retq
  %loc = alloca i16
  %j = load i16, i16 * %loc
  %r = add i16 %i, %j
  %ext = zext i16 %r to i64
  ret i64 %ext
}

define i64 @i8_test(i8 %i) nounwind readnone {
; PIC-LABEL: i8_test:
; PIC:       # %bb.0:
; PIC-NEXT:    addb -{{[0-9]+}}(%rsp), %dil
; PIC-NEXT:    movzbl %dil, %eax
; PIC-NEXT:    retq
;
; WIN-LABEL: i8_test:
; WIN:       # %bb.0:
; WIN-NEXT:    pushq %rax
; WIN-NEXT:    addb {{[0-9]+}}(%rsp), %cl
; WIN-NEXT:    movzbl %cl, %eax
; WIN-NEXT:    popq %rcx
; WIN-NEXT:    retq
  %loc = alloca i8
  %j = load i8, i8 * %loc
  %r = add i8 %i, %j
  %ext = zext i8 %r to i64
  ret i64 %ext
}
