## Check that we are able to dump AArch64 STO_* flags correctly when dumping symbols.

# RUN: yaml2obj %s -o %t.o
# RUN: llvm-readobj --symbols %t.o | FileCheck %s --check-prefix=LLVM
# RUN: llvm-readelf --symbols %t.o | FileCheck %s --check-prefix=GNU

# LLVM:      Name: foo1
# LLVM:      Other [ (0x80)
# LLVM-NEXT:   STO_AARCH64_VARIANT_PCS (0x80)
# LLVM-NEXT: ]
# LLVM:      Name: foo2
# LLVM:      Other [ (0xC0)
# LLVM-NEXT:   STO_AARCH64_VARIANT_PCS (0x80)
# LLVM-NEXT: ]
# LLVM:      Name: foo3
# LLVM:      Other [ (0x83)
# LLVM-NEXT:   STO_AARCH64_VARIANT_PCS (0x80)
# LLVM-NEXT:   STV_PROTECTED (0x3)
# LLVM-NEXT: ]
# LLVM:      Name: foo4
# LLVM:      Other [ (0x3)
# LLVM-NEXT:   STV_PROTECTED (0x3)
# LLVM-NEXT: ]

# GNU:      Symbol table '.symtab' contains 5 entries:
# GNU:      1: 0000000000000000 0 NOTYPE LOCAL DEFAULT   [VARIANT_PCS]      UND foo1
# GNU-NEXT: 2: 0000000000000000 0 NOTYPE LOCAL DEFAULT   [VARIANT_PCS | 40] UND foo2
# GNU-NEXT: 3: 0000000000000000 0 NOTYPE LOCAL PROTECTED [VARIANT_PCS]      UND foo3
# GNU-NEXT: 4: 0000000000000000 0 NOTYPE LOCAL PROTECTED                    UND foo4

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_REL
  Machine: EM_AARCH64
Symbols:
  - Name: foo1
    Other: [ STO_AARCH64_VARIANT_PCS ]
  - Name: foo2
    Other: [ STO_AARCH64_VARIANT_PCS, 0x40 ]
  - Name: foo3
    Other: [ STO_AARCH64_VARIANT_PCS, STV_PROTECTED ]
  - Name: foo4
    Other: [ STV_PROTECTED ]
