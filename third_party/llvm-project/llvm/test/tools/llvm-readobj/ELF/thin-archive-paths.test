# RUN: rm -rf %t
# RUN: mkdir -p %t/a/b
# RUN: cd %t
# RUN: yaml2obj %s -o a/b/1.o
# The archive is deliberately in a different directory to the cwd, to show that
# the member paths printed are exactly what's in the archive and not relative
# to the cwd.
# RUN: llvm-ar rcT a/relative.a a/b/1.o

# Show that relative paths in the file header printing look sensible.
# RUN: llvm-readobj --file-headers a/relative.a | FileCheck %s -DARFILE="a/relative.a" --check-prefix=REL
# REL: File: [[ARFILE]](b/1.o)

# Show that relative paths in an error message for both archive and member look
# sensible.
# RUN: rm a/b/1.o
# RUN: not llvm-readobj --file-headers a/relative.a 2>&1 | FileCheck %s --check-prefix=ERR1 -DMSG=%errc_ENOENT
# RUN: not llvm-readelf --file-headers a/relative.a 2>&1 | FileCheck %s --check-prefix=ERR1 -DMSG=%errc_ENOENT
# ERR1: error: 'a/relative.a': 'b/1.o': [[MSG]]

# RUN: mkdir -p %t/c
# RUN: yaml2obj %s -o a/b/1.o
# RUN: llvm-ar rcT c/absolute.a %t/a/b/1.o

# Show that absolute paths in the file header printing are correct.
# RUN: llvm-readobj --file-headers c/absolute.a | FileCheck %s --check-prefix=ABS -DARFILE="c/absolute.a" -DDIR=%/t
# ABS: File: [[ARFILE]]([[DIR]]/a/b/1.o)

# Show that absolute paths in an error message for both archive and member are correct.
# RUN: rm a/b/1.o
# RUN: not llvm-readobj --file-headers %/t/c/absolute.a 2>&1 | FileCheck %s --check-prefix=ERR2 -DDIR=%/t -DMSG=%errc_ENOENT
# RUN: not llvm-readelf --file-headers %/t/c/absolute.a 2>&1 | FileCheck %s --check-prefix=ERR2 -DDIR=%/t -DMSG=%errc_ENOENT
# ERR2: error: '[[DIR]]/c/absolute.a': '[[DIR]]/a/b/1.o': [[MSG]]

--- !ELF
FileHeader:
  Class: ELFCLASS32
  Data:  ELFDATA2LSB
  Type:  ET_DYN
