static_library("modernize") {
  output_name = "clangTidyModernizeModule"
  configs += [ "//llvm/utils/gn/build:clang_code" ]
  deps = [
    "//clang-tools-extra/clang-tidy",
    "//clang-tools-extra/clang-tidy/readability",
    "//clang-tools-extra/clang-tidy/utils",
    "//clang/lib/AST",
    "//clang/lib/ASTMatchers",
    "//clang/lib/Basic",
    "//clang/lib/Lex",
    "//clang/lib/Tooling",
    "//llvm/lib/Support",
  ]
  sources = [
    "AvoidBindCheck.cpp",
    "AvoidCArraysCheck.cpp",
    "ConcatNestedNamespacesCheck.cpp",
    "DeprecatedHeadersCheck.cpp",
    "DeprecatedIosBaseAliasesCheck.cpp",
    "IntegralLiteralExpressionMatcher.cpp",
    "LoopConvertCheck.cpp",
    "LoopConvertUtils.cpp",
    "MacroToEnumCheck.cpp",
    "MakeSharedCheck.cpp",
    "MakeSmartPtrCheck.cpp",
    "MakeUniqueCheck.cpp",
    "ModernizeTidyModule.cpp",
    "PassByValueCheck.cpp",
    "RawStringLiteralCheck.cpp",
    "RedundantVoidArgCheck.cpp",
    "ReplaceAutoPtrCheck.cpp",
    "ReplaceDisallowCopyAndAssignMacroCheck.cpp",
    "ReplaceRandomShuffleCheck.cpp",
    "ReturnBracedInitListCheck.cpp",
    "ShrinkToFitCheck.cpp",
    "UnaryStaticAssertCheck.cpp",
    "UseAutoCheck.cpp",
    "UseBoolLiteralsCheck.cpp",
    "UseDefaultMemberInitCheck.cpp",
    "UseEmplaceCheck.cpp",
    "UseEqualsDefaultCheck.cpp",
    "UseEqualsDeleteCheck.cpp",
    "UseNodiscardCheck.cpp",
    "UseNoexceptCheck.cpp",
    "UseNullptrCheck.cpp",
    "UseOverrideCheck.cpp",
    "UseTrailingReturnTypeCheck.cpp",
    "UseTransparentFunctorsCheck.cpp",
    "UseUncaughtExceptionsCheck.cpp",
    "UseUsingCheck.cpp",
  ]
}
