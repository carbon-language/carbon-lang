#!/bin/python3

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

"""Generates config_detected.bzl on Linux."""

import argparse
import os
import shutil
import subprocess
import sys
import tempfile

# The template file for output.
_BZL_TEMPLATE = """# Generated by: `gen_config_detected.py`
detected_linux_defines = [%s]
"""

# The file used to detect mallinfo2.
_CPP_FILE = """
#include <malloc.h>
// Returns 0 if mallinfo2 exists, fails to compile otherwise.
int main(int argc, char** argv) {
  return &mallinfo2 == nullptr;
}
"""


def _check_python_version():
  if sys.version_info[0] < 3:
    raise RuntimeError(
        "Must be invoked with a python 3 interpreter but was %s"
        % sys.executable
    )


def _parse_arguments():
  parser = argparse.ArgumentParser(description=__doc__)
  parser.add_argument(
      "--target", required=True, help="The path to config_detected.bzl."
  )

  args = parser.parse_args()
  return args


def _detect_system_clang():
  """Detects whether the system-provided clang can be used."""
  # If the user provides an explicit `CC` environment variable, use that as
  # the compiler. This should point at the `clang` executable to use.
  cc = os.environ.get("CC")
  if cc:
    version_output = subprocess.check_output([cc, "--version"])
    if "clang" not in version_output:
      exit("The `CC` environment variable is not a Clang compiler.")
    return cc

  # Try looking on the path. We check for the specific versioned name and then
  # the normal name.
  system_clang = shutil.which("clang-13")
  if not system_clang:
    system_clang = shutil.which("clang")
    if not system_clang:
      exit("Unable to find a `clang` executable on the system path.")

  return system_clang

def main(args):
  with tempfile.TemporaryFile() as out:
    cmd = [_detect_system_clang(), "-x", "c++", "-"]
    p = subprocess.run(cmd, input=_CPP_FILE, encoding="utf-8")
    if p.returncode == 0:
      detected_config = '"HAVE_MALLINFO2=1"'
    else:
      detected_config = ""
  with open(args.target, "w") as f:
    f.write(_BZL_TEMPLATE % detected_config)


if __name__ == "__main__":
  _check_python_version()
  main(_parse_arguments())
