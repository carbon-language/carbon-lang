#!/bin/python3

# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

"""Generates config_detected.bzl on Linux."""

import argparse
import subprocess
import sys
import tempfile

# The template file for output.
_BZL_TEMPLATE = """# Generated by: `gen_config_detected.py`
detected_linux_defines = [%s]
"""

# The file used to detect mallinfo2.
_CPP_FILE = """
#include <malloc.h>
// Returns 0 if mallinfo2 exists, fails to compile otherwise.
int main(int argc, char** argv) {
  return &mallinfo2 == nullptr;
}
"""


def _check_python_version():
  if sys.version_info[0] < 3:
    raise RuntimeError(
        "Must be invoked with a python 3 interpreter but was %s"
        % sys.executable
    )


def parse_arguments():
  parser = argparse.ArgumentParser(description=__doc__)
  parser.add_argument(
      "--target", required=True, help="The path to config_detected.bzl."
  )

  args = parser.parse_args()
  return args


def main(args):
  with tempfile.TemporaryFile() as out:
    cmd = ["clang++", "-x", "c++", "-"]
    p = subprocess.run(cmd, input=_CPP_FILE, encoding="utf-8")
    if p.returncode == 0:
      detected_config = '"HAVE_MALLINFO2=1"'
    else:
      detected_config = ""
  with open(args.target, "w") as f:
    f.write(_BZL_TEMPLATE % detected_config)


if __name__ == "__main__":
  _check_python_version()
  main(parse_arguments())
