#!/usr/bin/env python3

"""Updates the list of proposals in proposals/README.md."""

__copyright__ = """
Part of the Carbon Language project, under the Apache License v2.0 with LLVM
Exceptions. See /LICENSE for license information.
SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
"""

import io
import os
import importlib.util
import re
import sys

# Do some extra work to support direct runs.
try:
    from proposals.scripts import proposal_list
except ImportError:
    proposal_list_spec = importlib.util.spec_from_file_location(
        "proposal_list",
        os.path.join(os.path.dirname(__file__), "proposal_list.py"),
    )
    proposal_list = importlib.util.module_from_spec(proposal_list_spec)
    proposal_list_spec.loader.exec_module(proposal_list)  # type: ignore

if __name__ == "__main__":
    proposals_path = proposal_list.get_path()

    with io.StringIO() as out:
        out.write("<!-- Generated by ./scripts/update_proposal_list.py -->\n\n")
        results = out.getvalue()
        for title, filename in proposal_list.get_list(proposals_path):
            out.write("-   [%s](%s)\n" % (title, filename))
        toc = out.getvalue()

    # Replace the README content if needed.
    readme_path = os.path.join(proposals_path, "README.md")
    with open(readme_path) as f:
        old_content = f.read()
    proposals_re = re.compile(
        r"(.*<!-- proposals -->)(?:.*)(<!-- endproposals -->)",
        re.DOTALL | re.MULTILINE,
    )
    if not proposals_re.match(old_content):
        print(
            "ERROR: proposals/README.md is missing the <!-- proposals --> ... "
            "<!-- endproposals --> marker."
        )
        sys.exit(1)
    new_content = proposals_re.sub(r"\1\n%s\n\2" % toc, old_content)
    if old_content != new_content:
        print("Updating proposals/README.md")
        with open(readme_path, "w") as f:
            f.write(new_content)
