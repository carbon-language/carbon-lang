// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

// Generated by proto_to_carbon.
package Foo api;

choice Choice{Alternative()}
class Class{
}
interface Interface {
fn G() -> Self;
}
interface AnotherInterface {
}
impl i32 as Interface {
fn G[self: i32]() -> i32
{
return (self + 1);
}

}
impl i32 as AnotherInterface {
}
fn GetStruct() -> type
{
return {.n : i32};
}

fn GetChoice() -> type
{
return Choice;
}

fn GetClass() -> type
{
return Class;
}

fn GetInterface() -> type
{
return Interface;
}

fn GetConstraint() -> type
{
return (Interface & AnotherInterface);
}

fn TestStruct()
{
var s: GetStruct() = {.n = 1};
if ((s.(GetStruct().n) == 1)) {
Print("Struct OK", );
}

}

fn TestChoice()
{
var c: GetChoice() = GetChoice().Alternative();
match (c) {case GetChoice().Alternative() => {
Print("Choice OK", );
}
}
}

fn TestClass()
{
if (true) {
Print("Class OK", );
}

}

fn TestInterface(n: i32, )
{
var n: i32 = 1;
if ((n.(GetInterface().G)() == 2)) {
Print("Interface OK", );
}

}

fn TestConstraint()
{
var n: i32 = 1;
if ((n.(GetConstraint().G)() == 2)) {
Print("Constraint OK", );
}

}

fn Main() -> i32
{
TestStruct();
TestChoice();
TestConstraint();
return 3;
}
