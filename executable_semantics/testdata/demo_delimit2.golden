********** source program **********
fn main () -> Int {
delimit
{
suspend;
return 1;

}

with (k)
{
return 0;

}



}
********** type checking **********
--- step exp Int --->
--- step exp Int --->

********** type checking complete **********
fn main () -> Int {
delimit
{
suspend;
return 1;
}

with (k)
{
return 0;
}


}
********** starting execution **********
********** initializing globals **********
--- step exp () --->
********** calling main function **********
{
stack: top{main()<-1>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main() --->
{
stack: top{main<-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main --->
{
stack: top{fun<main><-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value fun<main> with main()<1>(fun<main>,) --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp () --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value () with main()<2>(fun<main>,(),) --->
pattern_match((), ())
{
stack: main{delimit
 ... 
with (k)
 ... 
<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt delimit
 ... 
with (k)
 ... 
 --->
{
stack: main{{
 ... 
}
<-1> :: delimit
 ... 
with (k)
 ... 
<0>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt {
 ... 
}
 --->
{
stack: main{suspend; ... <-1> :: {
 ... 
}
<0> :: delimit
 ... 
with (k)
 ... 
<0>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt suspend; ...  --->
{
stack: main{suspend;<-1> :: return 1;<-1> :: {
 ... 
}
<0> :: delimit
 ... 
with (k)
 ... 
<0>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt suspend; --->
{
stack: main{continuation<-1> :: delimit
 ... 
with (k)
 ... 
<0>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value continuation with delimit
 ... 
with (k)
 ... 
<1>(continuation,) --->
{
stack: main{{
 ... 
}
<-1>} :: top{}
heap: fun<main>, continuation, 
env: k: continuation, main: fun<main>, 
}
--- step stmt {
 ... 
}
 --->
{
stack: main{{
 ... 
}
<-1> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, continuation, 
env: k: continuation, main: fun<main>, 
}
--- step stmt {
 ... 
}
 --->
{
stack: main{return 0;<-1> :: {
 ... 
}
<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, continuation, 
env: k: continuation, main: fun<main>, 
}
--- step stmt return 0; --->
{
stack: main{0<-1> :: return 0;<0> :: {
 ... 
}
<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, continuation, 
env: k: continuation, main: fun<main>, 
}
--- step exp 0 --->
{
stack: main{0<-1> :: return 0;<0> :: {
 ... 
}
<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, continuation, 
env: k: continuation, main: fun<main>, 
}
--- handle value 0 with return 0;<1>(0,) --->
{
stack: top{0<-1>}
heap: fun<main>, !!continuation, 
env: main: fun<main>, 
}
result: 0
