********** source program **********
fn main () -> Int {
var auto: x = 2;
while ((! (x == 0)))
x = (x - 1);
return x;

}
********** type checking **********
--- step exp Int --->
--- step exp Int --->
--- step exp auto --->

********** type checking complete **********
fn main () -> Int {
var auto: x = 2;
while ((! (x == 0)))
x = (x - 1);
return x;
}
********** starting execution **********
********** initializing globals **********
--- step exp () --->
********** calling main function **********
{
stack: top{main()<-1>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main() --->
{
stack: top{main<-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main --->
{
stack: top{fun<main><-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value fun<main> with main()<1>(fun<main>,) --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp () --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value () with main()<2>(fun<main>,(),) --->
pattern_match((), ())
{
stack: main{var auto: x = 2; ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt var auto: x = 2; ...  --->
{
stack: main{var auto: x = 2;<-1> :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt var auto: x = 2; --->
{
stack: main{2<-1> :: var auto: x = 2;<0> :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp 2 --->
{
stack: main{2<-1> :: var auto: x = 2;<0> :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value 2 with var auto: x = 2;<1>(2,) --->
{
stack: main{auto: x<-1> :: var auto: x = 2;<1>(2,) :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp auto: x --->
{
stack: main{auto<-1> :: auto: x<0> :: var auto: x = 2;<1>(2,) :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp auto --->
{
stack: main{auto<-1> :: auto: x<0> :: var auto: x = 2;<1>(2,) :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value auto with auto: x<1>(auto,) --->
{
stack: main{auto: x<-1> :: var auto: x = 2;<1>(2,) :: while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value auto: x with var auto: x = 2;<2>(2,auto: x,) --->
pattern_match(auto: x, 2)
{
stack: main{while ((! (x == 0)))
 ...  ... <-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step stmt while ((! (x == 0)))
 ...  ...  --->
{
stack: main{while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step stmt while ((! (x == 0)))
 ...  --->
{
stack: main{(! (x == 0))<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp (! (x == 0)) --->
{
stack: main{(x == 0)<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp (x == 0) --->
{
stack: main{x<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp x --->
{
stack: main{2<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value 2 with (x == 0)<1>(2,) --->
{
stack: main{0<-1> :: (x == 0)<1>(2,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp 0 --->
{
stack: main{0<-1> :: (x == 0)<1>(2,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value 0 with (x == 0)<2>(2,0,) --->
{
stack: main{false<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value false with (! (x == 0))<1>(false,) --->
{
stack: main{true<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value true with while ((! (x == 0)))
 ... <1>(true,) --->
{
stack: main{x = (x - 1);<-1> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step stmt x = (x - 1); --->
{
stack: main{x<-1> :: x = (x - 1);<0> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step lvalue x --->
{
stack: main{ptr<1><-1> :: x = (x - 1);<0> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value ptr<1> with x = (x - 1);<1>(ptr<1>,) --->
{
stack: main{(x - 1)<-1> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp (x - 1) --->
{
stack: main{x<-1> :: (x - 1)<0> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp x --->
{
stack: main{2<-1> :: (x - 1)<0> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value 2 with (x - 1)<1>(2,) --->
{
stack: main{1<-1> :: (x - 1)<1>(2,) :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- step exp 1 --->
{
stack: main{1<-1> :: (x - 1)<1>(2,) :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value 1 with (x - 1)<2>(2,1,) --->
{
stack: main{1<-1> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 2, 
env: x: 2, main: fun<main>, 
}
--- handle value 1 with x = (x - 1);<2>(ptr<1>,1,) --->
{
stack: main{while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step stmt while ((! (x == 0)))
 ...  --->
{
stack: main{(! (x == 0))<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp (! (x == 0)) --->
{
stack: main{(x == 0)<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp (x == 0) --->
{
stack: main{x<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp x --->
{
stack: main{1<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value 1 with (x == 0)<1>(1,) --->
{
stack: main{0<-1> :: (x == 0)<1>(1,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp 0 --->
{
stack: main{0<-1> :: (x == 0)<1>(1,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value 0 with (x == 0)<2>(1,0,) --->
{
stack: main{false<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value false with (! (x == 0))<1>(false,) --->
{
stack: main{true<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value true with while ((! (x == 0)))
 ... <1>(true,) --->
{
stack: main{x = (x - 1);<-1> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step stmt x = (x - 1); --->
{
stack: main{x<-1> :: x = (x - 1);<0> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step lvalue x --->
{
stack: main{ptr<1><-1> :: x = (x - 1);<0> :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value ptr<1> with x = (x - 1);<1>(ptr<1>,) --->
{
stack: main{(x - 1)<-1> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp (x - 1) --->
{
stack: main{x<-1> :: (x - 1)<0> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp x --->
{
stack: main{1<-1> :: (x - 1)<0> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value 1 with (x - 1)<1>(1,) --->
{
stack: main{1<-1> :: (x - 1)<1>(1,) :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- step exp 1 --->
{
stack: main{1<-1> :: (x - 1)<1>(1,) :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value 1 with (x - 1)<2>(1,1,) --->
{
stack: main{0<-1> :: x = (x - 1);<1>(ptr<1>,) :: while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 1, 
env: x: 1, main: fun<main>, 
}
--- handle value 0 with x = (x - 1);<2>(ptr<1>,0,) --->
{
stack: main{while ((! (x == 0)))
 ... <-1> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step stmt while ((! (x == 0)))
 ...  --->
{
stack: main{(! (x == 0))<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step exp (! (x == 0)) --->
{
stack: main{(x == 0)<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step exp (x == 0) --->
{
stack: main{x<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step exp x --->
{
stack: main{0<-1> :: (x == 0)<0> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- handle value 0 with (x == 0)<1>(0,) --->
{
stack: main{0<-1> :: (x == 0)<1>(0,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step exp 0 --->
{
stack: main{0<-1> :: (x == 0)<1>(0,) :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- handle value 0 with (x == 0)<2>(0,0,) --->
{
stack: main{true<-1> :: (! (x == 0))<0> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- handle value true with (! (x == 0))<1>(true,) --->
{
stack: main{false<-1> :: while ((! (x == 0)))
 ... <0> :: return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- handle value false with while ((! (x == 0)))
 ... <1>(false,) --->
{
stack: main{return x;<-1>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step stmt return x; --->
{
stack: main{x<-1> :: return x;<0>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- step exp x --->
{
stack: main{0<-1> :: return x;<0>} :: top{}
heap: fun<main>, 0, 
env: x: 0, main: fun<main>, 
}
--- handle value 0 with return x;<1>(0,) --->
{
stack: top{0<-1>}
heap: fun<main>, !!0, 
env: main: fun<main>, 
}
result: 0
