********** source program **********
fn f (0 = Int: x) -> Int {
return (x - 1);

}
fn main () -> Int {
return f(0 = 1);

}
********** type checking **********
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->

********** type checking complete **********
fn f (0 = Int: x) -> Int {
return (x - 1);
}
fn main () -> Int {
return f(0 = 1);
}
********** starting execution **********
********** initializing globals **********
--- step exp (0 = Int: x) --->
--- step exp Int: x --->
--- step exp Int --->
--- handle value Int with Int: x<1>(Int,) --->
--- handle value Int: x with (0 = Int: x)<1>(Int: x,) --->
--- step exp () --->
********** calling main function **********
{
stack: top{main()<-1>}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp main() --->
{
stack: top{main<-1> :: main()<0>}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp main --->
{
stack: top{fun<main><-1> :: main()<0>}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value fun<main> with main()<1>(fun<main>,) --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp () --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value () with main()<2>(fun<main>,(),) --->
pattern_match((), ())
{
stack: main{return f(0 = 1);<-1>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step stmt return f(0 = 1); --->
{
stack: main{f(0 = 1)<-1> :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp f(0 = 1) --->
{
stack: main{f<-1> :: f(0 = 1)<0> :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp f --->
{
stack: main{fun<f><-1> :: f(0 = 1)<0> :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value fun<f> with f(0 = 1)<1>(fun<f>,) --->
{
stack: main{(0 = 1)<-1> :: f(0 = 1)<1>(fun<f>,) :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp (0 = 1) --->
{
stack: main{1<-1> :: (0 = 1)<0> :: f(0 = 1)<1>(fun<f>,) :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- step exp 1 --->
{
stack: main{1<-1> :: (0 = 1)<0> :: f(0 = 1)<1>(fun<f>,) :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value 1 with (0 = 1)<1>(1,) --->
{
stack: main{(0 = 1@3)<-1> :: f(0 = 1)<1>(fun<f>,) :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value (0 = 1@3) with f(0 = 1)<2>(fun<f>,(0 = 1@3),) --->
pattern_match((0 = Int: x@0), (0 = 1@3))
pattern_match(Int: x, 1)
{
stack: f{return (x - 1);<-1>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- step stmt return (x - 1); --->
{
stack: f{(x - 1)<-1> :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- step exp (x - 1) --->
{
stack: f{x<-1> :: (x - 1)<0> :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- step exp x --->
{
stack: f{1<-1> :: (x - 1)<0> :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- handle value 1 with (x - 1)<1>(1,) --->
{
stack: f{1<-1> :: (x - 1)<1>(1,) :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- step exp 1 --->
{
stack: f{1<-1> :: (x - 1)<1>(1,) :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- handle value 1 with (x - 1)<2>(1,1,) --->
{
stack: f{0<-1> :: return (x - 1);<0>} :: main{return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, 1, 
env: x: 1, main: fun<main>, f: fun<f>, 
}
--- handle value 0 with return (x - 1);<1>(0,) --->
{
stack: main{0<-1> :: return f(0 = 1);<0>} :: top{}
heap: Int: x, fun<f>, fun<main>, 1, !!1, 
env: main: fun<main>, f: fun<f>, 
}
--- handle value 0 with return f(0 = 1);<1>(0,) --->
{
stack: top{0<-1>}
heap: Int: x, fun<f>, fun<main>, 1, !!1, 
env: main: fun<main>, f: fun<f>, 
}
result: 0
