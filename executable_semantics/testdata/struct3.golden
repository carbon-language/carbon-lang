********** source program **********
struct Point {
var x : Int;
var y : Int;
}
fn main () -> Int {
return (Point(x = 1, y = 2).x - 1);

}
********** type checking **********
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->
--- step exp Int --->

********** type checking complete **********
struct Point {
var x : Int;
var y : Int;
}
fn main () -> Int {
return (Point(x = 1, y = 2).x - 1);
}
********** starting execution **********
********** initializing globals **********
--- step exp Int --->
--- step exp Int --->
--- step exp () --->
********** calling main function **********
{
stack: top{main()<-1>}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp main() --->
{
stack: top{main<-1> :: main()<0>}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp main --->
{
stack: top{fun<main><-1> :: main()<0>}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value fun<main> with main()<1>(fun<main>,) --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp () --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value () with main()<2>(fun<main>,(),) --->
pattern_match((), ())
{
stack: main{return (Point(x = 1, y = 2).x - 1);<-1>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step stmt return (Point(x = 1, y = 2).x - 1); --->
{
stack: main{(Point(x = 1, y = 2).x - 1)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp (Point(x = 1, y = 2).x - 1) --->
{
stack: main{Point(x = 1, y = 2).x<-1> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp Point(x = 1, y = 2).x --->
{
stack: main{Point(x = 1, y = 2)<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step lvalue Point(x = 1, y = 2) --->
{
stack: main{Point(x = 1, y = 2)<-1> :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp Point(x = 1, y = 2) --->
{
stack: main{Point<-1> :: Point(x = 1, y = 2)<0> :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp Point --->
{
stack: main{struct Point<-1> :: Point(x = 1, y = 2)<0> :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value struct Point with Point(x = 1, y = 2)<1>(struct Point,) --->
{
stack: main{(x = 1, y = 2)<-1> :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp (x = 1, y = 2) --->
{
stack: main{1<-1> :: (x = 1, y = 2)<0> :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp 1 --->
{
stack: main{1<-1> :: (x = 1, y = 2)<0> :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 1 with (x = 1, y = 2)<1>(1,) --->
{
stack: main{2<-1> :: (x = 1, y = 2)<1>(1,) :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- step exp 2 --->
{
stack: main{2<-1> :: (x = 1, y = 2)<1>(1,) :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 2 with (x = 1, y = 2)<2>(1,2,) --->
{
stack: main{(x = 1@2, y = 2@3)<-1> :: Point(x = 1, y = 2)<1>(struct Point,) :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value (x = 1@2, y = 2@3) with Point(x = 1, y = 2)<2>(struct Point,(x = 1@2, y = 2@3),) --->
{
stack: main{Point(x = 1@4, y = 2@5)<-1> :: exp=>lval<-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, 
env: main: fun<main>, Point: struct Point, 
}
--- handle value Point(x = 1@4, y = 2@5) with exp=>lval<0>(Point(x = 1@4, y = 2@5),) --->
{
stack: main{ptr<6><-1> :: Point(x = 1, y = 2).x<0> :: (Point(x = 1, y = 2).x - 1)<0> :: delete_tmp(6)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, Point(x = 1@4, y = 2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- handle value ptr<6> with Point(x = 1, y = 2).x<1>(ptr<6>,) --->
{
stack: main{1<-1> :: (Point(x = 1, y = 2).x - 1)<0> :: delete_tmp(6)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, Point(x = 1@4, y = 2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 1 with (Point(x = 1, y = 2).x - 1)<1>(1,) --->
{
stack: main{1<-1> :: (Point(x = 1, y = 2).x - 1)<1>(1,) :: delete_tmp(6)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, Point(x = 1@4, y = 2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- step exp 1 --->
{
stack: main{1<-1> :: (Point(x = 1, y = 2).x - 1)<1>(1,) :: delete_tmp(6)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, Point(x = 1@4, y = 2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 1 with (Point(x = 1, y = 2).x - 1)<2>(1,1,) --->
{
stack: main{0<-1> :: delete_tmp(6)<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, 1, 2, Point(x = 1@4, y = 2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 0 with delete_tmp(6)<0>(0,) --->
{
stack: main{0<-1> :: return (Point(x = 1, y = 2).x - 1);<0>} :: top{}
heap: struct Point, fun<main>, 1, 2, !!1, !!2, !!Point!!(x = !!1@4, y = !!2@5), 
env: main: fun<main>, Point: struct Point, 
}
--- handle value 0 with return (Point(x = 1, y = 2).x - 1);<1>(0,) --->
{
stack: top{0<-1>}
heap: struct Point, fun<main>, 1, 2, !!1, !!2, !!Point!!(x = !!1@4, y = !!2@5), 
env: main: fun<main>, Point: struct Point, 
}
result: 0
