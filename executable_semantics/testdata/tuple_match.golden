********** source program **********
fn main () -> Int {
var auto: t = (0 = 5, 1 = 2);
match (t) {
case (0 = auto: a, 1 = auto: b) =>
return ((a + b) - 7);
}

}
********** type checking **********
--- step exp Int --->
--- step exp Int --->
--- step exp auto --->
--- step exp auto --->
--- step exp auto --->

********** type checking complete **********
fn main () -> Int {
var auto: t = (0 = 5, 1 = 2);
match (t) {
case (0 = auto: a, 1 = auto: b) =>
return ((a + b) - 7);
}
}
********** starting execution **********
********** initializing globals **********
--- step exp () --->
********** calling main function **********
{
stack: top{main()<-1>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main() --->
{
stack: top{main<-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp main --->
{
stack: top{fun<main><-1> :: main()<0>}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value fun<main> with main()<1>(fun<main>,) --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp () --->
{
stack: top{()<-1> :: main()<1>(fun<main>,)}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value () with main()<2>(fun<main>,(),) --->
pattern_match((), ())
{
stack: main{var auto: t = (0 = 5, 1 = 2); ... <-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt var auto: t = (0 = 5, 1 = 2); ...  --->
{
stack: main{var auto: t = (0 = 5, 1 = 2);<-1> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step stmt var auto: t = (0 = 5, 1 = 2); --->
{
stack: main{(0 = 5, 1 = 2)<-1> :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp (0 = 5, 1 = 2) --->
{
stack: main{5<-1> :: (0 = 5, 1 = 2)<0> :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp 5 --->
{
stack: main{5<-1> :: (0 = 5, 1 = 2)<0> :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value 5 with (0 = 5, 1 = 2)<1>(5,) --->
{
stack: main{2<-1> :: (0 = 5, 1 = 2)<1>(5,) :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- step exp 2 --->
{
stack: main{2<-1> :: (0 = 5, 1 = 2)<1>(5,) :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 
env: main: fun<main>, 
}
--- handle value 2 with (0 = 5, 1 = 2)<2>(5,2,) --->
{
stack: main{(0 = 5@1, 1 = 2@2)<-1> :: var auto: t = (0 = 5, 1 = 2);<0> :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 
env: main: fun<main>, 
}
--- handle value (0 = 5@1, 1 = 2@2) with var auto: t = (0 = 5, 1 = 2);<1>((0 = 5@1, 1 = 2@2),) --->
{
stack: main{auto: t<-1> :: var auto: t = (0 = 5, 1 = 2);<1>((0 = 5@1, 1 = 2@2),) :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 
env: main: fun<main>, 
}
--- step exp auto: t --->
{
stack: main{auto<-1> :: auto: t<0> :: var auto: t = (0 = 5, 1 = 2);<1>((0 = 5@1, 1 = 2@2),) :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 
env: main: fun<main>, 
}
--- step exp auto --->
{
stack: main{auto<-1> :: auto: t<0> :: var auto: t = (0 = 5, 1 = 2);<1>((0 = 5@1, 1 = 2@2),) :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 
env: main: fun<main>, 
}
--- handle value auto with auto: t<1>(auto,) --->
{
stack: main{auto: t<-1> :: var auto: t = (0 = 5, 1 = 2);<1>((0 = 5@1, 1 = 2@2),) :: match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 
env: main: fun<main>, 
}
--- handle value auto: t with var auto: t = (0 = 5, 1 = 2);<2>((0 = 5@1, 1 = 2@2),auto: t,) --->
pattern_match(auto: t, (0 = 5@1, 1 = 2@2))
{
stack: main{match (t) {...}<-1>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step stmt match (t) {...} --->
{
stack: main{t<-1> :: match (t) {...}<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp t --->
{
stack: main{(0 = 5@3, 1 = 2@4)<-1> :: match (t) {...}<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value (0 = 5@3, 1 = 2@4) with match (t) {...}<1>((0 = 5@3, 1 = 2@4),) --->
{
stack: main{(0 = auto: a, 1 = auto: b)<-1> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp (0 = auto: a, 1 = auto: b) --->
{
stack: main{auto: a<-1> :: (0 = auto: a, 1 = auto: b)<0> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp auto: a --->
{
stack: main{auto<-1> :: auto: a<0> :: (0 = auto: a, 1 = auto: b)<0> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp auto --->
{
stack: main{auto<-1> :: auto: a<0> :: (0 = auto: a, 1 = auto: b)<0> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value auto with auto: a<1>(auto,) --->
{
stack: main{auto: a<-1> :: (0 = auto: a, 1 = auto: b)<0> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value auto: a with (0 = auto: a, 1 = auto: b)<1>(auto: a,) --->
{
stack: main{auto: b<-1> :: (0 = auto: a, 1 = auto: b)<1>(auto: a,) :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp auto: b --->
{
stack: main{auto<-1> :: auto: b<0> :: (0 = auto: a, 1 = auto: b)<1>(auto: a,) :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp auto --->
{
stack: main{auto<-1> :: auto: b<0> :: (0 = auto: a, 1 = auto: b)<1>(auto: a,) :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value auto with auto: b<1>(auto,) --->
{
stack: main{auto: b<-1> :: (0 = auto: a, 1 = auto: b)<1>(auto: a,) :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value auto: b with (0 = auto: a, 1 = auto: b)<2>(auto: a,auto: b,) --->
{
stack: main{(0 = auto: a@6, 1 = auto: b@7)<-1> :: match (t) {...}<1>((0 = 5@3, 1 = 2@4),)} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 
env: t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value (0 = auto: a@6, 1 = auto: b@7) with match (t) {...}<2>((0 = 5@3, 1 = 2@4),(0 = auto: a@6, 1 = auto: b@7),) --->
pattern_match((0 = auto: a@6, 1 = auto: b@7), (0 = 5@3, 1 = 2@4))
pattern_match(auto: a, 5)
pattern_match(auto: b, 2)
{
stack: main{return ((a + b) - 7);<-1> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step stmt return ((a + b) - 7); --->
{
stack: main{((a + b) - 7)<-1> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp ((a + b) - 7) --->
{
stack: main{(a + b)<-1> :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp (a + b) --->
{
stack: main{a<-1> :: (a + b)<0> :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp a --->
{
stack: main{5<-1> :: (a + b)<0> :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value 5 with (a + b)<1>(5,) --->
{
stack: main{b<-1> :: (a + b)<1>(5,) :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp b --->
{
stack: main{2<-1> :: (a + b)<1>(5,) :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value 2 with (a + b)<2>(5,2,) --->
{
stack: main{7<-1> :: ((a + b) - 7)<0> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value 7 with ((a + b) - 7)<1>(7,) --->
{
stack: main{7<-1> :: ((a + b) - 7)<1>(7,) :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- step exp 7 --->
{
stack: main{7<-1> :: ((a + b) - 7)<1>(7,) :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value 7 with ((a + b) - 7)<2>(7,7,) --->
{
stack: main{0<-1> :: return ((a + b) - 7);<0> :: {
 ... 
}
<0>} :: top{}
heap: fun<main>, 5, 2, 5, 2, (0 = 5@3, 1 = 2@4), auto: a, auto: b, 5, 2, 
env: b: 2, a: 5, t: (0 = 5@3, 1 = 2@4), main: fun<main>, 
}
--- handle value 0 with return ((a + b) - 7);<1>(0,) --->
{
stack: top{0<-1>}
heap: fun<main>, 5, 2, !!5, !!2, !!(0 = !!5@3, 1 = !!2@4), auto: a, auto: b, !!5, !!2, 
env: main: fun<main>, 
}
result: 0
