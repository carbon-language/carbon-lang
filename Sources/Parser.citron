// -*- mode: lemon; tab-width: 2; c-basic-offset: 2; -*-
// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

%class_name CarbonParser

%preface {
  /// Returns `first.site...last.site`
  fileprivate func ... <First: AST, Last: AST>(first: First, last: Last)
    -> ASTSite
  {
    first.site...last.site
  }

  extension _CitronParserUnexpectedTokenError
    : CustomDebugStringConvertible
  {
    var debugDescription: String {
      "UnexpectedToken(token: \(token), tokenCode: \(tokenCode))"
    }
  }
}

%token_type Token

%nonterminal_type illegal_character Never
%nonterminal_type input {AbstractSyntaxTree}
%nonterminal_type pattern Pattern
%nonterminal_type binding Pattern
%nonterminal_type function_call_binding {FunctionCall<Pattern>}
%nonterminal_type function_type_binding Pattern
%nonterminal_type expression Expression
%nonterminal_type member_designator MemberDesignator
%nonterminal_type tuple_literal TupleLiteral
%nonterminal_type tuple_binding TuplePattern
%nonterminal_type trailing_tuple_pattern TuplePattern
%nonterminal_type match_clause MatchClause
%nonterminal_type match_clause_list MatchClauseList
%nonterminal_type statement Statement
%nonterminal_type statement_list {[Statement]}
%nonterminal_type return_type TypeExpression
%nonterminal_type function_definition FunctionDefinition
%nonterminal_type function_declaration FunctionDefinition
%nonterminal_type struct_member_list {[StructMember]}
%nonterminal_type alternative Alternative
%nonterminal_type alternative_list {[Alternative]}
%nonterminal_type top_level_declaration TopLevelDeclaration
%nonterminal_type declaration_list {AbstractSyntaxTree}
%nonterminal_type identifier Identifier
%nonterminal_type trailing_tuple_literal TupleLiteral
%nonterminal_type function_parameter_tuple {TupleSyntax<Pattern>}
%nonterminal_type function_parameter_list {[Pattern]}
%nonterminal_type expression_list {[Expression]}
%nonterminal_type literal_element_list {[LiteralElement]}
%nonterminal_type trailing_tuple_binding {TuplePattern}
%nonterminal_type struct_member StructMember
%nonterminal_type pattern_element_list {[PatternElement]}
%nonterminal_type pattern_element PatternElement
%nonterminal_type literal_element LiteralElement
%nonterminal_type binding_element PatternElement
%nonterminal_type binding_element_list {[PatternElement]}
%nonterminal_type simple_binding SimpleBinding
%nonterminal_type initialization Initialization

%nonassociative LEFT_CURLY_BRACE RIGHT_CURLY_BRACE.
%nonassociative COLON COMMA DBLARROW.
%left_associative OR AND.
%nonassociative EQUAL_EQUAL NOT.
%left_associative PLUS MINUS.
%left_associative PERIOD ARROW.
%nonassociative LEFT_PARENTHESIS RIGHT_PARENTHESIS.
%nonassociative LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET.
%right_associative ELSE.
%start_symbol input

input ::= declaration_list(d).      { d }

pattern ::= expression(e).          { .atom(e) }
pattern ::= binding(p).             { p }

// A pattern that binds at least one variable.
binding ::= simple_binding(b).        { .variable(b) }
binding ::= tuple_binding(t).         { .tuple(t) }
binding ::= function_call_binding(f). { .functionCall(f) }
binding ::= function_type_binding(f). { f }

// binding for a single variable.
simple_binding ::= expression(t) COLON identifier(n).
  { SimpleBinding(type: .expression(TypeExpression(t)), name: n) }
simple_binding ::= AUTO(t) COLON identifier(n).
  { SimpleBinding(type: .auto(t.site), name: n) }

// alternatives, struct constructions, etc.
function_call_binding ::= expression(i) trailing_tuple_binding(a).
  { FunctionCall(callee: i, arguments: a) }

// identifier is just Identifier without the TokenID
identifier ::= Identifier(i). { Identifier(text: i.text, site: i.site) }

expression ::= identifier(i).
  { .name(i) }
expression ::= expression(t) member_designator(m).
  { .memberAccess(MemberAccessExpression(base: t, member: m)) }
expression ::=
  expression(t) LEFT_SQUARE_BRACKET expression(i) RIGHT_SQUARE_BRACKET(b).
{
  .index(target: t, offset: i, t...b)
}
expression ::= Integer_literal(i).
  { .integerLiteral(Int(i.text)!, i.site) }
expression ::= TRUE(t).
  { .booleanLiteral(true, t.site) }
expression ::= FALSE(t).
  { .booleanLiteral(false, t.site) }
expression ::= INT(t).
  { .intType(t.site) }
expression ::= BOOL(t).
  { .boolType(t.site) }
expression ::= TYPE(t).
  { .typeType(t.site) }
expression ::= LEFT_PARENTHESIS expression(e) RIGHT_PARENTHESIS.
  { e }
expression ::= expression(l) EQUAL_EQUAL(op) expression(r).
  { .binaryOperator(.init(operation: op, lhs: l, rhs: r, site: l...r))}
expression ::= expression(l) PLUS(op) expression(r).
  { .binaryOperator(.init(operation: op, lhs: l, rhs: r, site: l...r))}
expression ::= expression(l) MINUS(op) expression(r).
  { .binaryOperator(.init(operation: op, lhs: l, rhs: r, site: l...r))}
expression ::= expression(l) AND(op) expression(r).
  { .binaryOperator(.init(operation: op, lhs: l, rhs: r, site: l...r))}
expression ::= expression(l) OR(op) expression(r).
  { .binaryOperator(.init(operation: op, lhs: l, rhs: r, site: l...r))}
expression ::= NOT(op) expression(r).
  { .unaryOperator(.init(operation: op, operand: r, site: op...r))}
expression ::= MINUS(op) expression(r).
  { .unaryOperator(.init(operation: op, operand: r, site: op...r))}
expression ::= expression(f) trailing_tuple_literal(a).
  { .functionCall(FunctionCall(callee: f, arguments: a)) }
expression ::= FNTY(k) trailing_tuple_literal(p) return_type(r).
{
  .functionType(
    FunctionType(parameters: TupleTypeLiteral(p), returnType: r, site: k...r))
}
expression ::= tuple_literal(t).
  { .tupleLiteral(t) }

// A syntactic tuple of element patterns that is known not to be an expression
// and thus does not admit the unary tuple form (x,).
trailing_tuple_pattern ::= LEFT_PARENTHESIS(l) RIGHT_PARENTHESIS(r).
  { TupleSyntax([], l...r) }
trailing_tuple_pattern
  ::= LEFT_PARENTHESIS(l) pattern_element_list(a) RIGHT_PARENTHESIS(r).
{
  TupleSyntax(a, l...r)
}

// A list of tuple pattern elements; may or may not bind anything.
pattern_element_list ::= pattern_element(p).
  { [p] }
pattern_element_list ::= pattern_element(p) COMMA pattern_element_list(l).
  { [p] + l}

// An element of a tuple pattern; may or may not bind anything
pattern_element ::= pattern(p).
  { PatternElement(p) }
pattern_element ::= member_designator(k) EQUAL pattern(p).
  { PatternElement(label: k, p) }

// A syntactic tuple of element that is known not to be an expression and thus
// does not admit the unary tuple form (x,).
trailing_tuple_literal ::= LEFT_PARENTHESIS(l) RIGHT_PARENTHESIS(r).
  { TupleSyntax([], l...r) }
trailing_tuple_literal ::= LEFT_PARENTHESIS(l) literal_element_list(e) RIGHT_PARENTHESIS(r).
  { TupleSyntax(e, l...r) }

literal_element_list ::= literal_element(e).                               { [e] }
literal_element_list ::= literal_element(e) COMMA literal_element_list(l). { [e] + l}

// ()   (<e0>,)   (<e0>, <e1>)   (<e0>, <e1>, <e2>)   ...
tuple_literal ::= LEFT_PARENTHESIS(l) RIGHT_PARENTHESIS(r).
  { TupleSyntax([], l...r) }
tuple_literal ::= LEFT_PARENTHESIS(l) literal_element(e) COMMA RIGHT_PARENTHESIS(r).
  { TupleSyntax([e], l...r) }
tuple_literal ::= LEFT_PARENTHESIS(l) literal_element(h) COMMA
  literal_element_list(t) RIGHT_PARENTHESIS(r).
{
  TupleSyntax([h] + t, l...r)
}

literal_element ::= expression(e).
  { LiteralElement(e) }
literal_element ::= member_designator(m) EQUAL expression(e).
  { LiteralElement(label: m, e) }

// A binding of one or more variables in tuple form. Just like tuple_literal,
// except that it contains at least one variable binding.
tuple_binding ::=
  LEFT_PARENTHESIS(l) binding_element(b) COMMA RIGHT_PARENTHESIS(r).
{
  TupleSyntax([b], l...r)
}
tuple_binding ::=
  LEFT_PARENTHESIS(l) binding_element(h) COMMA
  pattern_element_list(t) RIGHT_PARENTHESIS(r).
{
  TupleSyntax([h] + t, l...r)
}
tuple_binding ::=
  LEFT_PARENTHESIS(l) literal_element(h) COMMA
  binding_element_list(t) RIGHT_PARENTHESIS(r).
{
  TupleSyntax([PatternElement(h)] + t, l...r)
}

// A binding of one or more variables in trailing tuple form. Just like
// tuple_binding, except that it doesn't admit the unary (b,) form.
trailing_tuple_binding ::=
  LEFT_PARENTHESIS(l) binding_element_list(b) RIGHT_PARENTHESIS(r).
{
  TupleSyntax(b, l...r)
}

// A list of tuple pattern elements that binds at least one variable
binding_element_list ::= binding_element(e).
  { [e] }
binding_element_list ::= binding_element(h) COMMA pattern_element_list(t).
  { [h] + t }
binding_element_list ::= literal_element(h) COMMA binding_element_list(t).
  { [ PatternElement(h) ] + t }


// A tuple pattern element that binds at least one variable.
binding_element ::= binding(p).
  { PatternElement(p) }
binding_element ::= member_designator(l) EQUAL binding(p).
  { PatternElement(label: l, p) }

member_designator ::= PERIOD(p) identifier(n).
  { MemberDesignator(text: n.text, site: p...n) }

// A function type pattern that binds at least one variable.
function_type_binding ::= FNTY(f) trailing_tuple_binding(p).
{
   .functionType(
     .init(
        parameters: p,
        returnType: .atom(.tupleLiteral(TupleSyntax([], .empty))), site: f...p))
}
function_type_binding ::= FNTY(f) trailing_tuple_binding(p) ARROW expression(r).
{
  .functionType(.init(parameters: p, returnType: .atom(r), site: f...r))
}
function_type_binding ::= FNTY(f) trailing_tuple_binding(p) ARROW binding(r).
{
  .functionType(.init(parameters: p, returnType: r, site: f...r))
}
function_type_binding ::= FNTY(f) trailing_tuple_literal(p) ARROW binding(r).
{
  .functionType(.init(parameters: .init(p), returnType: r, site: f...r))
}

match_clause ::= CASE(c) pattern(p) DBLARROW statement(s).
  { MatchClause(pattern: p, action: s, site: c...s) }
match_clause ::= DEFAULT(d) DBLARROW statement(s).
  { MatchClause(pattern: nil, action: s, site: d...s) }
match_clause_list ::= /* Empty */.
  { [] }
match_clause_list ::= match_clause(c) match_clause_list(l).
  { [c] + l }

statement ::= expression(l) EQUAL expression(r) SEMICOLON(s).
  { .assignment(target: l, source: r, l...s) }
statement ::= initialization(i).
  { .initialization(i) }
statement ::= expression(e) SEMICOLON(s).
  { .expressionStatement(e, e...s) }
statement ::= IF(i) LEFT_PARENTHESIS expression(c) RIGHT_PARENTHESIS
  statement(t) ELSE statement(f).
  { .if(condition: c, thenClause: t, elseClause: f, i...f) }
statement ::= IF(i) LEFT_PARENTHESIS expression(c) RIGHT_PARENTHESIS
  statement(t).
  { .if(condition: c, thenClause: t, elseClause: nil, i...t) }
statement ::= WHILE(w) LEFT_PARENTHESIS expression(c) RIGHT_PARENTHESIS
  statement(b).
  { .while(condition: c, body: b, w...b) }
statement ::= BREAK(b) SEMICOLON(s).
  { .break(b...s) }
statement ::= CONTINUE(c) SEMICOLON(s).
  { .continue(c...s) }
statement ::= RETURN(r) expression(e) SEMICOLON(s).
  { .return(e, r...s) }
statement ::= LEFT_CURLY_BRACE(l) statement_list(s) RIGHT_CURLY_BRACE(r).
  { .block(s, l...r) }
statement ::= MATCH(m) LEFT_PARENTHESIS expression(e) RIGHT_PARENTHESIS
  LEFT_CURLY_BRACE match_clause_list(c) RIGHT_CURLY_BRACE(r).
  { .match(subject: e, clauses: c, m...r) }
statement_list ::= /* Empty */.
  { [] }
statement_list ::= statement(s) statement_list(l).
  { [s] + l }

return_type ::= /* Empty */.
  { TypeExpression(.tupleLiteral(TupleSyntax([], .empty))) }
return_type ::= ARROW(a) expression(e).
  { TypeExpression(e) }

function_definition
  ::= FN(f) identifier(n) trailing_tuple_pattern(p) return_type(t)
  LEFT_CURLY_BRACE(l) statement_list(b) RIGHT_CURLY_BRACE(r).
  {
    FunctionDefinition(
      name: n, parameters: p, returnType: .expression(t),
      body: .block(b, l...r), site: f...r)
  }
function_definition
  ::= FN(f) identifier(n)
      trailing_tuple_pattern(p) DBLARROW expression(b) SEMICOLON(s).
  {
    FunctionDefinition(
      name: n, parameters: p, returnType: .auto(.empty),
      body: .return(b, b.site), site: f...s)
  }
function_declaration
  ::= FN(f) identifier(n)
     trailing_tuple_pattern(p) return_type(r) SEMICOLON(s).
  {
    FunctionDefinition(
      name: n, parameters: p, returnType: .expression(r),
      body: nil, site: f...s)
  }

struct_member ::= VAR(v) expression(type) COLON identifier(d) SEMICOLON(s).
  { StructMember(type: .init(type), name: d, site: v...s) }

struct_member_list ::= /* Empty */.
  { [] }
struct_member_list ::= struct_member(m) struct_member_list(l).
  { [m] + l }

alternative ::= identifier(n) trailing_tuple_literal(p).
  { Alternative(name: n, payload: TupleTypeLiteral(p), site: n...p) }
alternative ::= identifier(n).
  { Alternative(name: n, payload: .init([], .empty), site: n.site) }

alternative_list ::= /* Empty */.                             { [] }
alternative_list ::= alternative(a).                          { [a] }
alternative_list ::= alternative(a) COMMA alternative_list(l).{ [a] + l }

top_level_declaration ::= function_definition(f).
  { .function(f) }
top_level_declaration ::= function_declaration(f).
  { .function(f) }
top_level_declaration ::=
  STRUCT(s) identifier(n)
  LEFT_CURLY_BRACE struct_member_list(m) RIGHT_CURLY_BRACE(r).
{
  .struct(.init(name: n, members: m, site: s...r))
}
top_level_declaration ::= CHOICE(c) identifier(n)
  LEFT_CURLY_BRACE alternative_list(l) RIGHT_CURLY_BRACE(r).
{
  .choice(.init(name: n, alternatives: l, site: c...r))
}
top_level_declaration ::= initialization(v).
  { .initialization(v) }

declaration_list ::= /* Empty */.
  { [] }
declaration_list ::= top_level_declaration(d) declaration_list(l).
  { [d] + l }

initialization ::= VAR(v) binding(b) EQUAL expression(i) SEMICOLON(s).
  { Initialization(bindings: b, initializer: i, site: v...s) }

illegal_character ::= ILLEGAL_CHARACTER
