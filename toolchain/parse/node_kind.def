// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This is an X-macro header. It does not use `#include` guards, and instead is
// designed to be `#include`ed after the x-macro is defined in order for its
// inclusion to expand to the desired output. Macro definitions are cleaned up
// at the end of this file.
//
// Supported x-macros are:
// - CARBON_PARSE_NODE_KIND(Name)
//   Used as a fallback, or when none of the below cases apply.
//   - CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Name)
//     Defines a parse node for a prefix operator, with the Name as token.
//   - CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Name)
//     Defines a parse node for an infix operator, with the Name as token.
//   - CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR(Name)
//     Defines a parse node for a postfix operator, with the Name as token.
//   - CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(Name, LexTokenKind)
//     Defines a parse node that corresponds to a token that is a single-token
//     literal. The token is wrapped for LexTokenKinds.
//   - CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Name)
//     A token-based modifier. The Name is the TokenKind, and will be appended
//     with "Modifier" for the parse kind.
//
// LexTokenKind indicates the token kind required on a valid node.
//
// This tree represents the subset relationship between these macros, where if a
// specific x-macro isn't defined, it'll fall back to the parent macro.
//
// Parse nodes are clustered based on language feature. See typed_nodes.h for
// the expected tree structure under each node kind.

#if !defined(CARBON_PARSE_NODE_KIND)
#error "Must define CARBON_PARSE_NODE_KIND family x-macros to use this file."
#endif

// This is expected to be used with something like:
//
//   // Use x-macros to handle modifier cases.
//   #define CARBON_PARSE_NODE_KIND(...)
//   #define CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Name, ...) <code>
#ifndef CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR
#define CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Name) \
  CARBON_PARSE_NODE_KIND(PrefixOperator##Name)
#endif

// This is expected to be used with something like:
//
//   // Use x-macros to handle modifier cases.
//   #define CARBON_PARSE_NODE_KIND(...)
//   #define CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Name, ...) <code>
#ifndef CARBON_PARSE_NODE_KIND_INFIX_OPERATOR
#define CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Name) \
  CARBON_PARSE_NODE_KIND(InfixOperator##Name)
#endif

// This is expected to be used with something like:
//
//   // Use x-macros to handle modifier cases.
//   #define CARBON_PARSE_NODE_KIND(...)
//   #define CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR(Name, ...) <code>
#ifndef CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR
#define CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR(Name) \
  CARBON_PARSE_NODE_KIND(PostfixOperator##Name)
#endif

// This is expected to be used with something like:
//
//   // Use x-macros to handle literal cases.
//   #define CARBON_PARSE_NODE_KIND(...)
//   #define CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(Name, ...) <code>
#ifndef CARBON_PARSE_NODE_KIND_TOKEN_LITERAL
#define CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(Name, LexTokenKinds) \
  CARBON_PARSE_NODE_KIND(Name)
#endif

// This is expected to be used with something like:
//
//   // Use x-macros to handle modifier cases.
//   #define CARBON_PARSE_NODE_KIND(...)
//   #define CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Name, ...) <code>
#ifndef CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER
#define CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Name) \
  CARBON_PARSE_NODE_KIND(Name##Modifier)
#endif

// The start of the file.
CARBON_PARSE_NODE_KIND(FileStart)

// The end of the file.
CARBON_PARSE_NODE_KIND(FileEnd)

// An invalid parse. Used to balance the parse tree. Always has an error.
CARBON_PARSE_NODE_KIND(InvalidParse)

// An invalid subtree. Always has an error.
CARBON_PARSE_NODE_KIND(InvalidParseStart)
CARBON_PARSE_NODE_KIND(InvalidParseSubtree)

// A placeholder node to be replaced; it will never exist in a valid parse tree.
// Its token kind is not enforced even when valid.
CARBON_PARSE_NODE_KIND(Placeholder)

// An empty declaration, such as `;`.
CARBON_PARSE_NODE_KIND(EmptyDecl)

// An identifier name in a non-expression context, such as a declaration.
CARBON_PARSE_NODE_KIND(IdentifierName)

// An identifier name in an expression context.
CARBON_PARSE_NODE_KIND(IdentifierNameExpr)

// The `self` value and `Self` type identifier keywords. Typically of the form
// `self: Self`.
CARBON_PARSE_NODE_KIND(SelfValueName)
CARBON_PARSE_NODE_KIND(SelfValueNameExpr)
CARBON_PARSE_NODE_KIND(SelfTypeNameExpr)

// The `base` value keyword, introduced by `base: B`. Typically referenced in
// an expression, as in `x.base` or `{.base = ...}`, but can also be used as a
// declared name, as in `{.base: partial B}`.
CARBON_PARSE_NODE_KIND(BaseName)

// The `package` keyword in an expression.
CARBON_PARSE_NODE_KIND(PackageExpr)

// ----------------------------------------------------------------------------

// The comments below follow this pattern:
//
// // Descriptive heading:
// //   Child1
// //   Child2
// // Parent
//
// In this, `Child1`, `Child2`, and `Parent` are all kinds of parse nodes, which
// are then defined using the `CARBON_PARSE_NODE_KIND_*` macros. They are
// written in postorder, with the indentation showing the tree structure. See
// tree.h for more information.
//
// A parse node kind may be preceded by:
// -  `_optional_` if this node (or nodes) may be present or omitted in valid
//    parses, depending on which tokens are in the source code.
// -  `_repeated_` if this node (or nodes) may be repeated or omitted in valid
//    parses, depending on which tokens are in the source code.
// -  `_external_:` if this node is the child of multiple kinds of nodes and
//    is documented separately.
//
// There is generally a close correspondence between handling of tokens and the
// creation of non-external nodes in a given block.

// ----------------------------------------------------------------------------

// The name of a package or library for `package`, `import`, and `library`.
CARBON_PARSE_NODE_KIND(PackageName)
CARBON_PARSE_NODE_KIND(LibraryName)

// `package`:
//   PackageIntroducer
//   _repeated_ _external_: modifier
//   _optional_ _external_: PackageName
//   _optional_ _external_: LibrarySpecifier
// PackageDecl
CARBON_PARSE_NODE_KIND(PackageIntroducer)
CARBON_PARSE_NODE_KIND(PackageDecl)

// `import`:
//   ImportIntroducer
//   _repeated_ _external_: modifier
//   _optional_ _external_: PackageName
//   _optional_ _external_: LibrarySpecifier
// ImportDecl
CARBON_PARSE_NODE_KIND(ImportIntroducer)
CARBON_PARSE_NODE_KIND(ImportDecl)

// `library` as declaration:
//   LibraryIntroducer
//   _repeated_ _external_: modifier
//   DefaultLibrary or _external_: LibraryName
// LibraryDecl
CARBON_PARSE_NODE_KIND(DefaultLibrary)
CARBON_PARSE_NODE_KIND(LibraryIntroducer)
CARBON_PARSE_NODE_KIND(LibraryDecl)

// `library` in `package` or `import`:
//   _external_: LibraryName or DefaultLibrary
// LibrarySpecifier
CARBON_PARSE_NODE_KIND(LibrarySpecifier)

// Declaration names.
//
//   _repeated_: NameQualifier
//   _external_: IdentifierName
//   _optional_ _external_: ImplicitParamList
//   _optional_ _external_: TuplePattern
// _declaration name_
//
//   _external_: IdentifierName
//   _optional_ _external_: ImplicitParamList
//   _optional_ _external_: TuplePattern
// NameQualifier
CARBON_PARSE_NODE_KIND(NameQualifier)

// `export`:
//   ExportIntroducer
//   _external_: _declaration name_
// ExportDecl
CARBON_PARSE_NODE_KIND(ExportIntroducer)
CARBON_PARSE_NODE_KIND(ExportDecl)

// `namespace`:
//   NamespaceStart
//   _repeated_ _external_: modifier
//   _external_: _declaration name_
// Namespace
CARBON_PARSE_NODE_KIND(NamespaceStart)
CARBON_PARSE_NODE_KIND(Namespace)

// A code block:
//   CodeBlockStart
//   _repeated_ _external_: statement
// CodeBlock
CARBON_PARSE_NODE_KIND(CodeBlockStart)
CARBON_PARSE_NODE_KIND(CodeBlock)

// `fn` declarations start with a function signature:
//
//   FunctionIntroducer
//   _repeated_ _external_: modifier
//   _external_: _declaration name_
//   ReturnType
// _function signature_
//
// There are three forms of function declaration:
//
//   _function signature_
// FunctionDecl
//
//     _function signature_
//   FunctionDefinitionStart
//   _repeated_ _external_: statement
// FunctionDefinition
//
//     _function signature_
//   BuiltinFunctionDefinitionStart
//   BuiltinName
// BuiltinFunctionDefinition
CARBON_PARSE_NODE_KIND(FunctionIntroducer)
CARBON_PARSE_NODE_KIND(ReturnType)
CARBON_PARSE_NODE_KIND(FunctionDefinitionStart)
CARBON_PARSE_NODE_KIND(FunctionDefinition)
CARBON_PARSE_NODE_KIND(FunctionDecl)
CARBON_PARSE_NODE_KIND(BuiltinFunctionDefinitionStart)
CARBON_PARSE_NODE_KIND(BuiltinName)
CARBON_PARSE_NODE_KIND(BuiltinFunctionDefinition)

// `alias`:
//   AliasIntroducer
//   _repeated_ _external_: modifier
//   _external_: _declaration name_
//   AliasInitializer
//   _external_: expression
// Alias
CARBON_PARSE_NODE_KIND(AliasIntroducer)
CARBON_PARSE_NODE_KIND(AliasInitializer)
CARBON_PARSE_NODE_KIND(Alias)

// A tuple pattern:
//   TuplePatternStart
//     _external_: [Generic]BindingPattern
//     PatternListComma
//   _repeated_
// TuplePattern
//
// Patterns and PatternListComma may repeat with PatternListComma as a
// separator.
CARBON_PARSE_NODE_KIND(TuplePatternStart)
CARBON_PARSE_NODE_KIND(PatternListComma)
CARBON_PARSE_NODE_KIND(TuplePattern)

// An implicit parameter list:
//   ImplicitParamListStart
//     _external_: [Generic]BindingPattern
//     PatternListComma
//   _repeated_
// ImplicitParamList
//
// Patterns and PatternListComma may repeat with PatternListComma as a
// separator.
CARBON_PARSE_NODE_KIND(ImplicitParamListStart)
CARBON_PARSE_NODE_KIND(ImplicitParamList)

// An array type, such as  `[i32; 3]` or `[i32;]`:
//     ArrayExprStart
//     _external_: type expression
//   ArrayExprSemi
//   _optional_ _external_: expression
// ArrayExpr
CARBON_PARSE_NODE_KIND(ArrayExprStart)
CARBON_PARSE_NODE_KIND(ArrayExprSemi)
CARBON_PARSE_NODE_KIND(ArrayExpr)

// A binding pattern, such as `name: Type`:
//       IdentifierName or SelfValueName
//       _external_: type expression
//     [Generic]BindingPattern
//   _optional_ Addr
// _optional_ Template
CARBON_PARSE_NODE_KIND(BindingPattern)
CARBON_PARSE_NODE_KIND(CompileTimeBindingPattern)
CARBON_PARSE_NODE_KIND(Addr)
CARBON_PARSE_NODE_KIND(Template)

// `let` declarations, including associated constant declarations:
//   LetIntroducer
//   _repeated_ _external_: modifier
//   _external_: BindingPattern or TuplePattern
//     LetInitializer
//     _external_: expression
//   _optional_
// LetDecl
//
// Modifier keywords only appear for `let` declarations, not `let` statements.
//
// The LetInitializer and following expression are paired: either both will be
// present, or neither will.
CARBON_PARSE_NODE_KIND(LetIntroducer)
CARBON_PARSE_NODE_KIND(LetInitializer)
CARBON_PARSE_NODE_KIND(LetDecl)

// `var` and `returned var`:
//   VariableIntroducer
//   _repeated_ _external_: modifier
//   _optional_ ReturnedModifier
//   _external_: BindingPattern or TuplePattern
//     VariableInitializer
//     _external_: expression
//   _optional_
// VariableDecl
//
// Access and declaration modifier keywords only appear for `var` declarations,
// whereas the returned modifier only appears on `var` statements.
//
// The VariableInitializer and following expression are paired: either both will
// be present, or neither will.
CARBON_PARSE_NODE_KIND(VariableIntroducer)
CARBON_PARSE_NODE_KIND(ReturnedModifier)
CARBON_PARSE_NODE_KIND(VariableInitializer)
CARBON_PARSE_NODE_KIND(VariableDecl)

// An expression statement:
//   _external_: expression
// ExprStatement
CARBON_PARSE_NODE_KIND(ExprStatement)

// `break`:
//   BreakStatementStart
// BreakStatement
CARBON_PARSE_NODE_KIND(BreakStatementStart)
CARBON_PARSE_NODE_KIND(BreakStatement)

// `continue`:
//   ContinueStatementStart
// ContinueStatement
CARBON_PARSE_NODE_KIND(ContinueStatementStart)
CARBON_PARSE_NODE_KIND(ContinueStatement)

// `return`:
//   ReturnStatementStart
//   _optional_ ReturnVarModifier or _external_: expression
// ReturnStatement
CARBON_PARSE_NODE_KIND(ReturnStatementStart)
CARBON_PARSE_NODE_KIND(ReturnVarModifier)
CARBON_PARSE_NODE_KIND(ReturnStatement)

// `for`:
//     ForHeaderStart
//       VariableIntroducer
//       _external_: BindingPattern
//     ForIn
//     _external_: expression
//   ForHeader
//   _external_: CodeBlock
// ForStatement
//
// Versus a normal `var`, ForIn replaces VariableDecl.
CARBON_PARSE_NODE_KIND(ForHeaderStart)
CARBON_PARSE_NODE_KIND(ForIn)
CARBON_PARSE_NODE_KIND(ForHeader)
CARBON_PARSE_NODE_KIND(ForStatement)

// `if` statement + `else`:
//     IfConditionStart
//     _external_: expression
//   IfCondition
//   _external_: CodeBlock
//   IfStatementElse
//   _external_: CodeBlock or IfStatement
// IfStatement
//
// IfStatementElse and the following node are optional based on `else` presence.
CARBON_PARSE_NODE_KIND(IfConditionStart)
CARBON_PARSE_NODE_KIND(IfCondition)
CARBON_PARSE_NODE_KIND(IfStatementElse)
CARBON_PARSE_NODE_KIND(IfStatement)

// `while`:
//     WhileConditionStart
//     _external_: expression
//   WhileCondition
//   _external_: CodeBlock
// WhileStatement
CARBON_PARSE_NODE_KIND(WhileConditionStart)
CARBON_PARSE_NODE_KIND(WhileCondition)
CARBON_PARSE_NODE_KIND(WhileStatement)

// Index expressions, such as `a[1]`:
//     _external_: expression
//   IndexExprStart
//   _external_: expression
// IndexExpr
CARBON_PARSE_NODE_KIND(IndexExprStart)
CARBON_PARSE_NODE_KIND(IndexExpr)

// Parenthesized single expressions, such as `(2)`:
//   ParenExprStart
//   _external_: expression
// ParenExpr
CARBON_PARSE_NODE_KIND(ParenExprStart)
CARBON_PARSE_NODE_KIND(ParenExpr)

// Tuples, such as `(1, 2)`:
//   TupleLiteralStart
//     _external_: expression
//     TupleLiteralComma
//   _repeated_
// TupleLiteral
//
// Expressions and TupleLiteralComma may repeat with TupleLiteralComma as a
// separator.
CARBON_PARSE_NODE_KIND(TupleLiteralStart)
CARBON_PARSE_NODE_KIND(TupleLiteralComma)
CARBON_PARSE_NODE_KIND(TupleLiteral)

// Call expressions, such as `a()`:
//     _external_: expression
//   CallExprStart
//     _external_: expression
//     CallExprComma
//   _repeated_
// CallExpr
//
// Exprs and CallExprComma may repeat with CallExprComma as a separator.
CARBON_PARSE_NODE_KIND(CallExprStart)
CARBON_PARSE_NODE_KIND(CallExprComma)
CARBON_PARSE_NODE_KIND(CallExpr)

// A member access expression, such as `a.b` or
// `GetObject().(Interface.member)`:
//   _external_: lhs expression
//   _external_: rhs expression
// MemberAccessExpr
CARBON_PARSE_NODE_KIND(MemberAccessExpr)

// A pointer member access expression, such as `a->b` or
// `GetObject()->(Interface.member)`:
//   _external_: lhs expression
//   _external_: rhs expression
// PointerMemberAccessExpr
CARBON_PARSE_NODE_KIND(PointerMemberAccessExpr)

// A value literal.
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(BoolLiteralFalse, False)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(BoolLiteralTrue, True)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(IntLiteral, IntLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(RealLiteral, RealLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(StringLiteral, StringLiteral)

// A type literal.
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(BoolTypeLiteral, Bool)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(IntTypeLiteral, IntTypeLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(UnsignedIntTypeLiteral,
                                     UnsignedIntTypeLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(FloatTypeLiteral, FloatTypeLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(StringTypeLiteral, StringTypeLiteral)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(TypeTypeLiteral, Type)
CARBON_PARSE_NODE_KIND_TOKEN_LITERAL(AutoTypeLiteral, Auto)

// A prefix operator, such as `not`:
//   _external_: expression
// PrefixOperator<name>
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Amp)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Caret)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Const)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Not)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Minus)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(MinusMinus)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(PlusPlus)
CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR(Star)

// An infix operator, such as `+`:
//   _external_: lhs expression
//   _external_: rhs expression
// InfixOperator<name>
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Amp)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(AmpEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(As)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Caret)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(CaretEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Equal)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(EqualEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(ExclaimEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Greater)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(GreaterEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(GreaterGreater)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(GreaterGreaterEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Less)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(LessEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(LessEqualGreater)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(LessLess)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(LessLessEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Minus)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(MinusEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Percent)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(PercentEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Pipe)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(PipeEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Plus)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(PlusEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Slash)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(SlashEqual)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(Star)
CARBON_PARSE_NODE_KIND_INFIX_OPERATOR(StarEqual)

// A postfix operator, currently only `*`:
//   _external_: expression
// PostfixOperator<name>
CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR(Star)

// A short-circuiting infix operator, such as `and`:
//     _external_: expression
//   ShortCircuitOperand(And|Or)
//   _external_: expression
// ShortCircuitOperand(And|Or)
CARBON_PARSE_NODE_KIND(ShortCircuitOperandAnd)
CARBON_PARSE_NODE_KIND(ShortCircuitOperandOr)
CARBON_PARSE_NODE_KIND(ShortCircuitOperatorAnd)
CARBON_PARSE_NODE_KIND(ShortCircuitOperatorOr)

// `if` expression + `then` + `else`:
//     _external_: expression
//   IfExprIf
//     _external_: expression
//   IfExprThen
//   _external_: expression
// IfExprElse
CARBON_PARSE_NODE_KIND(IfExprIf)
CARBON_PARSE_NODE_KIND(IfExprThen)
CARBON_PARSE_NODE_KIND(IfExprElse)

// Struct literals, such as `{.a = 0}`:
//   StructLiteralStart
//         _external_: IdentifierName or BaseName
//       StructFieldDesignator
//       _external_: expression
//     StructField
//     StructComma
//   _repeated_
// StructLiteral
//
// Struct type literals, such as `{.a: i32}`:
//   StructTypeLiteralStart
//         _external_: IdentifierName or BaseName
//       StructFieldDesignator
//       _external_: type expression
//     StructTypeField
//     StructComma
//   _repeated_
// StructTypeLiteral
//
// Elements (StructField and StructTypeField, respectively) and StructComma
// may repeat with StructComma as a separator.
//
// When a valid StructTypeField or StructField cannot be formed, elements
// may be replaced by InvalidParse, which may have a preceding sibling
// StructFieldDesignator if one was successfully parsed.
CARBON_PARSE_NODE_KIND(StructLiteralStart)
CARBON_PARSE_NODE_KIND(StructTypeLiteralStart)
CARBON_PARSE_NODE_KIND(StructFieldDesignator)
CARBON_PARSE_NODE_KIND(StructField)
CARBON_PARSE_NODE_KIND(StructTypeField)
CARBON_PARSE_NODE_KIND(StructComma)
CARBON_PARSE_NODE_KIND(StructLiteral)
CARBON_PARSE_NODE_KIND(StructTypeLiteral)

// Various modifiers. These are all a single token.
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Abstract)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Base)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Default)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Export)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Extend)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Extern)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Final)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Impl)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Private)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Protected)
CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER(Virtual)

// `class`:
//     ClassIntroducer
//     _repeated_ _external_: modifier
//     _external_: _declaration name_
//     _optional_ _external_: ImplicitParamList
//     _optional_ _external_: TuplePattern
//   ClassDefinitionStart
//   _external_: declarations
// ClassDefinition
//
// The above is the structure for a definition; for a declaration,
// ClassDefinitionStart and later nodes are removed and replaced by
// ClassDecl.
CARBON_PARSE_NODE_KIND(ClassIntroducer)
CARBON_PARSE_NODE_KIND(ClassDefinitionStart)
CARBON_PARSE_NODE_KIND(ClassDefinition)
CARBON_PARSE_NODE_KIND(ClassDecl)

// `adapt`:
//   AdaptIntroducer
//   _repeated_ _external_: modifier
//   _external_: expression
// AdaptDecl
CARBON_PARSE_NODE_KIND(AdaptIntroducer)
CARBON_PARSE_NODE_KIND(AdaptDecl)

// `base`:
//   BaseIntroducer
//   _repeated_ _external_: modifier
//   BaseColon
//   _external_: expression
// BaseDecl
CARBON_PARSE_NODE_KIND(BaseIntroducer)
CARBON_PARSE_NODE_KIND(BaseColon)
CARBON_PARSE_NODE_KIND(BaseDecl)

// `interface`:
//     InterfaceIntroducer
//     _repeated_ _external_: modifier
//     _external_: _declaration name_
//     _optional_ _external_: ImplicitParamList
//     _optional_ _external_: TuplePattern
//   InterfaceDefinitionStart
//   _external_: declarations
// InterfaceDefinition
//
// The above is the structure for a definition; for a declaration,
// InterfaceDefinitionStart and later nodes are removed and replaced by
// InterfaceDecl.
CARBON_PARSE_NODE_KIND(InterfaceIntroducer)
CARBON_PARSE_NODE_KIND(InterfaceDefinitionStart)
CARBON_PARSE_NODE_KIND(InterfaceDefinition)
CARBON_PARSE_NODE_KIND(InterfaceDecl)

// `impl ... as`:
//     ImplIntroducer
//     _repeated_ _external_: modifier
//     _optional_ _external_: ImplForall
//     _optional_ _external_: expression
//     _external_: DefaultSelfImplAs or TypeImplAs
//     _external_: expression
//   ImplDefinitionStart
//   _external_: declarations
// ImplDefinition
//
// The above is the structure for a definition; for a declaration,
// ImplDefinitionStart and later nodes are removed and replaced by
// ImplDecl.
CARBON_PARSE_NODE_KIND(ImplIntroducer)
CARBON_PARSE_NODE_KIND(ImplDefinitionStart)
CARBON_PARSE_NODE_KIND(ImplDefinition)
CARBON_PARSE_NODE_KIND(ImplDecl)

// `forall ...`:
//   _external_: ImplicitParamList
// ImplForall
CARBON_PARSE_NODE_KIND(ImplForall)

// `... as`:
//   _external_: expression
// TypeImplAs
CARBON_PARSE_NODE_KIND(TypeImplAs)
// `as` without a type before it
CARBON_PARSE_NODE_KIND(DefaultSelfImplAs)

// `constraint`:
//     NamedConstraintIntroducer
//     _repeated_ _external_: modifier
//     _external_: _declaration name_
//     _optional_ _external_: ImplicitParamList
//     _optional_ _external_: TuplePattern
//   NamedConstraintDefinitionStart
//   _external_: declarations
// NamedConstraintDefinition
//
// The above is the structure for a definition; for a declaration,
// NamedConstraintDefinitionStart and later nodes are removed and replaced by
// NamedConstraintDecl.
CARBON_PARSE_NODE_KIND(NamedConstraintIntroducer)
CARBON_PARSE_NODE_KIND(NamedConstraintDefinitionStart)
CARBON_PARSE_NODE_KIND(NamedConstraintDefinition)
CARBON_PARSE_NODE_KIND(NamedConstraintDecl)

// `choice`:
//     ChoiceIntroducer
//     _external_: _declaration name_
//   ChoiceDefinitionStart
//   _optional_ _external_: ChoiceAlternativeList
// ChoiceDefinition
CARBON_PARSE_NODE_KIND(ChoiceIntroducer)
CARBON_PARSE_NODE_KIND(ChoiceDefinitionStart)
CARBON_PARSE_NODE_KIND(ChoiceDefinition)

// Choice alternative list:
//     _external_: IdentifierName
//     _optional_ _external_ : TuplePattern
//     _optional_: ChoiceAlternativeListComma
//   _repeated_
// ChoiceAlternativeList
CARBON_PARSE_NODE_KIND(ChoiceAlternativeListComma)

// `match`:
//     MatchIntroducer
//       MatchConditionStart
//       _external_: expression
//     MatchCondition
//   MatchStatementStart
//   _repeated_ _external_: MatchCase
//   _optional_ _external_: MatchStatementDefault
// MatchStatement
CARBON_PARSE_NODE_KIND(MatchIntroducer)
CARBON_PARSE_NODE_KIND(MatchConditionStart)
CARBON_PARSE_NODE_KIND(MatchCondition)
CARBON_PARSE_NODE_KIND(MatchStatementStart)
CARBON_PARSE_NODE_KIND(MatchStatement)

// `case`:
//     MatchCaseIntroducer
//     _external_: Pattern
//       MatchCaseGuardIntroducer
//       MatchCaseGuardStart
//       _external_: expression
//     MatchCaseGuard
//     MatchCaseEqualGreater
//   MatchCaseStart
//   _repeated_ _external_: statement
// MatchCase
CARBON_PARSE_NODE_KIND(MatchCaseIntroducer)
CARBON_PARSE_NODE_KIND(MatchCaseGuardIntroducer)
CARBON_PARSE_NODE_KIND(MatchCaseGuardStart)
CARBON_PARSE_NODE_KIND(MatchCaseGuard)
CARBON_PARSE_NODE_KIND(MatchCaseEqualGreater)
CARBON_PARSE_NODE_KIND(MatchCaseStart)
CARBON_PARSE_NODE_KIND(MatchCase)

// `default`:
//     MatchDefaultIntroducer
//     MatchDefaultEqualGreater
//   MatchDefaultStart
//   _repeated_ _external_: statement
// MatchDefault
CARBON_PARSE_NODE_KIND(MatchDefaultIntroducer)
CARBON_PARSE_NODE_KIND(MatchDefaultEqualGreater)
CARBON_PARSE_NODE_KIND(MatchDefaultStart)
CARBON_PARSE_NODE_KIND(MatchDefault)

#undef CARBON_PARSE_NODE_KIND
#undef CARBON_PARSE_NODE_KIND_INFIX_OPERATOR
#undef CARBON_PARSE_NODE_KIND_POSTFIX_OPERATOR
#undef CARBON_PARSE_NODE_KIND_PREFIX_OPERATOR
#undef CARBON_PARSE_NODE_KIND_TOKEN_LITERAL
#undef CARBON_PARSE_NODE_KIND_TOKEN_MODIFIER
#undef CARBON_IF_VALID
