// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This is an X-macro header. It does not use `#include` guards, and instead is
// designed to be `#include`ed after the x-macro is defined in order for its
// inclusion to expand to the desired output. Macro definitions are cleaned up
// at the end of this file.
//
// Exactly one of these macros should be defined before including this header:
// - CARBON_SEM_IR_NODE_KIND(Name)
//   Invoked for each kind of semantic node.
// - CARBON_SEM_IR_NODE_KIND_WITH_VALUE_KIND(Name, TypeFieldKind)
//   Invoked for each kind of semantic node, along with information about
//   whether the node produces a value, and if so, what kind of value.
// - CARBON_SEM_IR_NODE_KIND_WITH_TERMINATOR_KIND(Name, TerminatorKind)
//   Invoked for each kind of semantic node, along with information about
//   whether the node is a terminator node.
// - CARBON_SEM_IR_NODE_KIND_WITH_IR_NAME(Name, IRName)
//   Invoked for each kind of semantic node, along with the name that is used
//   to denote this node in textual Semantics IR.
// - CARBON_SEM_IR_NODE_KIND_WITH_HAS_PARSE_NODE(Name, HasParseNode)
//   Invoked for each kind of semantic node, along with `true` if it has a
//   parse node, otherwise `false`.
// - CARBON_SEM_IR_NODE_KIND_WITH_FIELDS(Name, Fields)
//   Invoked for each kind of semantic node, where `Fields` is 0-2 calls to
//   CARBON_FIELD(type, name) for the fields of the node.

#if defined(CARBON_SEM_IR_NODE_KIND)
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, ...) CARBON_SEM_IR_NODE_KIND(Name)
#elif defined(CARBON_SEM_IR_NODE_KIND_WITH_VALUE_KIND)
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, IRName, ValueKind, ...) \
  CARBON_SEM_IR_NODE_KIND_WITH_VALUE_KIND(Name, ValueKind)
#elif defined(CARBON_SEM_IR_NODE_KIND_WITH_TERMINATOR_KIND)
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, IRName, ValueKind, TerminatorKind, \
                                     ...)                                     \
  CARBON_SEM_IR_NODE_KIND_WITH_TERMINATOR_KIND(Name, TerminatorKind)
#elif defined(CARBON_SEM_IR_NODE_KIND_WITH_IR_NAME)
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, IRName, ...) \
  CARBON_SEM_IR_NODE_KIND_WITH_IR_NAME(Name, IRName)
#elif defined(CARBON_SEM_IR_NODE_KIND_WITH_HAS_PARSE_NODE)
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, IRName, ValueKind, TerminatorKind, \
                                     HasParseNode, ...)                       \
  CARBON_SEM_IR_NODE_KIND_WITH_HAS_PARSE_NODE(Name, HasParseNode)
#elif defined(CARBON_SEM_IR_NODE_KIND_WITH_FIELDS)
#if !defined(CARBON_FIELD)
#error "Must define CARBON_FIELD along with CARBON_SEM_IR_NODE_KIND_WITH_FIELDS"
#endif
#define CARBON_SEM_IR_NODE_KIND_IMPL(Name, IRName, ValueKind, TerminatorKind, \
                                     HasParseNode, ...)                       \
  CARBON_SEM_IR_NODE_KIND_WITH_FIELDS(Name, __VA_ARGS__)
#else
#error "Must define the x-macro to use this file."
#endif

CARBON_SEM_IR_NODE_KIND_IMPL(AddressOf, "address_of", Typed, NotTerminator,
                             true, CARBON_FIELD(NodeId, lvalue_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ArrayIndex, "array_index", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, array_id)
                                 CARBON_FIELD(NodeId, index_id))

// Initializes an array from a tuple. `tuple_id` is the source tuple
// expression. `inits_and_return_slot_id` contains one initializer per array
// element, plus a final element that is the return slot for the
// initialization.
CARBON_SEM_IR_NODE_KIND_IMPL(ArrayInit, "array_init", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, tuple_id)
                                 CARBON_FIELD(NodeBlockId,
                                              inits_and_return_slot_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ArrayType, "array_type", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, bound_id)
                                 CARBON_FIELD(TypeId, element_type_id))

// Performs a source-level initialization or assignment of `lhs_id` from
// `rhs_id`. This finishes initialization of `lhs_id` in the same way as
// `InitializeFrom`.
CARBON_SEM_IR_NODE_KIND_IMPL(Assign, "assign", None, NotTerminator, true,
                             CARBON_FIELD(NodeId, lhs_id)
                                 CARBON_FIELD(NodeId, rhs_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BinaryOperatorAdd, "add", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, lhs_id)
                                 CARBON_FIELD(NodeId, rhs_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BindName, "bind_name", Typed, NotTerminator, true,
                             CARBON_FIELD(StringId, name_id)
                                 CARBON_FIELD(NodeId, value_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BindValue, "bind_value", Typed, NotTerminator,
                             true, CARBON_FIELD(NodeId, value_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BlockArg, "block_arg", Typed, NotTerminator, true,
                             CARBON_FIELD(NodeBlockId, block_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BoolLiteral, "bool_literal", Typed, NotTerminator,
                             true, CARBON_FIELD(BoolValue, value))
CARBON_SEM_IR_NODE_KIND_IMPL(Branch, "br", None, Terminator, true,
                             CARBON_FIELD(NodeBlockId, target_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BranchIf, "br", None, TerminatorSequence, true,
                             CARBON_FIELD(NodeBlockId, target_id)
                                 CARBON_FIELD(NodeId, cond_id))
CARBON_SEM_IR_NODE_KIND_IMPL(BranchWithArg, "br", None, Terminator, true,
                             CARBON_FIELD(NodeBlockId, target_id)
                                 CARBON_FIELD(NodeId, arg_id))

// Builtins don't have a parse node associated with them.
CARBON_SEM_IR_NODE_KIND_IMPL(Builtin, "builtin", Typed, NotTerminator, false,
                             CARBON_FIELD(BuiltinKind, builtin_kind))

CARBON_SEM_IR_NODE_KIND_IMPL(Call, "call", Typed, NotTerminator, true,
                             CARBON_FIELD(NodeId, callee_id)
                                 CARBON_FIELD(NodeBlockId, args_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ClassDeclaration, "class_declaration", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(ClassId, class_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ConstType, "const_type", Typed, NotTerminator,
                             true, CARBON_FIELD(TypeId, inner_id))

// A cross-reference between IRs.
// A node's parse tree node must refer to a node in the current parse tree.
// This cannot use the cross-referenced node's parse tree node because it
// will be in a different parse tree.
CARBON_SEM_IR_NODE_KIND_IMPL(CrossReference, "xref", Typed, NotTerminator,
                             false,
                             CARBON_FIELD(CrossReferenceIRId, ir_id)
                                 CARBON_FIELD(NodeId, node_id))

CARBON_SEM_IR_NODE_KIND_IMPL(Dereference, "dereference", Typed, NotTerminator,
                             true, CARBON_FIELD(NodeId, pointer_id))
CARBON_SEM_IR_NODE_KIND_IMPL(FunctionDeclaration, "fn_decl", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(FunctionId, function_id))

// Finalizes the initialization of `dest_id` from the initializer expression
// `src_id`, by performing a final copy from source to destination, for types
// whose initialization is not in-place.
CARBON_SEM_IR_NODE_KIND_IMPL(InitializeFrom, "initialize_from", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(NodeId, src_id)
                                 CARBON_FIELD(NodeId, dest_id))

CARBON_SEM_IR_NODE_KIND_IMPL(IntegerLiteral, "int_literal", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(IntegerId, integer_id))
CARBON_SEM_IR_NODE_KIND_IMPL(NameReference, "name_reference", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(StringId, name_id)
                                 CARBON_FIELD(NodeId, value_id))
CARBON_SEM_IR_NODE_KIND_IMPL(Namespace, "namespace", Typed, NotTerminator, true,
                             CARBON_FIELD(NameScopeId, name_scope_id))
CARBON_SEM_IR_NODE_KIND_IMPL(NoOp, "no_op", None, NotTerminator, true,
                             /* no fields */)
CARBON_SEM_IR_NODE_KIND_IMPL(Parameter, "parameter", Typed, NotTerminator, true,
                             CARBON_FIELD(StringId, name_id))
CARBON_SEM_IR_NODE_KIND_IMPL(PointerType, "ptr_type", Typed, NotTerminator,
                             true, CARBON_FIELD(TypeId, pointee_id))
CARBON_SEM_IR_NODE_KIND_IMPL(RealLiteral, "real_literal", Typed, NotTerminator,
                             true, CARBON_FIELD(RealId, real_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ReturnExpression, "return", None, Terminator, true,
                             CARBON_FIELD(NodeId, expr_id))
CARBON_SEM_IR_NODE_KIND_IMPL(Return, "return", None, Terminator, true,
                             /* no fields */)
CARBON_SEM_IR_NODE_KIND_IMPL(SpliceBlock, "splice_block", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeBlockId, block_id)
                                 CARBON_FIELD(NodeId, result_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StringLiteral, "string_literal", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(StringId, string_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StructAccess, "struct_access", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(NodeId, struct_id)
                                 CARBON_FIELD(MemberIndex, index))
CARBON_SEM_IR_NODE_KIND_IMPL(StructInit, "struct_init", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, src_id)
                                 CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StructLiteral, "struct_literal", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StructTypeField, "struct_type_field", None,
                             NotTerminator, true,
                             CARBON_FIELD(StringId, name_id)
                                 CARBON_FIELD(TypeId, type_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StructType, "struct_type", Typed, NotTerminator,
                             true, CARBON_FIELD(NodeBlockId, fields_id))
CARBON_SEM_IR_NODE_KIND_IMPL(StructValue, "struct_value", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, src_id)
                                 CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TemporaryStorage, "temporary_storage", Typed,
                             NotTerminator, true,
                             /* no fields */)
CARBON_SEM_IR_NODE_KIND_IMPL(Temporary, "temporary", Typed, NotTerminator, true,
                             CARBON_FIELD(NodeId, storage_id)
                                 CARBON_FIELD(NodeId, init_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleAccess, "tuple_access", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, tuple_id)
                                 CARBON_FIELD(MemberIndex, index))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleIndex, "tuple_index", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, tuple_id)
                                 CARBON_FIELD(NodeId, index_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleInit, "tuple_init", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, src_id)
                                 CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleLiteral, "tuple_literal", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleType, "tuple_type", Typed, NotTerminator,
                             true, CARBON_FIELD(TypeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(TupleValue, "tuple_value", Typed, NotTerminator,
                             true,
                             CARBON_FIELD(NodeId, src_id)
                                 CARBON_FIELD(NodeBlockId, elements_id))
CARBON_SEM_IR_NODE_KIND_IMPL(UnaryOperatorNot, "not", Typed, NotTerminator,
                             true, CARBON_FIELD(NodeId, operand_id))
CARBON_SEM_IR_NODE_KIND_IMPL(ValueAsReference, "value_as_reference", Typed,
                             NotTerminator, true,
                             CARBON_FIELD(NodeId, value_id))
CARBON_SEM_IR_NODE_KIND_IMPL(VarStorage, "var", Typed, NotTerminator, true,
                             CARBON_FIELD(StringId, name_id))

#undef CARBON_SEM_IR_NODE_KIND
#undef CARBON_SEM_IR_NODE_KIND_WITH_VALUE_KIND
#undef CARBON_SEM_IR_NODE_KIND_WITH_TERMINATOR_KIND
#undef CARBON_SEM_IR_NODE_KIND_WITH_IR_NAME
#undef CARBON_SEM_IR_NODE_KIND_WITH_HAS_PARSE_NODE
#undef CARBON_SEM_IR_NODE_KIND_WITH_FIELDS
#undef CARBON_FIELD
#undef CARBON_SEM_IR_NODE_KIND_IMPL
