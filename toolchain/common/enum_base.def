// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

// Provides an enum type with names for values.
//
// Uses should look like:
//   #define CARBON_ENUM_BASE_NAME MyEnumBase
//   #define CARBON_ENUM_DEF_PATH "my_xmacros.def"
//   #include "toolchain/common/enum_base.def"
//
//   class MyEnum : MyEnumBase<MyEnum> {
//    public:
//     (any custom APIs)
//    protected:
//     using MyEnumBase::MyEnumBase;
//   };
//
// my_xmacros.def will include a line:
//   #ifdef CARBON_ENUM_BASE_NAME
//   #define MY_XMACRO(Name) CARBON_ENUM_ENTRY(Name)
//   #endif

#ifndef CARBON_ENUM_DEF_PATH
#error "Must define CARBON_ENUM_DEF_PATH"
#endif
#ifndef CARBON_ENUM_BASE_NAME
#error "Must define CARBON_ENUM_BASE_NAME"
#endif

namespace Internal {
namespace CARBON_ENUM_BASE_NAME {

inline constexpr llvm::StringLiteral Names[] = {
#define CARBON_ENUM_ENTRY(Name) #Name,
#include CARBON_ENUM_DEF_PATH
#undef CARBON_ENUM_ENTRY
};

}  // namespace CARBON_ENUM_BASE_NAME
}  // namespace Internal

// This uses CRTP to provide factory functions which create the derived enum.
template <typename DerivedEnumT>
class CARBON_ENUM_BASE_NAME {
 protected:
  // Note that this must be declared earlier in the class so that its type can
  // be used, for example in the conversion operator.
  enum class InternalEnum : uint8_t {
#define CARBON_ENUM_ENTRY(Name) Name,
#include CARBON_ENUM_DEF_PATH
#undef CARBON_ENUM_ENTRY
  };

 public:
  // Defines factory functions for each enum name.
  // `clang-format` has a bug with spacing around `->` returns in macros. See
  // https://bugs.llvm.org/show_bug.cgi?id=48320 for details.
#define CARBON_ENUM_ENTRY(Name)                \
  static constexpr auto Name()->DerivedEnumT { \
    return DerivedEnumT(InternalEnum::Name);   \
  }
#include CARBON_ENUM_DEF_PATH
#undef CARBON_ENUM_ENTRY

  // The default constructor is deleted because objects of this type should
  // always be constructed using the above factory functions for each unique
  // kind.
  CARBON_ENUM_BASE_NAME() = delete;

  // Gets a friendly name for the token for logging or debugging.
  [[nodiscard]] auto name() const -> llvm::StringRef {
    return Internal::CARBON_ENUM_BASE_NAME::Names[static_cast<int>(val_)];
  }

  // Enable conversion to our private enum, including in a `constexpr`
  // context, to enable usage in `switch` and `case`. The enum remains
  // private and nothing else should be using this function.
  // NOLINTNEXTLINE(google-explicit-constructor)
  constexpr operator InternalEnum() const { return val_; }

  void Print(llvm::raw_ostream& out) const { out << name(); }

 protected:
  constexpr explicit CARBON_ENUM_BASE_NAME(InternalEnum val) : val_(val) {}

  InternalEnum val_;
};

#undef CARBON_ENUM_DEF_PATH
#undef CARBON_ENUM_BASE_NAME
