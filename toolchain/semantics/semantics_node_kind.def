// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This is an X-macro header. It does not use `#include` guards, and instead is
// designed to be `#include`ed after the x-macro is defined in order for its
// inclusion to expand to the desired output. Macro definitions are cleaned up
// at the end of this file.
//
// Supported x-macros are:
// - CARBON_SEMANTICS_NODE_KIND(Name)
//   Defines a node kind.
// - CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Name, TypeFieldKind)
//   Defines a node kind and describes how it will use the `type` field.
// - CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(Name, TypeFieldKind, TerminatorKind)
//   Defines a node kind for a terminator node.
// TODO: This will not scale well as we add more information. Revisit this.

#if !defined(CARBON_SEMANTICS_NODE_KIND) && \
    !defined(CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND)
#error "Must define the x-macro to use this file."
#endif

#ifndef CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND
#define CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Name, TypeFieldKind) \
  CARBON_SEMANTICS_NODE_KIND(Name)
#endif

#ifndef CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND
#define CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(Name, TypeFieldKind, TerminatorKind) \
  CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Name, TypeFieldKind)
#endif

CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Invalid, Unused)

// A cross-reference between IRs.
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(CrossReference, Type)

CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Assign, Argument)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(BinaryOperatorAdd, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(BindName, Argument)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(BlockArg, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(BoolLiteral, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(Branch, Unused, Terminator)
CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(BranchIf, Unused, TerminatorSequence)
CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(BranchWithArg, Unused, Terminator)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Builtin, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Call, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(ConstType, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(FunctionDeclaration, UntypedValue)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(IntegerLiteral, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(Namespace, UntypedValue)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(PointerType, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(RealLiteral, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(Return, Unused, Terminator)
CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND(ReturnExpression, Argument, Terminator)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StringLiteral, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StructMemberAccess, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StructType, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StructTypeField, Argument)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StructValue, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(StubReference, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(TupleType, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(TupleValue, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(UnaryOperatorNot, Type)
CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND(VarStorage, Type)

#undef CARBON_SEMANTICS_NODE_KIND_WITH_TERMINATOR_KIND
#undef CARBON_SEMANTICS_NODE_KIND_WITH_TYPE_FIELD_KIND
#undef CARBON_SEMANTICS_NODE_KIND
