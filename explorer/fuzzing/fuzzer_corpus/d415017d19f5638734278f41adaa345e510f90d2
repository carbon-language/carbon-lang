compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    class_declaration {
      name: "A"
      members {
        impl {
          kind: InternalImpl
          impl_type {
            identifier {
              name: "Self"
            }
          }
          interface {
            call {
              function {
                identifier {
                  name: "ImplicitAs"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    int_type_literal {
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name: "Convert"
              me_pattern {
                binding_pattern {
                  name: "me"
                  type {
                    expression_pattern {
                      expression {
                        identifier {
                          name: "Self"
                        }
                      }
                    }
                  }
                }
              }
              param_pattern {
              }
              return_term {
                kind: Expression
                type {
                  int_type_literal {
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      int_literal {
                        value: 42
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "a"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "A"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_type_literal {
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              identifier {
                name: "a"
              }
            }
          }
        }
      }
    }
  }
}
