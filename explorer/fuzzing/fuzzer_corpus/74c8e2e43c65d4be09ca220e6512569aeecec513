compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "I"
      members {
        function {
          name: "F"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
            fields {
              binding_pattern {
                name: "t"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "T"
                      }
                    }
                  }
                }
              }
            }
            fields {
              binding_pattern {
                name: "o"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Self"
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Self"
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "X"
      members {
        impl {
          kind: InternalImpl
          impl_type {
            identifier {
              name: "Self"
            }
          }
          interface {
            call {
              function {
                identifier {
                  name: "I"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    identifier {
                      name: "U"
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name: "F"
              me_pattern {
                binding_pattern {
                  name: "me"
                  type {
                    expression_pattern {
                      expression {
                        identifier {
                          name: "Self"
                        }
                      }
                    }
                  }
                }
              }
              param_pattern {
                fields {
                  binding_pattern {
                    name: "u"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "U"
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  binding_pattern {
                    name: "o"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "Self"
                          }
                        }
                      }
                    }
                  }
                }
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "Self"
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      struct_literal {
                        fields {
                          name: "m"
                          expression {
                            identifier {
                              name: "u"
                            }
                          }
                        }
                        fields {
                          name: "n"
                          expression {
                            operator {
                              op: Add
                              arguments {
                                simple_member_access {
                                  field: "n"
                                  object {
                                    identifier {
                                      name: "me"
                                    }
                                  }
                                }
                              }
                              arguments {
                                simple_member_access {
                                  field: "n"
                                  object {
                                    identifier {
                                      name: "o"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      members {
        variable {
          binding {
            name: "m"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "U"
                  }
                }
              }
            }
          }
        }
      }
      members {
        variable {
          binding {
            name: "n"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      type_params {
        fields {
          generic_binding {
            name: "U"
            type {
              type_type_literal {
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Run"
      deduced_parameters {
        name: "V"
        type {
          type_type_literal {
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "V"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          tuple_literal {
            fields {
              identifier {
                name: "V"
              }
            }
            fields {
              identifier {
                name: "V"
              }
            }
            fields {
              int_type_literal {
              }
            }
            fields {
              int_type_literal {
              }
            }
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "v"
                type {
                  expression_pattern {
                    expression {
                      call {
                        function {
                          identifier {
                            name: "X"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              identifier {
                                name: "V"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "m"
                  expression {
                    identifier {
                      name: "x"
                    }
                  }
                }
                fields {
                  name: "n"
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "w"
                type {
                  expression_pattern {
                    expression {
                      call {
                        function {
                          identifier {
                            name: "X"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              identifier {
                                name: "V"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "m"
                  expression {
                    identifier {
                      name: "x"
                    }
                  }
                }
                fields {
                  name: "n"
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "call"
                type {
                  expression_pattern {
                    expression {
                      call {
                        function {
                          identifier {
                            name: "X"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              identifier {
                                name: "V"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  compound_member_access {
                    object {
                      identifier {
                        name: "v"
                      }
                    }
                    path {
                      compound_member_access {
                        object {
                          call {
                            function {
                              identifier {
                                name: "X"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "V"
                                  }
                                }
                              }
                            }
                          }
                        }
                        path {
                          simple_member_access {
                            field: "F"
                            object {
                              call {
                                function {
                                  identifier {
                                    name: "I"
                                  }
                                }
                                argument {
                                  tuple_literal {
                                    fields {
                                      identifier {
                                        name: "V"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "x"
                      }
                    }
                    fields {
                      identifier {
                        name: "w"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              tuple_literal {
                fields {
                  compound_member_access {
                    object {
                      identifier {
                        name: "call"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "m"
                        object {
                          call {
                            function {
                              identifier {
                                name: "X"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "V"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  simple_member_access {
                    field: "m"
                    object {
                      identifier {
                        name: "call"
                      }
                    }
                  }
                }
                fields {
                  compound_member_access {
                    object {
                      identifier {
                        name: "call"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "n"
                        object {
                          call {
                            function {
                              identifier {
                                name: "X"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "V"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  simple_member_access {
                    field: "n"
                    object {
                      identifier {
                        name: "call"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              tuple_pattern {
                fields {
                  binding_pattern {
                    name: "a"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  binding_pattern {
                    name: "b"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  binding_pattern {
                    name: "c"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  binding_pattern {
                    name: "d"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  identifier {
                    name: "Run"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              operator {
                op: Add
                arguments {
                  operator {
                    op: Add
                    arguments {
                      operator {
                        op: Add
                        arguments {
                          operator {
                            op: Mul
                            arguments {
                              identifier {
                                name: "a"
                              }
                            }
                            arguments {
                              int_literal {
                                value: 1000
                              }
                            }
                          }
                        }
                        arguments {
                          operator {
                            op: Mul
                            arguments {
                              identifier {
                                name: "b"
                              }
                            }
                            arguments {
                              int_literal {
                                value: 100
                              }
                            }
                          }
                        }
                      }
                    }
                    arguments {
                      operator {
                        op: Mul
                        arguments {
                          identifier {
                            name: "c"
                          }
                        }
                        arguments {
                          int_literal {
                            value: 10
                          }
                        }
                      }
                    }
                  }
                }
                arguments {
                  identifier {
                    name: "d"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
