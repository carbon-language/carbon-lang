compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "A"
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    interface {
      name: "B"
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "C"
      type_params {
        fields {
          generic_binding {
            name: "T"
            type {
              type_type_literal {
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: ExternalImpl
      impl_type {
        call {
          function {
            identifier {
              name: "C"
            }
          }
          argument {
            tuple_literal {
              fields {
                identifier {
                  name: "T"
                }
              }
            }
          }
        }
      }
      interface {
        operator {
          op: BitwiseAnd
          arguments {
            call {
              function {
                identifier {
                  name: "A"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    identifier {
                      name: "T"
                    }
                  }
                }
              }
            }
          }
          arguments {
            identifier {
              name: "B"
            }
          }
        }
      }
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_expression_statement {
                expression {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "v"
                type {
                  expression_pattern {
                    expression {
                      call {
                        function {
                          identifier {
                            name: "C"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              int_type_literal {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_type_literal {
              }
            }
            is_returned: false
          }
        }
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  compound_member_access {
                    object {
                      identifier {
                        name: "v"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "F"
                        object {
                          identifier {
                            name: "B"
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
