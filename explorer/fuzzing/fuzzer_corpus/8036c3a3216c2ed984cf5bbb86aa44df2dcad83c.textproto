compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "AddWith"
      members {
        function {
          name: "Op"
          me_pattern {
            name: "me"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "Self"
                  }
                }
              }
            }
          }
          param_pattern {
            fields {
              binding_pattern {
                name: "b"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "T"
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Self"
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "Point"
      members {
        variable {
          binding {
            name: "x"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        variable {
          binding {
            name: "y"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        identifier {
          name: "Point"
        }
      }
      interface {
        call {
          function {
            identifier {
              name: "AddWith"
            }
          }
          argument {
            tuple_literal {
              fields {
                identifier {
                  name: "Self"
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "Op"
          me_pattern {
            name: "me"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "Point"
                  }
                }
              }
            }
          }
          param_pattern {
            fields {
              binding_pattern {
                name: "b"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point"
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Point"
              }
            }
          }
          body {
            statements {
              return_statement {
                expression {
                  struct_literal {
                    fields {
                      name: "x"
                      expression {
                        primitive_operator {
                          op: Add
                          arguments {
                            field_access {
                              field: "x"
                              aggregate {
                                identifier {
                                  name: "me"
                                }
                              }
                            }
                          }
                          arguments {
                            field_access {
                              field: "x"
                              aggregate {
                                identifier {
                                  name: "b"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    fields {
                      name: "y"
                      expression {
                        primitive_operator {
                          op: Add
                          arguments {
                            field_access {
                              field: "y"
                              aggregate {
                                identifier {
                                  name: "me"
                                }
                              }
                            }
                          }
                          arguments {
                            field_access {
                              field: "y"
                              aggregate {
                                identifier {
                                  name: "b"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "DoAddGeneric"
      deduced_parameters {
        name: "T"
        type {
          type_type_literal {
          }
        }
      }
      deduced_parameters {
        name: "U"
        type {
          call {
            function {
              identifier {
                name: "AddWith"
              }
            }
            argument {
              tuple_literal {
                fields {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "a"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "U"
                  }
                }
              }
            }
          }
        }
        fields {
          binding_pattern {
            name: "b"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          identifier {
            name: "U"
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              call {
                function {
                  field_access {
                    field: "Op"
                    aggregate {
                      identifier {
                        name: "a"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "b"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "a"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "x"
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
                fields {
                  name: "y"
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "b"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "x"
                  expression {
                    int_literal {
                      value: 4
                    }
                  }
                }
                fields {
                  name: "y"
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "p"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point"
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  identifier {
                    name: "DoAddGeneric"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "a"
                      }
                    }
                    fields {
                      identifier {
                        name: "b"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              primitive_operator {
                op: Sub
                arguments {
                  primitive_operator {
                    op: Sub
                    arguments {
                      field_access {
                        field: "x"
                        aggregate {
                          identifier {
                            name: "p"
                          }
                        }
                      }
                    }
                    arguments {
                      field_access {
                        field: "y"
                        aggregate {
                          identifier {
                            name: "p"
                          }
                        }
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 3
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
