compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "I"
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      members {
        function {
          name: "M"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "A"
      members {
        variable {
          binding {
            name: "n"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        impl {
          kind: InternalImpl
          impl_type {
            identifier {
              name: "Self"
            }
          }
          interface {
            identifier {
              name: "I"
            }
          }
          members {
            function {
              name: "F"
              param_pattern {
              }
              return_term {
                kind: Expression
                type {
                  int_type_literal {
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name: "M"
              me_pattern {
                binding_pattern {
                  name: "me"
                  type {
                    expression_pattern {
                      expression {
                        identifier {
                          name: "Self"
                        }
                      }
                    }
                  }
                }
              }
              param_pattern {
              }
              return_term {
                kind: Expression
                type {
                  int_type_literal {
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "G"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_statement {
                expression {
                  int_literal {
                    value: 3
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        int_type_literal {
        }
      }
      interface {
        identifier {
          name: "I"
        }
      }
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_statement {
                expression {
                  int_literal {
                    value: 4
                  }
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "M"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_statement {
                expression {
                  int_literal {
                    value: 5
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "IF"
      target {
        simple_member_access {
          field: "F"
          object {
            identifier {
              name: "I"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "IM"
      target {
        simple_member_access {
          field: "M"
          object {
            identifier {
              name: "I"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "AIF"
      target {
        compound_member_access {
          object {
            identifier {
              name: "A"
            }
          }
          path {
            identifier {
              name: "IF"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "AIM"
      target {
        compound_member_access {
          object {
            identifier {
              name: "A"
            }
          }
          path {
            identifier {
              name: "IM"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "AG"
      target {
        simple_member_access {
          field: "G"
          object {
            identifier {
              name: "A"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "i32IF"
      target {
        compound_member_access {
          object {
            int_type_literal {
            }
          }
          path {
            identifier {
              name: "IF"
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "i32IM"
      target {
        compound_member_access {
          object {
            int_type_literal {
            }
          }
          path {
            identifier {
              name: "IM"
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "a"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "A"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "n"
                  expression {
                    int_literal {
                      value: 0
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "A"
                              }
                            }
                            path {
                              identifier {
                                name: "IF"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "a"
                              }
                            }
                            path {
                              identifier {
                                name: "IF"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "a"
                              }
                            }
                            path {
                              identifier {
                                name: "IM"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 3
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "a"
                              }
                            }
                            path {
                              compound_member_access {
                                object {
                                  identifier {
                                    name: "A"
                                  }
                                }
                                path {
                                  identifier {
                                    name: "IM"
                                  }
                                }
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 4
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          identifier {
                            name: "AIF"
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 5
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "a"
                              }
                            }
                            path {
                              identifier {
                                name: "AIM"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 6
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              identifier {
                                name: "a"
                              }
                            }
                            path {
                              identifier {
                                name: "AG"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 3
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 7
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              int_type_literal {
                              }
                            }
                            path {
                              identifier {
                                name: "IF"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 4
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 8
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              int_literal {
                                value: 0
                              }
                            }
                            path {
                              identifier {
                                name: "IF"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 4
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 9
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              int_literal {
                                value: 0
                              }
                            }
                            path {
                              identifier {
                                name: "IM"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 5
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 10
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              int_literal {
                                value: 0
                              }
                            }
                            path {
                              compound_member_access {
                                object {
                                  int_type_literal {
                                  }
                                }
                                path {
                                  identifier {
                                    name: "IM"
                                  }
                                }
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 5
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 11
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          identifier {
                            name: "i32IF"
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 4
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 12
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Not
                arguments {
                  operator {
                    op: Eq
                    arguments {
                      call {
                        function {
                          compound_member_access {
                            object {
                              int_literal {
                                value: 0
                              }
                            }
                            path {
                              identifier {
                                name: "i32IM"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 5
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_statement {
                  expression {
                    int_literal {
                      value: 13
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
