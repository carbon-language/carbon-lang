compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "A"
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      members {
        function {
          name: "G"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    interface {
      name: "B"
      members {
        function {
          name: "H"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Get1"
      deduced_parameters {
        name: "T"
        type {
          operator {
            op: BitwiseAnd
            arguments {
              identifier {
                name: "A"
              }
            }
            arguments {
              identifier {
                name: "B"
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "n"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              operator {
                op: Add
                arguments {
                  call {
                    function {
                      simple_member_access {
                        field: "F"
                        object {
                          identifier {
                            name: "n"
                          }
                        }
                      }
                    }
                    argument {
                      tuple_literal {
                      }
                    }
                  }
                }
                arguments {
                  call {
                    function {
                      simple_member_access {
                        field: "H"
                        object {
                          identifier {
                            name: "n"
                          }
                        }
                      }
                    }
                    argument {
                      tuple_literal {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Get2"
      deduced_parameters {
        name: "T"
        type {
          operator {
            op: BitwiseAnd
            arguments {
              identifier {
                name: "B"
              }
            }
            arguments {
              identifier {
                name: "A"
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "n"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "G"
                    object {
                      identifier {
                        name: "n"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Get3"
      deduced_parameters {
        name: "T"
        type {
          operator {
            op: BitwiseAnd
            arguments {
              operator {
                op: BitwiseAnd
                arguments {
                  operator {
                    op: BitwiseAnd
                    arguments {
                      operator {
                        op: BitwiseAnd
                        arguments {
                          identifier {
                            name: "B"
                          }
                        }
                        arguments {
                          identifier {
                            name: "A"
                          }
                        }
                      }
                    }
                    arguments {
                      identifier {
                        name: "A"
                      }
                    }
                  }
                }
                arguments {
                  identifier {
                    name: "B"
                  }
                }
              }
            }
            arguments {
              identifier {
                name: "A"
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "n"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              operator {
                op: Add
                arguments {
                  call {
                    function {
                      simple_member_access {
                        field: "G"
                        object {
                          identifier {
                            name: "n"
                          }
                        }
                      }
                    }
                    argument {
                      tuple_literal {
                      }
                    }
                  }
                }
                arguments {
                  call {
                    function {
                      simple_member_access {
                        field: "H"
                        object {
                          identifier {
                            name: "n"
                          }
                        }
                      }
                    }
                    argument {
                      tuple_literal {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        int_type_literal {
        }
      }
      interface {
        identifier {
          name: "A"
        }
      }
      members {
        function {
          name: "F"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_expression_statement {
                expression {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "G"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_expression_statement {
                expression {
                  int_literal {
                    value: 2
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        int_type_literal {
        }
      }
      interface {
        identifier {
          name: "B"
        }
      }
      members {
        function {
          name: "H"
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_expression_statement {
                expression {
                  int_literal {
                    value: 4
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "z"
                type {
                  expression_pattern {
                    expression {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
            init {
              int_literal {
                value: 0
              }
            }
            is_returned: false
          }
        }
        statements {
          return_expression_statement {
            expression {
              operator {
                op: Add
                arguments {
                  operator {
                    op: Add
                    arguments {
                      operator {
                        op: Mul
                        arguments {
                          call {
                            function {
                              identifier {
                                name: "Get1"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "z"
                                  }
                                }
                              }
                            }
                          }
                        }
                        arguments {
                          int_literal {
                            value: 100
                          }
                        }
                      }
                    }
                    arguments {
                      operator {
                        op: Mul
                        arguments {
                          call {
                            function {
                              identifier {
                                name: "Get2"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "z"
                                  }
                                }
                              }
                            }
                          }
                        }
                        arguments {
                          int_literal {
                            value: 10
                          }
                        }
                      }
                    }
                  }
                }
                arguments {
                  call {
                    function {
                      identifier {
                        name: "Get3"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          identifier {
                            name: "z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
