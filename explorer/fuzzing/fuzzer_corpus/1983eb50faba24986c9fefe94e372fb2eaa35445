compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "x"
                type {
                  expression_pattern {
                    expression {
                      call {
                        function {
                          identifier {
                            name: "Optional"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              string_type_literal {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  simple_member_access {
                    field: "Create"
                    object {
                      call {
                        function {
                          identifier {
                            name: "Optional"
                          }
                        }
                        argument {
                          tuple_literal {
                            fields {
                              string_type_literal {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "Hallo Welt"
                      }
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          if_statement {
            condition {
              call {
                function {
                  simple_member_access {
                    field: "HasValue"
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
            then_block {
              statements {
                expression_statement {
                  expression {
                    call {
                      function {
                        identifier {
                          name: "Print"
                        }
                      }
                      argument {
                        tuple_literal {
                          fields {
                            call {
                              function {
                                simple_member_access {
                                  field: "Get"
                                  object {
                                    identifier {
                                      name: "x"
                                    }
                                  }
                                }
                              }
                              argument {
                                tuple_literal {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 0
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              operator {
                op: Neg
                arguments {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
