compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    class_declaration {
      name {
        name: "C"
      }
      members {
        function {
          name {
            name: "FunctionC"
          }
          param_pattern {
            fields {
              var_pattern {
                pattern {
                  binding_pattern {
                    name: "i"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Omitted
          }
          body {
            statements {
              expression_statement {
                expression {
                  call {
                    function {
                      identifier {
                        name: "Print"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          string_literal {
                            value: "Class C, call {0}"
                          }
                        }
                        fields {
                          identifier {
                            name: "i"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "D"
      }
      members {
        function {
          name {
            name: "FunctionD"
          }
          param_pattern {
            fields {
              var_pattern {
                pattern {
                  binding_pattern {
                    name: "i"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Omitted
          }
          body {
            statements {
              expression_statement {
                expression {
                  call {
                    function {
                      simple_member_access {
                        field: "FunctionC"
                        object {
                          identifier {
                            name: "C"
                          }
                        }
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          identifier {
                            name: "i"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            statements {
              expression_statement {
                expression {
                  call {
                    function {
                      identifier {
                        name: "Print"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          string_literal {
                            value: "Class D, call {0}"
                          }
                        }
                        fields {
                          identifier {
                            name: "i"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "FunctionD"
                    object {
                      identifier {
                        name: "D"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 0
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "d"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "D"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "base"
                  expression {
                    struct_literal {
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "FunctionC"
                    object {
                      identifier {
                        name: "d"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "FunctionD"
                    object {
                      identifier {
                        name: "d"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
