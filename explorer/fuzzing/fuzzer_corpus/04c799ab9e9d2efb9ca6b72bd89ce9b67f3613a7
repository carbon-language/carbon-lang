compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    alias {
      name: "AB"
      target {
        struct_type_literal {
          fields {
            name: "a"
            expression {
              int_type_literal {
              }
            }
          }
          fields {
            name: "b"
            expression {
              int_type_literal {
              }
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "BA"
      target {
        struct_type_literal {
          fields {
            name: "b"
            expression {
              int_type_literal {
              }
            }
          }
          fields {
            name: "a"
            expression {
              int_type_literal {
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "ab"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "AB"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "b"
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
                fields {
                  name: "a"
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "ba"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "BA"
                      }
                    }
                  }
                }
              }
            }
            init {
              identifier {
                name: "ab"
              }
            }
            is_returned: false
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "ab.a: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "a"
                        object {
                          identifier {
                            name: "ab"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "ab.b: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "b"
                        object {
                          identifier {
                            name: "ab"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "ba.a: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "a"
                        object {
                          identifier {
                            name: "ba"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "ba.b: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "b"
                        object {
                          identifier {
                            name: "ba"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
