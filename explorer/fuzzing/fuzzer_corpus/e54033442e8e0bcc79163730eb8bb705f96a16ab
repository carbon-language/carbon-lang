compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    function {
      name: "test"
      param_pattern {
        fields {
          binding_pattern {
            name: "para"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          bool_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              bool_literal {
                value: true
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "i"
                type {
                  expression_pattern {
                    expression {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  identifier {
                    name: "Rand"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 0
                      }
                    }
                    fields {
                      int_literal {
                        value: 100
                      }
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "j"
                type {
                  expression_pattern {
                    expression {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  identifier {
                    name: "Rand"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 0
                      }
                    }
                    fields {
                      int_literal {
                        value: 100
                      }
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: Eq
                arguments {
                  identifier {
                    name: "i"
                  }
                }
                arguments {
                  identifier {
                    name: "j"
                  }
                }
              }
            }
            then_block {
              statements {
                expression_statement {
                  expression {
                    call {
                      function {
                        identifier {
                          name: "Print"
                        }
                      }
                      argument {
                        tuple_literal {
                          fields {
                            string_literal {
                              value: "HALLO WELT"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else_block {
              statements {
                expression_statement {
                  expression {
                    call {
                      function {
                        identifier {
                          name: "Print"
                        }
                      }
                      argument {
                        tuple_literal {
                          fields {
                            string_literal {
                              value: "Nice!"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
