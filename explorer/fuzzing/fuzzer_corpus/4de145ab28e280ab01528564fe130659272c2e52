compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name {
        name: "Container"
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "Element"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        function {
          name {
            name: "Front"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Element"
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "A"
      }
      deduced_parameters {
        name: "T"
        type {
          where {
            base {
              identifier {
                name: "Container"
              }
            }
            clauses {
              rewrite {
                member_name: "Element"
                replacement {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          simple_member_access {
            field: "Element"
            object {
              identifier {
                name: "T"
              }
            }
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "Front"
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "B"
      }
      deduced_parameters {
        name: "T"
        type {
          where {
            base {
              identifier {
                name: "Container"
              }
            }
            clauses {
              equals {
                lhs {
                  designator {
                    name: "Element"
                  }
                }
                rhs {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          simple_member_access {
            field: "Element"
            object {
              identifier {
                name: "T"
              }
            }
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "A"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "x"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: ExternalImpl
      impl_type {
        tuple_literal {
          fields {
            int_type_literal {
            }
          }
          fields {
            int_type_literal {
            }
          }
        }
      }
      interface {
        where {
          base {
            identifier {
              name: "Container"
            }
          }
          clauses {
            rewrite {
              member_name: "Element"
              replacement {
                int_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        function {
          name {
            name: "Front"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              variable_definition {
                pattern {
                  tuple_pattern {
                    fields {
                      binding_pattern {
                        name: "a"
                        type {
                          expression_pattern {
                            expression {
                              int_type_literal {
                              }
                            }
                          }
                        }
                      }
                    }
                    fields {
                      binding_pattern {
                        name: "b"
                        type {
                          expression_pattern {
                            expression {
                              int_type_literal {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                init {
                  identifier {
                    name: "self"
                  }
                }
                is_returned: false
              }
            }
            statements {
              return_expression_statement {
                expression {
                  identifier {
                    name: "a"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "B"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      tuple_literal {
                        fields {
                          int_literal {
                            value: 1
                          }
                        }
                        fields {
                          int_literal {
                            value: 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
