compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name {
        name: "TwoTypes"
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "T"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "U"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "F"
      }
      deduced_parameters {
        name: "X"
        type {
          where {
            base {
              identifier {
                name: "TwoTypes"
              }
            }
            clauses {
              rewrite {
                member_name: "T"
                replacement {
                  designator {
                    name: "U"
                  }
                }
              }
            }
            clauses {
              rewrite {
                member_name: "U"
                replacement {
                  operator {
                    op: Ptr
                    arguments {
                      designator {
                        name: "U"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      param_pattern {
      }
      return_term {
        kind: Omitted
      }
      body {
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
