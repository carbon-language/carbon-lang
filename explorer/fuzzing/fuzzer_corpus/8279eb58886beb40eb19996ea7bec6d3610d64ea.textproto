compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "Vector"
      members {
        function {
          name: "Add"
          me_pattern {
            name: "me"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "Self"
                  }
                }
              }
            }
          }
          param_pattern {
            fields {
              binding_pattern {
                name: "b"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Self"
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Self"
              }
            }
          }
        }
      }
      members {
        function {
          name: "Scale"
          me_pattern {
            name: "me"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "Self"
                  }
                }
              }
            }
          }
          param_pattern {
            fields {
              binding_pattern {
                name: "v"
                type {
                  expression_pattern {
                    expression {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Self"
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "Point1"
      members {
        variable {
          binding {
            name: "x"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        variable {
          binding {
            name: "y"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        impl {
          kind: InternalImpl
          impl_type {
            identifier {
              name: "Point1"
            }
          }
          interface {
            identifier {
              name: "Vector"
            }
          }
          members {
            function {
              name: "Add"
              me_pattern {
                name: "me"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point1"
                      }
                    }
                  }
                }
              }
              param_pattern {
                fields {
                  binding_pattern {
                    name: "b"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "Point1"
                          }
                        }
                      }
                    }
                  }
                }
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "Point1"
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      struct_literal {
                        fields {
                          name: "x"
                          expression {
                            primitive_operator {
                              op: Add
                              arguments {
                                field_access {
                                  field: "x"
                                  aggregate {
                                    identifier {
                                      name: "me"
                                    }
                                  }
                                }
                              }
                              arguments {
                                field_access {
                                  field: "x"
                                  aggregate {
                                    identifier {
                                      name: "b"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        fields {
                          name: "y"
                          expression {
                            primitive_operator {
                              op: Add
                              arguments {
                                field_access {
                                  field: "y"
                                  aggregate {
                                    identifier {
                                      name: "me"
                                    }
                                  }
                                }
                              }
                              arguments {
                                field_access {
                                  field: "y"
                                  aggregate {
                                    identifier {
                                      name: "b"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name: "Scale"
              me_pattern {
                name: "me"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point1"
                      }
                    }
                  }
                }
              }
              param_pattern {
                fields {
                  binding_pattern {
                    name: "v"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "Point1"
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      struct_literal {
                        fields {
                          name: "x"
                          expression {
                            primitive_operator {
                              op: Mul
                              arguments {
                                field_access {
                                  field: "x"
                                  aggregate {
                                    identifier {
                                      name: "me"
                                    }
                                  }
                                }
                              }
                              arguments {
                                identifier {
                                  name: "v"
                                }
                              }
                            }
                          }
                        }
                        fields {
                          name: "y"
                          expression {
                            primitive_operator {
                              op: Mul
                              arguments {
                                field_access {
                                  field: "y"
                                  aggregate {
                                    identifier {
                                      name: "me"
                                    }
                                  }
                                }
                              }
                              arguments {
                                identifier {
                                  name: "v"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name: "Point2"
      members {
        variable {
          binding {
            name: "x"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        variable {
          binding {
            name: "y"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      members {
        impl {
          kind: InternalImpl
          impl_type {
            identifier {
              name: "Point2"
            }
          }
          interface {
            identifier {
              name: "Vector"
            }
          }
          members {
            function {
              name: "Add"
              me_pattern {
                name: "me"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point2"
                      }
                    }
                  }
                }
              }
              param_pattern {
                fields {
                  binding_pattern {
                    name: "b"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "Point2"
                          }
                        }
                      }
                    }
                  }
                }
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "Point2"
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      struct_literal {
                        fields {
                          name: "x"
                          expression {
                            primitive_operator {
                              op: Add
                              arguments {
                                primitive_operator {
                                  op: Add
                                  arguments {
                                    field_access {
                                      field: "x"
                                      aggregate {
                                        identifier {
                                          name: "me"
                                        }
                                      }
                                    }
                                  }
                                  arguments {
                                    field_access {
                                      field: "x"
                                      aggregate {
                                        identifier {
                                          name: "b"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              arguments {
                                int_literal {
                                  value: 1
                                }
                              }
                            }
                          }
                        }
                        fields {
                          name: "y"
                          expression {
                            primitive_operator {
                              op: Add
                              arguments {
                                primitive_operator {
                                  op: Add
                                  arguments {
                                    field_access {
                                      field: "y"
                                      aggregate {
                                        identifier {
                                          name: "me"
                                        }
                                      }
                                    }
                                  }
                                  arguments {
                                    field_access {
                                      field: "y"
                                      aggregate {
                                        identifier {
                                          name: "b"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              arguments {
                                int_literal {
                                  value: 1
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name: "Scale"
              me_pattern {
                name: "me"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point2"
                      }
                    }
                  }
                }
              }
              param_pattern {
                fields {
                  binding_pattern {
                    name: "v"
                    type {
                      expression_pattern {
                        expression {
                          int_type_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "Point2"
                  }
                }
              }
              body {
                statements {
                  return_statement {
                    expression {
                      struct_literal {
                        fields {
                          name: "x"
                          expression {
                            primitive_operator {
                              op: Mul
                              arguments {
                                primitive_operator {
                                  op: Mul
                                  arguments {
                                    field_access {
                                      field: "x"
                                      aggregate {
                                        identifier {
                                          name: "me"
                                        }
                                      }
                                    }
                                  }
                                  arguments {
                                    identifier {
                                      name: "v"
                                    }
                                  }
                                }
                              }
                              arguments {
                                int_literal {
                                  value: 2
                                }
                              }
                            }
                          }
                        }
                        fields {
                          name: "y"
                          expression {
                            primitive_operator {
                              op: Mul
                              arguments {
                                primitive_operator {
                                  op: Mul
                                  arguments {
                                    field_access {
                                      field: "y"
                                      aggregate {
                                        identifier {
                                          name: "me"
                                        }
                                      }
                                    }
                                  }
                                  arguments {
                                    identifier {
                                      name: "v"
                                    }
                                  }
                                }
                              }
                              arguments {
                                int_literal {
                                  value: 2
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "ScaleGeneric"
      deduced_parameters {
        name: "U"
        type {
          identifier {
            name: "Vector"
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "c"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "U"
                  }
                }
              }
            }
          }
        }
        fields {
          binding_pattern {
            name: "s"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          identifier {
            name: "U"
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              call {
                function {
                  field_access {
                    field: "Scale"
                    aggregate {
                      identifier {
                        name: "c"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "s"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "AddAndScaleGeneric"
      deduced_parameters {
        name: "T"
        type {
          identifier {
            name: "Vector"
          }
        }
      }
      deduced_parameters {
        name: "V"
        type {
          identifier {
            name: "Vector"
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "a"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
        fields {
          binding_pattern {
            name: "b"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "V"
                  }
                }
              }
            }
          }
        }
        fields {
          binding_pattern {
            name: "s"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          tuple_literal {
            fields {
              identifier {
                name: "T"
              }
            }
            fields {
              identifier {
                name: "V"
              }
            }
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              tuple_literal {
                fields {
                  call {
                    function {
                      identifier {
                        name: "ScaleGeneric"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          call {
                            function {
                              field_access {
                                field: "Add"
                                aggregate {
                                  identifier {
                                    name: "a"
                                  }
                                }
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "a"
                                  }
                                }
                              }
                            }
                          }
                        }
                        fields {
                          identifier {
                            name: "s"
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  call {
                    function {
                      identifier {
                        name: "ScaleGeneric"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          call {
                            function {
                              field_access {
                                field: "Add"
                                aggregate {
                                  identifier {
                                    name: "b"
                                  }
                                }
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  identifier {
                                    name: "b"
                                  }
                                }
                              }
                            }
                          }
                        }
                        fields {
                          identifier {
                            name: "s"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "a"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point1"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "x"
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
                fields {
                  name: "y"
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "b"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Point2"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "x"
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
                fields {
                  name: "y"
                  expression {
                    int_literal {
                      value: 3
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              tuple_pattern {
                fields {
                  binding_pattern {
                    name: "p"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "Point1"
                          }
                        }
                      }
                    }
                  }
                }
                fields {
                  binding_pattern {
                    name: "q"
                    type {
                      expression_pattern {
                        expression {
                          identifier {
                            name: "Point2"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              call {
                function {
                  identifier {
                    name: "AddAndScaleGeneric"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "a"
                      }
                    }
                    fields {
                      identifier {
                        name: "b"
                      }
                    }
                    fields {
                      int_literal {
                        value: 5
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_statement {
            expression {
              primitive_operator {
                op: Sub
                arguments {
                  primitive_operator {
                    op: Sub
                    arguments {
                      field_access {
                        field: "x"
                        aggregate {
                          identifier {
                            name: "q"
                          }
                        }
                      }
                    }
                    arguments {
                      field_access {
                        field: "x"
                        aggregate {
                          identifier {
                            name: "p"
                          }
                        }
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 40
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
