compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    alias {
      name: "TypeAlias"
      target {
        int_type_literal {
        }
      }
    }
  }
  declarations {
    function {
      name: "Function"
      param_pattern {
        fields {
          binding_pattern {
            name: "a"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
        fields {
          binding_pattern {
            name: "b"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "TypeAlias"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              operator {
                op: Add
                arguments {
                  identifier {
                    name: "a"
                  }
                }
                arguments {
                  identifier {
                    name: "b"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "GenericFunction"
      deduced_parameters {
        name: "T"
        type {
          type_type_literal {
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          identifier {
            name: "T"
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              identifier {
                name: "x"
              }
            }
          }
        }
      }
    }
  }
  declarations {
    alias {
      name: "FunctionAlias"
      target {
        identifier {
          name: "Function"
        }
      }
    }
  }
  declarations {
    alias {
      name: "GenericFunctionAlias"
      target {
        identifier {
          name: "GenericFunction"
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              operator {
                op: Add
                arguments {
                  call {
                    function {
                      identifier {
                        name: "FunctionAlias"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          int_literal {
                            value: 1
                          }
                        }
                        fields {
                          int_literal {
                            value: 2
                          }
                        }
                      }
                    }
                  }
                }
                arguments {
                  call {
                    function {
                      identifier {
                        name: "GenericFunctionAlias"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          int_literal {
                            value: 4
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
