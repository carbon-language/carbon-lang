compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name {
        name: "Apple"
      }
      members {
        function {
          name {
            name: "F"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "T"
              }
            }
          }
        }
      }
    }
  }
  declarations {
    interface {
      name {
        name: "Banana"
      }
      members {
        interface_impl {
          impl_type {
            identifier {
              name: "Self"
            }
          }
          constraint {
            call {
              function {
                identifier {
                  name: "Apple"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    int_type_literal {
                    }
                  }
                }
              }
            }
          }
        }
      }
      members {
        function {
          name {
            name: "G"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Omitted
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "Carrot"
      }
      members {
        variable {
          binding {
            name: "n"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: ExternalImpl
      impl_type {
        identifier {
          name: "Carrot"
        }
      }
      interface {
        call {
          function {
            identifier {
              name: "Apple"
            }
          }
          argument {
            tuple_literal {
              fields {
                int_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        function {
          name {
            name: "F"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              int_type_literal {
              }
            }
          }
          body {
            statements {
              return_expression_statement {
                expression {
                  simple_member_access {
                    field: "n"
                    object {
                      identifier {
                        name: "self"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: ExternalImpl
      impl_type {
        identifier {
          name: "Carrot"
        }
      }
      interface {
        identifier {
          name: "Banana"
        }
      }
      members {
        function {
          name {
            name: "G"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Omitted
          }
          body {
            statements {
              expression_statement {
                expression {
                  call {
                    function {
                      identifier {
                        name: "Print"
                      }
                    }
                    argument {
                      tuple_literal {
                        fields {
                          string_literal {
                            value: "Carrot.G"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "H"
      }
      deduced_parameters {
        name: "T"
        type {
          identifier {
            name: "Banana"
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "G"
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  compound_member_access {
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "F"
                        object {
                          call {
                            function {
                              identifier {
                                name: "Apple"
                              }
                            }
                            argument {
                              tuple_literal {
                                fields {
                                  int_type_literal {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "c"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Carrot"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "n"
                  expression {
                    int_literal {
                      value: 5
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "H"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "c"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
