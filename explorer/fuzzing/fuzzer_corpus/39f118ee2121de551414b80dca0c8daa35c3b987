compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "I"
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        int_type_literal {
        }
      }
      interface {
        identifier {
          name: "I"
        }
      }
    }
  }
  declarations {
    function {
      name: "F"
      param_pattern {
        fields {
          generic_binding {
            name: "A"
            type {
              int_type_literal {
              }
            }
          }
        }
        fields {
          generic_binding {
            name: "B"
            type {
              int_type_literal {
              }
            }
          }
        }
        fields {
          generic_binding {
            name: "C"
            type {
              int_type_literal {
              }
            }
          }
        }
        fields {
          generic_binding {
            name: "D"
            type {
              int_type_literal {
              }
            }
          }
        }
        fields {
          generic_binding {
            name: "E"
            type {
              int_type_literal {
              }
            }
          }
        }
        fields {
          generic_binding {
            name: "T"
            type {
              where {
                base {
                  identifier {
                    name: "I"
                  }
                }
                clauses {
                  equals {
                    lhs {
                      identifier {
                        name: "A"
                      }
                    }
                    rhs {
                      identifier {
                        name: "B"
                      }
                    }
                  }
                }
                clauses {
                  equals {
                    lhs {
                      identifier {
                        name: "C"
                      }
                    }
                    rhs {
                      identifier {
                        name: "D"
                      }
                    }
                  }
                }
                clauses {
                  equals {
                    lhs {
                      identifier {
                        name: "C"
                      }
                    }
                    rhs {
                      identifier {
                        name: "E"
                      }
                    }
                  }
                }
                clauses {
                  equals {
                    lhs {
                      identifier {
                        name: "B"
                      }
                    }
                    rhs {
                      identifier {
                        name: "D"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Omitted
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "F"
                    object {
                      identifier {
                        name: "T"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "F"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                    fields {
                      int_literal {
                        value: 1
                      }
                    }
                    fields {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
