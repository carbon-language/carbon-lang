compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    class_declaration {
      name: "A"
      members {
        variable {
          binding {
            name: "n"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    impl {
      kind: InternalImpl
      impl_type {
        int_type_literal {
        }
      }
      interface {
        call {
          function {
            identifier {
              name: "ImplicitAs"
            }
          }
          argument {
            tuple_literal {
              fields {
                identifier {
                  name: "A"
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "Convert"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "A"
              }
            }
          }
          body {
            statements {
              return_statement {
                expression {
                  struct_literal {
                    fields {
                      name: "n"
                      expression {
                        identifier {
                          name: "me"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    variable {
      binding {
        name: "a"
        type {
          expression_pattern {
            expression {
              identifier {
                name: "A"
              }
            }
          }
        }
      }
      initializer {
        int_literal {
          value: 5
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_statement {
            expression {
              simple_member_access {
                field: "n"
                object {
                  identifier {
                    name: "a"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
