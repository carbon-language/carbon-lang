compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name: "HasThreeTypes"
      members {
        let {
          pattern {
            generic_binding {
              name: "A"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "B"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "C"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        function {
          name: "Make"
          me_pattern {
            binding_pattern {
              name: "me"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              tuple_literal {
                fields {
                  identifier {
                    name: "A"
                  }
                }
                fields {
                  identifier {
                    name: "B"
                  }
                }
                fields {
                  identifier {
                    name: "C"
                  }
                }
              }
            }
          }
        }
      }
      self {
        name: "Self"
        type {
          type_type_literal {
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "F"
      deduced_parameters {
        name: "T"
        type {
          type_type_literal {
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "T"
                      }
                    }
                    fields {
                      identifier {
                        name: "T"
                      }
                    }
                    fields {
                      identifier {
                        name: "T"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Omitted
      }
    }
  }
  declarations {
    function {
      name: "G"
      deduced_parameters {
        name: "X"
        type {
          where {
            base {
              identifier {
                name: "HasThreeTypes"
              }
            }
            clauses {
              equals {
                lhs {
                  designator {
                    name: "A"
                  }
                }
                rhs {
                  designator {
                    name: "B"
                  }
                }
              }
            }
            clauses {
              equals {
                lhs {
                  designator {
                    name: "B"
                  }
                }
                rhs {
                  designator {
                    name: "C"
                  }
                }
              }
            }
            clauses {
              equals {
                lhs {
                  designator {
                    name: "C"
                  }
                }
                rhs {
                  designator {
                    name: "A"
                  }
                }
              }
            }
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "X"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Omitted
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "F"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      call {
                        function {
                          simple_member_access {
                            field: "Make"
                            object {
                              identifier {
                                name: "x"
                              }
                            }
                          }
                        }
                        argument {
                          tuple_literal {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name: "Main"
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
