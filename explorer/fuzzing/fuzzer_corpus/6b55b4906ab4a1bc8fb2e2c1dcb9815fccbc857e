compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftLeft
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                    arguments {
                      int_literal {
                        value: 0
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 1
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftLeft
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                    arguments {
                      int_literal {
                        value: 3
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 8
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 2
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftLeft
                    arguments {
                      int_literal {
                        value: 0
                      }
                    }
                    arguments {
                      int_literal {
                        value: 3
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 0
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 3
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftLeft
                    arguments {
                      int_literal {
                        value: 3
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 6
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 4
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftLeft
                    arguments {
                      operator {
                        op: Neg
                        arguments {
                          int_literal {
                            value: 1
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 2
                      }
                    }
                  }
                }
                arguments {
                  operator {
                    op: Neg
                    arguments {
                      int_literal {
                        value: 4
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 5
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftRight
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                    arguments {
                      int_literal {
                        value: 0
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 6
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftRight
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 0
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 7
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftRight
                    arguments {
                      int_literal {
                        value: 3
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
                arguments {
                  int_literal {
                    value: 1
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 8
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftRight
                    arguments {
                      operator {
                        op: Neg
                        arguments {
                          int_literal {
                            value: 1
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
                arguments {
                  operator {
                    op: Neg
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 9
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          if_statement {
            condition {
              operator {
                op: NotEq
                arguments {
                  operator {
                    op: BitShiftRight
                    arguments {
                      operator {
                        op: Neg
                        arguments {
                          int_literal {
                            value: 2
                          }
                        }
                      }
                    }
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
                arguments {
                  operator {
                    op: Neg
                    arguments {
                      int_literal {
                        value: 1
                      }
                    }
                  }
                }
              }
            }
            then_block {
              statements {
                return_expression_statement {
                  expression {
                    int_literal {
                      value: 10
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "n"
                type {
                  expression_pattern {
                    expression {
                      int_type_literal {
                      }
                    }
                  }
                }
              }
            }
            init {
              int_literal {
                value: 1
              }
            }
            is_returned: false
          }
        }
        statements {
          assign {
            lhs {
              identifier {
                name: "n"
              }
            }
            rhs {
              int_literal {
                value: 3
              }
            }
            op: ShiftLeft
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "{0}"
                      }
                    }
                    fields {
                      identifier {
                        name: "n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          assign {
            lhs {
              identifier {
                name: "n"
              }
            }
            rhs {
              int_literal {
                value: 1
              }
            }
            op: ShiftRight
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "{0}"
                      }
                    }
                    fields {
                      identifier {
                        name: "n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
