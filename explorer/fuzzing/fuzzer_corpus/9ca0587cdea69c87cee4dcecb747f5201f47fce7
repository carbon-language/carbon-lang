compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    class_declaration {
      name {
        name: "C"
      }
      members {
        variable {
          binding {
            name: "val"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "D"
      }
      members {
        variable {
          binding {
            name: "val"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "E"
      }
      members {
        variable {
          binding {
            name: "val"
            type {
              expression_pattern {
                expression {
                  int_type_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Foo"
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "c"
            type {
              expression_pattern {
                expression {
                  operator {
                    op: Ptr
                    arguments {
                      identifier {
                        name: "C"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              simple_member_access {
                field: "val"
                object {
                  operator {
                    op: Deref
                    arguments {
                      identifier {
                        name: "c"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "e"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "E"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
                fields {
                  name: "val"
                  expression {
                    int_literal {
                      value: 3
                    }
                  }
                }
                fields {
                  name: "base"
                  expression {
                    struct_literal {
                      fields {
                        name: "val"
                        expression {
                          int_literal {
                            value: 2
                          }
                        }
                      }
                      fields {
                        name: "base"
                        expression {
                          struct_literal {
                            fields {
                              name: "val"
                              expression {
                                int_literal {
                                  value: 1
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "d"
                type {
                  expression_pattern {
                    expression {
                      operator {
                        op: Ptr
                        arguments {
                          identifier {
                            name: "D"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              operator {
                op: AddressOf
                arguments {
                  identifier {
                    name: "e"
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "c1"
                type {
                  expression_pattern {
                    expression {
                      operator {
                        op: Ptr
                        arguments {
                          identifier {
                            name: "C"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              operator {
                op: AddressOf
                arguments {
                  identifier {
                    name: "e"
                  }
                }
              }
            }
            is_returned: false
          }
        }
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "c2"
                type {
                  expression_pattern {
                    expression {
                      operator {
                        op: Ptr
                        arguments {
                          identifier {
                            name: "C"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            init {
              identifier {
                name: "d"
              }
            }
            is_returned: false
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "(*c1).val: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "val"
                        object {
                          operator {
                            op: Deref
                            arguments {
                              identifier {
                                name: "c1"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "(*c2).val: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "val"
                        object {
                          operator {
                            op: Deref
                            arguments {
                              identifier {
                                name: "c2"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "(*d).val: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "val"
                        object {
                          operator {
                            op: Deref
                            arguments {
                              identifier {
                                name: "d"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "Print"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      string_literal {
                        value: "e.val: {0}"
                      }
                    }
                    fields {
                      simple_member_access {
                        field: "val"
                        object {
                          identifier {
                            name: "e"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
