compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name {
        name: "MyHashable"
      }
      members {
        let {
          pattern {
            generic_binding {
              name: "Result"
              type {
                type_type_literal {
                }
              }
            }
          }
        }
      }
      members {
        function {
          name {
            name: "Hash"
          }
          self_pattern {
            binding_pattern {
              name: "self"
              type {
                expression_pattern {
                  expression {
                    identifier {
                      name: "Self"
                    }
                  }
                }
              }
            }
          }
          param_pattern {
          }
          return_term {
            kind: Expression
            type {
              identifier {
                name: "Result"
              }
            }
          }
        }
      }
    }
  }
  declarations {
    constraint {
      name {
        name: "HashToIntConvertible"
      }
      members {
        interface_impl {
          impl_type {
            identifier {
              name: "Self"
            }
          }
          constraint {
            identifier {
              name: "MyHashable"
            }
          }
        }
      }
      members {
        interface_impl {
          impl_type {
            compound_member_access {
              object {
                identifier {
                  name: "Self"
                }
              }
              path {
                simple_member_access {
                  field: "Result"
                  object {
                    identifier {
                      name: "MyHashable"
                    }
                  }
                }
              }
            }
          }
          constraint {
            call {
              function {
                identifier {
                  name: "ImplicitAs"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    int_type_literal {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "MyHashValue"
      }
      members {
        impl {
          kind: ExternalImpl
          impl_type {
            identifier {
              name: "Self"
            }
          }
          interface {
            call {
              function {
                identifier {
                  name: "ImplicitAs"
                }
              }
              argument {
                tuple_literal {
                  fields {
                    int_type_literal {
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name {
                name: "Convert"
              }
              self_pattern {
                binding_pattern {
                  name: "self"
                  type {
                    expression_pattern {
                      expression {
                        identifier {
                          name: "Self"
                        }
                      }
                    }
                  }
                }
              }
              param_pattern {
              }
              return_term {
                kind: Expression
                type {
                  int_type_literal {
                  }
                }
              }
              body {
                statements {
                  return_expression_statement {
                    expression {
                      int_literal {
                        value: 4
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    class_declaration {
      name {
        name: "Widget"
      }
      members {
        impl {
          kind: ExternalImpl
          impl_type {
            identifier {
              name: "Self"
            }
          }
          interface {
            where {
              base {
                identifier {
                  name: "MyHashable"
                }
              }
              clauses {
                rewrite {
                  member_name: "Result"
                  replacement {
                    identifier {
                      name: "MyHashValue"
                    }
                  }
                }
              }
            }
          }
          members {
            function {
              name {
                name: "Hash"
              }
              self_pattern {
                binding_pattern {
                  name: "self"
                  type {
                    expression_pattern {
                      expression {
                        identifier {
                          name: "Self"
                        }
                      }
                    }
                  }
                }
              }
              param_pattern {
              }
              return_term {
                kind: Expression
                type {
                  identifier {
                    name: "MyHashValue"
                  }
                }
              }
              body {
                statements {
                  return_expression_statement {
                    expression {
                      struct_literal {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "MakeSmallHash"
      }
      deduced_parameters {
        name: "T"
        type {
          identifier {
            name: "HashToIntConvertible"
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  compound_member_access {
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "Hash"
                        object {
                          identifier {
                            name: "MyHashable"
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          variable_definition {
            pattern {
              binding_pattern {
                name: "w"
                type {
                  expression_pattern {
                    expression {
                      identifier {
                        name: "Widget"
                      }
                    }
                  }
                }
              }
            }
            init {
              struct_literal {
              }
            }
            is_returned: false
          }
        }
        statements {
          return_expression_statement {
            expression {
              call {
                function {
                  identifier {
                    name: "MakeSmallHash"
                  }
                }
                argument {
                  tuple_literal {
                    fields {
                      identifier {
                        name: "w"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
