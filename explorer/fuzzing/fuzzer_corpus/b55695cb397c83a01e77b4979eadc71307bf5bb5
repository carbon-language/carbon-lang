compilation_unit {
  package_statement {
    package_name: "ExplorerTest"
  }
  is_api: true
  declarations {
    interface {
      name {
        name: "HasFoo"
      }
      members {
        function {
          name {
            name: "Foo"
          }
          param_pattern {
          }
          return_term {
            kind: Omitted
          }
        }
      }
    }
  }
  declarations {
    constraint {
      name {
        name: "ImplAsHasFoo"
      }
      members {
        interface_impl {
          impl_type {
            identifier {
              name: "Self"
            }
          }
          constraint {
            identifier {
              name: "HasFoo"
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "CallFoo"
      }
      deduced_parameters {
        name: "T"
        type {
          identifier {
            name: "ImplAsHasFoo"
          }
        }
      }
      param_pattern {
        fields {
          binding_pattern {
            name: "x"
            type {
              expression_pattern {
                expression {
                  identifier {
                    name: "T"
                  }
                }
              }
            }
          }
        }
      }
      return_term {
        kind: Omitted
      }
      body {
        statements {
          expression_statement {
            expression {
              call {
                function {
                  compound_member_access {
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                    path {
                      simple_member_access {
                        field: "Foo"
                        object {
                          identifier {
                            name: "HasFoo"
                          }
                        }
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
        statements {
          expression_statement {
            expression {
              call {
                function {
                  simple_member_access {
                    field: "Foo"
                    object {
                      identifier {
                        name: "x"
                      }
                    }
                  }
                }
                argument {
                  tuple_literal {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function {
      name {
        name: "Main"
      }
      param_pattern {
      }
      return_term {
        kind: Expression
        type {
          int_type_literal {
          }
        }
      }
      body {
        statements {
          return_expression_statement {
            expression {
              int_literal {
                value: 0
              }
            }
          }
        }
      }
    }
  }
}
