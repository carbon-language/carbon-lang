// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

// -----------------------------------------------------------------------------
// Bison Configuration
// -----------------------------------------------------------------------------

%require "3.2"
%language "c++"

// We don't need a separate header for Bison locations.
%define api.location.file none

// Use a type-safe C++ variant for semantic values
%define api.value.type variant

// Have Bison generate the functions ‘make_TEXT’ and ‘make_NUMBER’, but also
// ‘make_YYEOF’, for the end of input.
%define api.token.constructor

// Generate the parser as `::Carbon::Parser`.
%define api.namespace { Carbon }
%define api.parser.class { Parser }

// Make parse error messages more detailed
%define parse.error verbose

// Enable support for parser debugging
%define parse.trace true

// Generate location structs.
%locations

// Parameters to the parser and lexer.
//
// Parameters to the parser are stored therein as protected data members, and
// thus available to its methods.

// "inout" parameters passed to both the parser and the lexer.
%param {Nonnull<Arena*> arena}
%param {yyscan_t yyscanner}
%param {ParseAndLexContext& pl_context}

// "out" parameter passed to the parser, where the AST is written.
%parse-param {std::optional<AST>* ast}

// No shift-reduce conflicts are expected.
// See README.md#precedence-and-associativity for a description of how
// operator precedence is expressed.
%expect 0

// -----------------------------------------------------------------------------

%code top {
  #include <algorithm>
  #include <cstdarg>
  #include <cstdio>
  #include <cstdlib>
  #include <vector>

  #include "explorer/syntax/parse_and_lex_context.h"
  #include "llvm/ADT/StringExtras.h"
  #include "llvm/Support/FormatVariadic.h"
  #include "llvm/Support/raw_ostream.h"
}  // %code top

%code requires {
  #include <optional>

  #include "explorer/ast/ast.h"
  #include "explorer/ast/declaration.h"
  #include "explorer/ast/expression.h"
  #include "explorer/ast/paren_contents.h"
  #include "explorer/ast/pattern.h"
  #include "explorer/ast/value_category.h"
  #include "explorer/common/arena.h"
  #include "explorer/common/nonnull.h"
  #include "explorer/syntax/bison_wrap.h"

  namespace Carbon {
  class ParseAndLexContext;
  }  // namespace Carbon

  typedef void* yyscan_t;
}  // %code requires

%code {
  void Carbon::Parser::error(const location_type&, const std::string& message) {
    pl_context.RecordSyntaxError(message);
  }
}  // %code

%token <int> integer_literal
%token <std::string> identifier
%token <IntrinsicExpression::Intrinsic> intrinsic_identifier
%token <std::string> sized_type_literal
%token <std::string> string_literal
%type <std::string> designator
%type <ImplKind> impl_kind
%type <Nonnull<Expression*>> impl_type
%type <std::pair<LibraryName, bool>> package_directive
%type <LibraryName> import_directive
%type <std::vector<LibraryName>> import_directives
%type <std::string> optional_library_path
%type <bool> api_or_impl
%type <ClassExtensibility> class_declaration_extensibility
%type <std::optional<Nonnull<Expression*>>> class_declaration_extends
%type <Nonnull<Declaration*>> declaration
%type <Nonnull<FunctionDeclaration*>> function_declaration
%type <Nonnull<DestructorDeclaration*>> destructor_declaration;
%type <Nonnull<MixDeclaration*>> mix_declaration
%type <Nonnull<AliasDeclaration*>> alias_declaration
%type <std::vector<Nonnull<Declaration*>>> declaration_list
%type <std::vector<Nonnull<Declaration*>>> class_body
%type <std::vector<Nonnull<Declaration*>>> mixin_body
%type <std::vector<Nonnull<Declaration*>>> interface_body
%type <std::vector<Nonnull<Declaration*>>> impl_body
%type <Nonnull<Statement*>> statement
%type <Nonnull<If*>> if_statement
%type <std::optional<Nonnull<Block*>>> optional_else
%type <std::pair<Nonnull<Expression*>, bool>> return_expression
%type <Nonnull<Block*>> block
%type <std::vector<Nonnull<Statement*>>> statement_list
%type <Nonnull<Expression*>> primary_expression
%type <Nonnull<Expression*>> postfix_expression
%type <Nonnull<Expression*>> ref_deref_expression
%type <Nonnull<Expression*>> type_expression
%type <Nonnull<Expression*>> fn_type_expression
%type <Nonnull<Expression*>> minus_expression
%type <Nonnull<Expression*>> complement_expression
%type <Nonnull<Expression*>> unary_expression
%type <Nonnull<Expression*>> simple_binary_operand
%type <Nonnull<Expression*>> multiplicative_lhs
%type <Nonnull<Expression*>> multiplicative_expression
%type <Nonnull<Expression*>> additive_operand
%type <Nonnull<Expression*>> additive_lhs
%type <Nonnull<Expression*>> additive_expression
%type <Nonnull<Expression*>> modulo_expression
%type <Nonnull<Expression*>> bitwise_and_lhs
%type <Nonnull<Expression*>> bitwise_and_expression
%type <Nonnull<Expression*>> bitwise_or_lhs
%type <Nonnull<Expression*>> bitwise_or_expression
%type <Nonnull<Expression*>> bitwise_xor_lhs
%type <Nonnull<Expression*>> bitwise_xor_expression
%type <Nonnull<Expression*>> bitwise_expression
%type <Nonnull<Expression*>> bit_shift_expression
%type <Nonnull<Expression*>> as_expression
%type <Nonnull<Expression*>> unimpl_expression
%type <Nonnull<Expression*>> value_expression
%type <Nonnull<Expression*>> comparison_operand
%type <Nonnull<Expression*>> comparison_expression
%type <Nonnull<Expression*>> not_expression
%type <Nonnull<Expression*>> predicate_expression
%type <Nonnull<Expression*>> and_or_operand
%type <Nonnull<Expression*>> and_lhs
%type <Nonnull<Expression*>> and_expression
%type <Nonnull<Expression*>> or_lhs
%type <Nonnull<Expression*>> or_expression
%type <Nonnull<WhereClause*>> where_clause
%type <std::vector<Nonnull<WhereClause*>>> where_clause_list
%type <Nonnull<Expression*>> where_expression
%type <Nonnull<Expression*>> type_or_where_expression
%type <Nonnull<Expression*>> statement_expression
%type <Nonnull<Expression*>> if_expression
%type <Nonnull<Expression*>> expression
%type <Nonnull<Expression*>> mixin_import
%type <Nonnull<GenericBinding*>> generic_binding
%type <Nonnull<Pattern*>> deduced_param
%type <std::vector<Nonnull<AstNode*>>> deduced_params
%type <std::vector<Nonnull<AstNode*>>> impl_deduced_params
%type <std::vector<Nonnull<AstNode*>>> deduced_param_list
%type <Nonnull<Pattern*>> pattern
%type <Nonnull<Pattern*>> non_expression_pattern
%type <BisonWrap<ReturnTerm>> return_term
%type <Nonnull<Expression*>> paren_expression
%type <Nonnull<StructLiteral*>> struct_literal
%type <std::vector<FieldInitializer>> struct_literal_contents
%type <Nonnull<StructTypeLiteral*>> struct_type_literal
%type <std::vector<FieldInitializer>> struct_type_literal_contents
%type <Nonnull<TupleLiteral*>> tuple
%type <std::string> binding_lhs
%type <Nonnull<BindingPattern*>> variable_declaration
%type <ParenContents<Expression>> paren_expression_base
%type <ParenContents<Expression>> paren_expression_contents
%type <Nonnull<Pattern*>> paren_pattern
%type <Nonnull<TuplePattern*>> tuple_pattern
%type <Nonnull<TuplePattern*>> maybe_empty_tuple_pattern
%type <std::optional<Nonnull<TuplePattern*>>> type_params
%type <ParenContents<Pattern>> paren_pattern_base
%type <ParenContents<Pattern>> paren_pattern_contents
%type <Nonnull<AlternativeSignature*>> alternative
%type <std::vector<Nonnull<AlternativeSignature*>>> alternative_list
%type <std::vector<Nonnull<AlternativeSignature*>>> alternative_list_contents
%type <BisonWrap<Match::Clause>> clause
%type <std::vector<Match::Clause>> clause_list
%type <Operator> comparison_operator;

%token
  // Most tokens have their spelling defined in lexer.lpp.
  // table-begin
  ABSTRACT
  ADDR
  ALIAS
  AMPERSAND
  AND
  API
  ARROW
  AS
  AUTO
  AWAIT
  BASE
  BOOL
  BREAK
  CARET
  CASE
  CHOICE
  CLASS
  COLON
  COLON_BANG
  COMMA
  CONTINUATION
  CONTINUATION_TYPE
  CONTINUE
  DEFAULT
  DESTRUCTOR
  DOUBLE_ARROW
  ELSE
  EQUAL
  EQUAL_EQUAL
  EXTENDS
  EXTERNAL
  FALSE
  FN
  FN_TYPE
  FOR
  FORALL
  GREATER
  GREATER_EQUAL
  GREATER_GREATER
  IF
  IMPL
  IMPORT
  IN
  INTERFACE
  IS
  LEFT_CURLY_BRACE
  LEFT_PARENTHESIS
  LEFT_SQUARE_BRACKET
  LESS
  LESS_EQUAL
  LESS_LESS
  LET
  LIBRARY
  MATCH
  MINUS
  MIX
  MIXIN
  NOT
  NOT_EQUAL
  OR
  PACKAGE
  PERCENT
  PERIOD
  PIPE
  PLUS
  RETURN
  RETURNED
  RIGHT_CURLY_BRACE
  RIGHT_PARENTHESIS
  RIGHT_SQUARE_BRACKET
  RUN
  SELF
  SEMICOLON
  SLASH
  STRING
  THEN
  TRUE
  TYPE
  UNDERSCORE
  UNIMPL_EXAMPLE
  VAR
  WHERE
  WHILE
  // table-end
  // Used to track EOF.
  END_OF_FILE 0
  // Only used for precedence.
  FNARROW "-> in return type"
  // The lexer determines the arity and fixity of each `*` based on whitespace
  // and adjacent tokens. UNARY_STAR indicates that the operator is unary but
  // could be either prefix or postfix.
  UNARY_STAR "unary *"
  PREFIX_STAR "prefix *"
  POSTFIX_STAR "postfix *"
  BINARY_STAR "binary *"
;

%start input
%%
input: package_directive import_directives declaration_list
    {
      *ast = AST({.package = $package_directive.first,
                  .is_api = $package_directive.second,
                  .imports = std::move($import_directives),
                  .declarations = std::move($declaration_list)});
    }
;
package_directive:
  PACKAGE identifier optional_library_path api_or_impl SEMICOLON
    { $package_directive = {LibraryName({.package = $identifier, .path = $optional_library_path}), $api_or_impl}; }
;
import_directive:
  IMPORT identifier optional_library_path SEMICOLON
    { $import_directive = LibraryName({.package = $identifier, .path = $optional_library_path}); }
;
import_directives:
  // Empty
    { $$ = std::vector<LibraryName>(); }
| import_directives[idlist] import_directive
    {
      $$ = std::move($idlist);
      $$.push_back($import_directive);
    }
;
optional_library_path:
  // Empty
    { $optional_library_path = ""; }
| LIBRARY string_literal
    { $optional_library_path = $string_literal; }
;
api_or_impl:
  API
    { $api_or_impl = true; }
| IMPL
    { $api_or_impl = false; }
;
primary_expression:
  identifier
    { $primary_expression = arena->New<IdentifierExpression>(pl_context.source_loc(), $identifier); }
| designator
    {
      // `.Foo` is rewritten to `.Self.Foo`.
      $primary_expression = arena->New<SimpleMemberAccessExpression>(
          pl_context.source_loc(),
          arena->New<DotSelfExpression>(pl_context.source_loc()), $designator);
    }
| PERIOD SELF
    { $primary_expression = arena->New<DotSelfExpression>(pl_context.source_loc()); }
| integer_literal
    { $primary_expression = arena->New<IntLiteral>(pl_context.source_loc(), $integer_literal); }
| string_literal
    { $primary_expression = arena->New<StringLiteral>(pl_context.source_loc(), $string_literal); }
| TRUE
    { $primary_expression = arena->New<BoolLiteral>(pl_context.source_loc(), true); }
| FALSE
    { $primary_expression = arena->New<BoolLiteral>(pl_context.source_loc(), false); }
| sized_type_literal
    {
      int val = 0;
      if (!llvm::to_integer(llvm::StringRef($sized_type_literal).substr(1), val)) {
        pl_context.RecordSyntaxError(
            llvm::formatv("Invalid type literal: {0}", $sized_type_literal));
        YYERROR;
      } else if ($sized_type_literal[0] != 'i' || val != 32) {
        pl_context.RecordSyntaxError(
            llvm::formatv("Only i32 is supported for now: {0}", $sized_type_literal));
        YYERROR;
      } else {
        $primary_expression = arena->New<IntTypeLiteral>(pl_context.source_loc());
      }
    }
| SELF
    // TODO: Should we create a new TypeLiteral for `Self`?
    { $primary_expression = arena->New<IdentifierExpression>(pl_context.source_loc(), "Self"); }
| STRING
    { $primary_expression = arena->New<StringTypeLiteral>(pl_context.source_loc()); }
| BOOL
    { $primary_expression = arena->New<BoolTypeLiteral>(pl_context.source_loc()); }
| TYPE
    { $primary_expression = arena->New<TypeTypeLiteral>(pl_context.source_loc()); }
| CONTINUATION_TYPE
    { $primary_expression = arena->New<ContinuationTypeLiteral>(pl_context.source_loc()); }
| paren_expression { $primary_expression = $paren_expression; }
| struct_literal { $primary_expression = $struct_literal; }
| struct_type_literal { $primary_expression = $struct_type_literal; }
| LEFT_SQUARE_BRACKET expression[exp1] SEMICOLON expression[exp2] RIGHT_SQUARE_BRACKET
    { $primary_expression = arena->New<ArrayTypeLiteral>(pl_context.source_loc(), $exp1, $exp2); }
;
postfix_expression:
  primary_expression
| postfix_expression[lhs] designator
    {
      $$ = arena->New<SimpleMemberAccessExpression>(pl_context.source_loc(), $lhs,
                                                    $designator);
    }
| postfix_expression[lhs] PERIOD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    {
      $$ = arena->New<CompoundMemberAccessExpression>(pl_context.source_loc(), $lhs,
                                                      $expression);
    }
| postfix_expression[lhs] LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    { $$ = arena->New<IndexExpression>(pl_context.source_loc(), $lhs, $expression); }
| intrinsic_identifier tuple
    { $postfix_expression = arena->New<IntrinsicExpression>($intrinsic_identifier, $tuple, pl_context.source_loc()); }
| postfix_expression[lhs] tuple
    { $$ = arena->New<CallExpression>(pl_context.source_loc(), $lhs, $tuple); }
| postfix_expression[lhs] POSTFIX_STAR
    {
      $$ = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Ptr,
          std::vector<Nonnull<Expression*>>({$lhs}));
    }
| postfix_expression[lhs] UNARY_STAR
    {
      $$ = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Ptr,
          std::vector<Nonnull<Expression*>>({$lhs}));
    }
;
ref_deref_expression:
  postfix_expression
| PREFIX_STAR ref_deref_expression[rdexpr]
    {
      $$ = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Deref,
          std::vector<Nonnull<Expression*>>({$rdexpr}));
    }
| UNARY_STAR ref_deref_expression[rdexpr]
    {
      $$ = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Deref,
          std::vector<Nonnull<Expression*>>({$rdexpr}));
    }
| AMPERSAND ref_deref_expression[rdexpr]
    {
      $$ = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::AddressOf,
          std::vector<Nonnull<Expression*>>({$rdexpr}));
    }
;
fn_type_expression:
  FN_TYPE tuple ARROW type_expression
    { $fn_type_expression = arena->New<FunctionTypeLiteral>(pl_context.source_loc(), $tuple, $type_expression); }
;
type_expression:
  ref_deref_expression
| bitwise_and_expression
| fn_type_expression
;
minus_expression:
  // ref_deref_expression excluded due to precedence diamond.
  MINUS ref_deref_expression
    {
      $minus_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Neg,
          std::vector<Nonnull<Expression*>>({$ref_deref_expression}));
    }
;
complement_expression:
  // ref_deref_expression excluded due to precedence diamond.
  CARET ref_deref_expression
    {
      $complement_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Complement,
          std::vector<Nonnull<Expression*>>({$ref_deref_expression}));
    }
;
unary_expression:
  // ref_deref_expression excluded due to precedence diamond.
  minus_expression
| complement_expression
;
// A simple_binary_operand is an operand of a binary operator
// that is not itself a binary operator expression.
simple_binary_operand:
  ref_deref_expression
| unary_expression
;
multiplicative_lhs:
  simple_binary_operand
| multiplicative_expression
;
multiplicative_expression:
  multiplicative_lhs BINARY_STAR simple_binary_operand
    {
      $multiplicative_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Mul,
          std::vector<Nonnull<Expression*>>({$multiplicative_lhs, $simple_binary_operand}));
    }
| multiplicative_lhs SLASH simple_binary_operand
    {
      $multiplicative_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Div,
          std::vector<Nonnull<Expression*>>({$multiplicative_lhs, $simple_binary_operand}));
    }
;
additive_operand:
  simple_binary_operand
| multiplicative_expression
;
additive_lhs:
  simple_binary_operand
| additive_expression
;
additive_expression:
  multiplicative_expression
| additive_lhs PLUS additive_operand
    {
      $additive_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Add,
          std::vector<Nonnull<Expression*>>({$additive_lhs, $additive_operand}));
    }
| additive_lhs MINUS additive_operand
    {
      $additive_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Sub,
          std::vector<Nonnull<Expression*>>({$additive_lhs, $additive_operand}));
    }
;
modulo_expression:
  simple_binary_operand[lhs] PERCENT simple_binary_operand[rhs]
    {
      $modulo_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Mod,
          std::vector<Nonnull<Expression*>>({$lhs, $rhs}));
    }
;
bitwise_and_lhs:
  simple_binary_operand
| bitwise_and_expression
;
bitwise_and_expression:
  bitwise_and_lhs AMPERSAND simple_binary_operand
    {
      $bitwise_and_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::BitwiseAnd,
          std::vector<Nonnull<Expression*>>({$bitwise_and_lhs, $simple_binary_operand}));
    }
;
bitwise_or_lhs:
  simple_binary_operand
| bitwise_or_expression
;
bitwise_or_expression:
  bitwise_or_lhs PIPE simple_binary_operand
    {
      $bitwise_or_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::BitwiseOr,
          std::vector<Nonnull<Expression*>>({$bitwise_or_lhs, $simple_binary_operand}));
    }
;
bitwise_xor_lhs:
  simple_binary_operand
| bitwise_xor_expression
;
bitwise_xor_expression:
  bitwise_xor_lhs CARET simple_binary_operand
    {
      $bitwise_xor_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::BitwiseXor,
          std::vector<Nonnull<Expression*>>({$bitwise_xor_lhs, $simple_binary_operand}));
    }
;
bitwise_expression:
  bitwise_and_expression
| bitwise_or_expression
| bitwise_xor_expression
;
bit_shift_expression:
  simple_binary_operand[lhs] LESS_LESS simple_binary_operand[rhs]
    {
      $bit_shift_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::BitShiftLeft,
          std::vector<Nonnull<Expression*>>({$lhs, $rhs}));
    }
| simple_binary_operand[lhs] GREATER_GREATER simple_binary_operand[rhs]
    {
      $bit_shift_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::BitShiftRight,
          std::vector<Nonnull<Expression*>>({$lhs, $rhs}));
    }
;
as_expression:
  simple_binary_operand[lhs] AS simple_binary_operand[rhs]
    {
      $as_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::As,
          std::vector<Nonnull<Expression*>>{$lhs, $rhs});
    }
;
unimpl_expression:
  // ref_deref_expression excluded due to precedence diamond.
  ref_deref_expression[lhs] UNIMPL_EXAMPLE ref_deref_expression[rhs]
    {
      $unimpl_expression = arena->New<UnimplementedExpression>(pl_context.source_loc(),
                                               "ExampleInfix", $lhs, $rhs);
    }
;
value_expression:
  // ref_deref_expression excluded due to precedence diamond.
  additive_expression
| as_expression
| bitwise_expression
| bit_shift_expression
| fn_type_expression
| modulo_expression
| unary_expression
| unimpl_expression
;
comparison_operand:
  ref_deref_expression
| value_expression
;
comparison_operator:
  EQUAL_EQUAL
    { $comparison_operator = Operator::Eq; }
| LESS
    { $comparison_operator = Operator::Less; }
| LESS_EQUAL
    { $comparison_operator = Operator::LessEq; }
|  GREATER
    { $comparison_operator = Operator::Greater; }
| GREATER_EQUAL
    { $comparison_operator = Operator::GreaterEq; }
| NOT_EQUAL
    { $comparison_operator = Operator::NotEq; }
;
comparison_expression:
  value_expression
| comparison_operand[lhs] comparison_operator comparison_operand[rhs]
    {
      $comparison_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), $comparison_operator,
          std::vector<Nonnull<Expression*>>({$lhs, $rhs}));
    }
;
not_expression:
  NOT ref_deref_expression
    {
      $not_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Not,
          std::vector<Nonnull<Expression*>>({$ref_deref_expression}));
    }
;
predicate_expression:
  // ref_deref_expression excluded due to precedence diamond.
  not_expression
| comparison_expression
;
and_or_operand:
  ref_deref_expression
| predicate_expression
;
and_lhs:
  and_or_operand
| and_expression
;
and_expression:
  // predicate_expression excluded due to precedence diamond.
  and_lhs AND and_or_operand
    {
      $and_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::And,
          std::vector<Nonnull<Expression*>>({$and_lhs, $and_or_operand}));
    }
;
or_lhs:
  and_or_operand
| or_expression
;
or_expression:
  // predicate_expression excluded due to precedence diamond.
  or_lhs OR and_or_operand
    {
      $or_expression = arena->New<OperatorExpression>(
          pl_context.source_loc(), Operator::Or,
          std::vector<Nonnull<Expression*>>({$or_lhs, $and_or_operand}));
    }
;
where_clause:
  comparison_operand[lhs] IS comparison_operand[rhs]
    { $where_clause = arena->New<IsWhereClause>(pl_context.source_loc(), $lhs, $rhs); }
| comparison_operand[lhs] EQUAL_EQUAL comparison_operand[rhs]
    { $where_clause = arena->New<EqualsWhereClause>(pl_context.source_loc(), $lhs, $rhs); }
;
where_clause_list:
  where_clause
    { $where_clause_list = {$where_clause}; }
| where_clause_list[wclist] AND where_clause
    {
      $$ = std::move($wclist);
      $$.push_back($where_clause);
    }
;
where_expression:
  type_expression WHERE where_clause_list
    {
      auto* self =
          arena -> New<GenericBinding>(pl_context.source_loc(), ".Self", $type_expression);
      $where_expression = arena->New<WhereExpression>(pl_context.source_loc(), self, $where_clause_list);
    }
;
type_or_where_expression:
  type_expression
| where_expression
;
statement_expression:
  ref_deref_expression
| predicate_expression
| and_expression
| or_expression
| where_expression
;
if_expression:
  statement_expression
| IF expression THEN if_expression[if_true] ELSE if_expression[if_else]
    { $$ = arena->New<IfExpression>(pl_context.source_loc(), $expression, $if_true, $if_else); }
;
expression:
  if_expression
;
designator: PERIOD identifier { $designator = $identifier; }
;
paren_expression: paren_expression_base
    { $paren_expression = ExpressionFromParenContents(arena, pl_context.source_loc(), $paren_expression_base); }
;
tuple: paren_expression_base
    { $tuple = TupleExpressionFromParenContents(arena, pl_context.source_loc(), $paren_expression_base); }
;
paren_expression_base:
  LEFT_PARENTHESIS RIGHT_PARENTHESIS
    { $paren_expression_base = {.elements = {}, .has_trailing_comma = false}; }
| LEFT_PARENTHESIS paren_expression_contents RIGHT_PARENTHESIS
    { $paren_expression_base = $paren_expression_contents; }
| LEFT_PARENTHESIS paren_expression_contents COMMA RIGHT_PARENTHESIS
    {
      $paren_expression_base = $paren_expression_contents;
      $paren_expression_base.has_trailing_comma = true;
    }
;
paren_expression_contents:
  expression
    { $paren_expression_contents = {.elements = {$expression}, .has_trailing_comma = false}; }
| paren_expression_contents[peclist] COMMA expression
    {
      $$ = $peclist;
      $$.elements.push_back($expression);
    }
;

struct_literal:
  LEFT_CURLY_BRACE struct_literal_contents RIGHT_CURLY_BRACE
    { $struct_literal = arena->New<StructLiteral>(pl_context.source_loc(), $struct_literal_contents); }
| LEFT_CURLY_BRACE struct_literal_contents COMMA RIGHT_CURLY_BRACE
    { $struct_literal = arena->New<StructLiteral>(pl_context.source_loc(), $struct_literal_contents); }
;
struct_literal_contents:
  designator EQUAL expression
    { $struct_literal_contents = {FieldInitializer($designator, $expression)}; }
| struct_literal_contents[slclist] COMMA designator EQUAL expression
    {
      $$ = std::move($slclist);
      $$.push_back(FieldInitializer($designator, $expression));
    }
;

struct_type_literal:
  LEFT_CURLY_BRACE RIGHT_CURLY_BRACE
    { $struct_type_literal = arena->New<StructTypeLiteral>(pl_context.source_loc()); }
| LEFT_CURLY_BRACE struct_type_literal_contents RIGHT_CURLY_BRACE
    { $struct_type_literal = arena->New<StructTypeLiteral>(pl_context.source_loc(), $struct_type_literal_contents); }
| LEFT_CURLY_BRACE struct_type_literal_contents COMMA RIGHT_CURLY_BRACE
    { $struct_type_literal = arena->New<StructTypeLiteral>(pl_context.source_loc(), $struct_type_literal_contents); }
;
struct_type_literal_contents:
  designator COLON expression
    { $struct_type_literal_contents = {FieldInitializer($designator, $expression)}; }
| struct_type_literal_contents[stlclist] COMMA designator COLON expression
  {
    $$ = std::move($stlclist);
    $$.push_back(FieldInitializer($designator, $expression));
  }
;

// In many cases, using `pattern` recursively will result in ambiguities.
// When that happens, it's necessary to factor out two separate productions,
// one for when the sub-pattern is an expression, and one for when it is not.
// To facilitate this, non-terminals besides `pattern` whose names contain
// `pattern` are structured to be disjoint from `expression`, unless otherwise
// specified.
pattern:
  non_expression_pattern
    { $pattern = $non_expression_pattern; }
| expression
    { $pattern = arena->New<ExpressionPattern>($expression); }
;
non_expression_pattern:
  AUTO
    { $non_expression_pattern = arena->New<AutoPattern>(pl_context.source_loc()); }
| binding_lhs COLON pattern
    {
      $non_expression_pattern = arena->New<BindingPattern>(pl_context.source_loc(), $binding_lhs, $pattern,
                                      std::nullopt);
    }
| binding_lhs COLON_BANG expression
    { $non_expression_pattern = arena->New<GenericBinding>(pl_context.source_loc(), $binding_lhs, $expression); }
| paren_pattern
    { $non_expression_pattern = $paren_pattern; }
| postfix_expression tuple_pattern
    {
      ErrorOr<Nonnull<AlternativePattern*>> alternative_pattern =
          AlternativePattern::Create(arena, pl_context.source_loc(), $postfix_expression, $tuple_pattern);
      if (alternative_pattern.ok()) {
        $non_expression_pattern = *alternative_pattern;
      } else {
        pl_context.RecordSyntaxError(std::move(alternative_pattern).error());
        YYERROR;
      }
    }
| VAR non_expression_pattern[rhs]
    { $$ = arena->New<VarPattern>(pl_context.source_loc(), $rhs); }
;
binding_lhs:
  identifier { $binding_lhs = $identifier; }
| UNDERSCORE { $binding_lhs = AnonymousName; }
;
paren_pattern: paren_pattern_base
    { $paren_pattern = PatternFromParenContents(arena, pl_context.source_loc(), $paren_pattern_base); }
;
paren_pattern_base:
  LEFT_PARENTHESIS paren_pattern_contents RIGHT_PARENTHESIS
    { $paren_pattern_base = $paren_pattern_contents; }
| LEFT_PARENTHESIS paren_pattern_contents COMMA RIGHT_PARENTHESIS
    {
      $paren_pattern_base = $paren_pattern_contents;
      $paren_pattern_base.has_trailing_comma = true;
    }
;
// paren_pattern is analogous to paren_expression, but in order to avoid
// ambiguities, it must be disjoint from paren_expression, meaning it must
// contain at least one non_expression_pattern. The structure of this rule
// is very different from the corresponding expression rule because is has to
// enforce that requirement.
paren_pattern_contents:
  non_expression_pattern
    { $paren_pattern_contents = {.elements = {$non_expression_pattern}, .has_trailing_comma = false}; }
| paren_expression_contents COMMA non_expression_pattern
    {
      $paren_pattern_contents = ParenExpressionToParenPattern(arena, $paren_expression_contents);
      $paren_pattern_contents.elements.push_back($non_expression_pattern);
    }
| paren_pattern_contents[ppclist] COMMA expression
    {
      $$ = $ppclist;
      $$.elements.push_back(arena->New<ExpressionPattern>($expression));
    }
| paren_pattern_contents[ppclist] COMMA non_expression_pattern
    {
      $$ = $ppclist;
      $$.elements.push_back($non_expression_pattern);
    }
;
tuple_pattern: paren_pattern_base
    { $tuple_pattern = TuplePatternFromParenContents(arena, pl_context.source_loc(), $paren_pattern_base); }
;
// Unlike most `pattern` nonterminals, this one overlaps with `expression`,
// so it should be used only when prior context (such as an introducer)
// rules out the possibility of an `expression` at this point.
maybe_empty_tuple_pattern:
  LEFT_PARENTHESIS RIGHT_PARENTHESIS
    {
      $maybe_empty_tuple_pattern = arena->New<TuplePattern>(pl_context.source_loc(),
                                    std::vector<Nonnull<Pattern*>>());
    }
| tuple_pattern
    { $maybe_empty_tuple_pattern = $tuple_pattern; }
;

clause:
  CASE pattern DOUBLE_ARROW block
    { $clause = Match::Clause($pattern, $block); }
| DEFAULT DOUBLE_ARROW block
    {
      $clause = Match::Clause(arena->New<BindingPattern>(
                             pl_context.source_loc(), std::string(AnonymousName),
                             arena->New<AutoPattern>(pl_context.source_loc()),
                             ValueCategory::Let),
                         $block);
    }
;

clause_list:
  // Empty
    { $clause_list = {}; }
| clause_list[clist] clause
    {
      $$ = std::move($clist);
      $$.push_back($clause);
    }
;

statement:
  statement_expression EQUAL expression SEMICOLON
    { $statement = arena->New<Assign>(pl_context.source_loc(), $statement_expression, $expression); }
| VAR pattern SEMICOLON
    {
      $statement = arena->New<VariableDefinition>(
          pl_context.source_loc(), $pattern, std::nullopt, ValueCategory::Var,
          VariableDefinition::DefinitionType::Var);
    }
| VAR pattern EQUAL expression SEMICOLON
    {
      $statement = arena->New<VariableDefinition>(
          pl_context.source_loc(), $pattern, $expression, ValueCategory::Var,
          VariableDefinition::DefinitionType::Var);
    }
| RETURNED VAR variable_declaration SEMICOLON
    {
      $statement = arena->New<VariableDefinition>(
          pl_context.source_loc(), $variable_declaration, std::nullopt, ValueCategory::Var,
          VariableDefinition::DefinitionType::Returned);
    }
| RETURNED VAR variable_declaration EQUAL expression SEMICOLON
    {
      $statement = arena->New<VariableDefinition>(
          pl_context.source_loc(), $variable_declaration, $expression, ValueCategory::Var,
          VariableDefinition::DefinitionType::Returned);
    }
| LET pattern EQUAL expression SEMICOLON
    {
      $statement = arena->New<VariableDefinition>(
          pl_context.source_loc(), $pattern, $expression, ValueCategory::Let,
          VariableDefinition::DefinitionType::Var);
    }
| statement_expression SEMICOLON
    { $statement = arena->New<ExpressionStatement>(pl_context.source_loc(), $statement_expression); }
| if_statement
    { $statement = $if_statement; }
| WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block
    { $statement = arena->New<While>(pl_context.source_loc(), $expression, $block); }
| BREAK SEMICOLON
    { $statement = arena->New<Break>(pl_context.source_loc()); }
| CONTINUE SEMICOLON
    { $statement = arena->New<Continue>(pl_context.source_loc()); }
| RETURN return_expression SEMICOLON
    {
      auto [return_exp, is_omitted_exp] = $return_expression;
      $statement = arena->New<ReturnExpression>(pl_context.source_loc(), return_exp,
                                        is_omitted_exp);
    }
| RETURN VAR SEMICOLON
    { $statement = arena->New<ReturnVar>(pl_context.source_loc()); }
| MATCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE
  clause_list RIGHT_CURLY_BRACE
    { $statement = arena->New<Match>(pl_context.source_loc(), $expression, $clause_list); }
| CONTINUATION identifier block
    { $statement = arena->New<Continuation>(pl_context.source_loc(), $identifier, $block); }
| RUN expression SEMICOLON
    { $statement = arena->New<Run>(pl_context.source_loc(), $expression); }
| AWAIT SEMICOLON
    { $statement = arena->New<Await>(pl_context.source_loc()); }
| FOR LEFT_PARENTHESIS variable_declaration IN type_expression RIGHT_PARENTHESIS block
    { $statement = arena->New<For>(pl_context.source_loc(), $variable_declaration, $type_expression, $block); }
;
if_statement:
  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block optional_else
    { $if_statement = arena->New<If>(pl_context.source_loc(), $expression, $block, $optional_else); }
;
optional_else:
  // Empty
    { $optional_else = std::nullopt; }
| ELSE if_statement
    {
      $optional_else = arena->New<Block>(pl_context.source_loc(),
                             std::vector<Nonnull<Statement*>>({$if_statement}));
    }
| ELSE block
    { $optional_else = $block; }
;
return_expression:
  // Empty
    { $return_expression = {arena->New<TupleLiteral>(pl_context.source_loc()), true}; }
| expression
    { $return_expression = {$expression, false}; }
;
statement_list:
  // Empty
    { $statement_list = {}; }
| statement_list[slist] statement
    {
      $$ = std::move($slist);
      $$.push_back($statement);
    }
;
block:
  LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE
    { $block = arena->New<Block>(pl_context.source_loc(), std::move($statement_list)); }
;

return_term:
  // Empty
    { $return_term = ReturnTerm::Omitted(pl_context.source_loc()); }
| ARROW AUTO
    { $return_term = ReturnTerm::Auto(pl_context.source_loc()); }
| ARROW expression
    { $return_term = ReturnTerm::Explicit($expression); }
;

generic_binding:
  identifier COLON_BANG expression
    {
      $generic_binding = arena->New<GenericBinding>(pl_context.source_loc(), std::move($identifier), $expression);
    }
;

deduced_param:
  generic_binding
    { $deduced_param = $generic_binding; }
| variable_declaration
    { $deduced_param = $variable_declaration; }
| ADDR variable_declaration
    { $deduced_param = arena->New<AddrPattern>(pl_context.source_loc(), $variable_declaration); }
;

deduced_param_list:
  // Empty
    { $deduced_param_list = {}; }
| deduced_param
    { $deduced_param_list = {$deduced_param}; }
| deduced_param_list[dplist] COMMA deduced_param
    {
      $$ = std::move($dplist);
      $$.push_back($deduced_param);
    }
;

deduced_params:
  // Empty
    { $deduced_params = std::vector<Nonnull<AstNode*>>(); }
| LEFT_SQUARE_BRACKET deduced_param_list RIGHT_SQUARE_BRACKET
    { $deduced_params = $deduced_param_list; }
;

impl_deduced_params:
  // Empty
    { $impl_deduced_params = std::vector<Nonnull<AstNode*>>(); }
| FORALL LEFT_SQUARE_BRACKET deduced_param_list RIGHT_SQUARE_BRACKET
    { $impl_deduced_params = $deduced_param_list; }
;

function_declaration:
  FN identifier deduced_params maybe_empty_tuple_pattern return_term block
    {
      ErrorOr<FunctionDeclaration*> fn = FunctionDeclaration::Create(
          arena, pl_context.source_loc(), $identifier, $deduced_params, $maybe_empty_tuple_pattern, $return_term, $block);
      if (fn.ok()) {
        $function_declaration = *fn;
      } else {
        pl_context.RecordSyntaxError(std::move(fn).error());
        YYERROR;
      }
    }
| FN identifier deduced_params maybe_empty_tuple_pattern return_term SEMICOLON
    {
      ErrorOr<FunctionDeclaration*> fn = FunctionDeclaration::Create(
          arena, pl_context.source_loc(), $identifier, $deduced_params, $maybe_empty_tuple_pattern, $return_term, std::nullopt);
      if (fn.ok()) {
        $function_declaration = *fn;
      } else {
        pl_context.RecordSyntaxError(std::move(fn).error());
        YYERROR;
      }
    }
;
variable_declaration: identifier COLON pattern
    {
      $variable_declaration = arena->New<BindingPattern>(pl_context.source_loc(), $identifier, $pattern,
                                      std::nullopt);
    }
;
alias_declaration: ALIAS identifier EQUAL expression SEMICOLON
    { $alias_declaration = arena->New<AliasDeclaration>(pl_context.source_loc(), $identifier, $expression); }
;
// EXPERIMENTAL MIXIN FEATURE
mix_declaration: MIX expression SEMICOLON
    { $mix_declaration = arena->New<MixDeclaration>(pl_context.source_loc(), $expression); }
;
alternative:
  identifier tuple
    { $alternative = arena->New<AlternativeSignature>(pl_context.source_loc(), $identifier, $tuple); }
| identifier
    {
      $alternative = arena->New<AlternativeSignature>(
          pl_context.source_loc(), $identifier,
          arena->New<TupleLiteral>(pl_context.source_loc()));
    }
;
alternative_list:
  // Empty
    { $alternative_list = {}; }
| alternative_list_contents
    { $alternative_list = $alternative_list_contents; }
| alternative_list_contents COMMA
    { $alternative_list = $alternative_list_contents; }
;
alternative_list_contents:
  alternative
    { $alternative_list_contents = {std::move($alternative)}; }
| alternative_list_contents[alclist] COMMA alternative
    {
      $$ = std::move($alclist);
      $$.push_back(std::move($alternative));
    }
;
type_params:
  // Empty
    { $type_params = std::nullopt; }
| tuple_pattern
    { $type_params = $tuple_pattern; }
;
// EXPERIMENTAL MIXIN FEATURE
mixin_import:
  // Empty
    { $mixin_import = arena->New<TypeTypeLiteral>(pl_context.source_loc()); }
| FOR expression
    {
      pl_context.RecordSyntaxError("'for' not supported currently");
      YYERROR;
      // $mixin_import = $expression;
    }
;
class_declaration_extensibility:
  // Empty
    { $class_declaration_extensibility = Carbon::ClassExtensibility::None; }
| ABSTRACT
    { $class_declaration_extensibility = Carbon::ClassExtensibility::Abstract; }
| BASE
    { $class_declaration_extensibility = Carbon::ClassExtensibility::Base; }
;
class_declaration_extends:
  // Empty
    { $class_declaration_extends = std::nullopt; }
| EXTENDS expression
    { $class_declaration_extends = $expression; }
;
declaration:
  function_declaration
    { $declaration = $function_declaration; }
| destructor_declaration
    { $declaration = $destructor_declaration; }
| class_declaration_extensibility CLASS identifier type_params class_declaration_extends LEFT_CURLY_BRACE class_body RIGHT_CURLY_BRACE
    {
      $declaration = arena->New<ClassDeclaration>(
          pl_context.source_loc(), $identifier,
          arena->New<SelfDeclaration>(pl_context.source_loc()), $class_declaration_extensibility, $type_params, $class_declaration_extends, $class_body);
    }
| MIXIN identifier type_params mixin_import LEFT_CURLY_BRACE mixin_body RIGHT_CURLY_BRACE
    {
      // EXPERIMENTAL MIXN FEATURE
      auto self =
          arena -> New<GenericBinding>(pl_context.source_loc(), "Self", $mixin_import);
      $declaration = arena->New<MixinDeclaration>(pl_context.source_loc(), $identifier, $type_params, self, $mixin_body);
    }
| CHOICE identifier type_params LEFT_CURLY_BRACE alternative_list RIGHT_CURLY_BRACE
    { $declaration = arena->New<ChoiceDeclaration>(pl_context.source_loc(), $identifier, $type_params, $alternative_list); }
| VAR variable_declaration SEMICOLON
    {
      $declaration = arena->New<VariableDeclaration>(pl_context.source_loc(), $variable_declaration,
                                           std::nullopt, ValueCategory::Var);
    }
| VAR variable_declaration EQUAL expression SEMICOLON
    {
      $declaration = arena->New<VariableDeclaration>(pl_context.source_loc(), $variable_declaration, $expression,
                                           ValueCategory::Var);
    }
| LET variable_declaration EQUAL expression SEMICOLON
    {
      $declaration = arena->New<VariableDeclaration>(pl_context.source_loc(), $variable_declaration, $expression,
                                           ValueCategory::Let);
    }
| INTERFACE identifier type_params LEFT_CURLY_BRACE interface_body RIGHT_CURLY_BRACE
    {
      $declaration = arena->New<InterfaceDeclaration>(arena, pl_context.source_loc(), $identifier, $type_params,
                                            $interface_body);
    }
| impl_kind IMPL impl_deduced_params impl_type AS type_or_where_expression LEFT_CURLY_BRACE impl_body RIGHT_CURLY_BRACE
    {
      ErrorOr<ImplDeclaration*> impl = ImplDeclaration::Create(
          arena, pl_context.source_loc(), $impl_kind, $impl_type, $type_or_where_expression, $impl_deduced_params, $impl_body);
      if (impl.ok()) {
        $declaration = *impl;
      } else {
        pl_context.RecordSyntaxError(std::move(impl).error());
        YYERROR;
      }
    }
| alias_declaration
    { $declaration = $alias_declaration; }
;
impl_kind:
  // Internal
    { $impl_kind = Carbon::ImplKind::InternalImpl; }
| EXTERNAL
    { $impl_kind = Carbon::ImplKind::ExternalImpl; }
;
impl_type:
  // Self
    { $impl_type = arena->New<IdentifierExpression>(pl_context.source_loc(), "Self"); }
| type_expression
;
destructor_declaration:
  DESTRUCTOR deduced_params block
  {
    ErrorOr<DestructorDeclaration*> fn =
        DestructorDeclaration::CreateDestructor(
            arena, pl_context.source_loc(), $deduced_params,
            arena->New<TuplePattern>(pl_context.source_loc(),
                                     std::vector<Nonnull<Pattern*>>()),
            ReturnTerm::Omitted(pl_context.source_loc()), $block);
    if (fn.ok()) {
      $destructor_declaration = *fn;
    } else {
      pl_context.RecordSyntaxError(std::move(fn).error());
      YYERROR;
    }
  }
;
declaration_list:
  // Empty
    { $declaration_list = {}; }
| declaration_list[dlist] declaration
    {
      $$ = std::move($dlist);
      $$.push_back(Nonnull<Declaration*>($declaration));
    }
;
class_body:
  // Empty
    { $class_body = {}; }
| class_body[cblist] declaration
    {
      $$ = std::move($cblist);
      $$.push_back(Nonnull<Declaration*>($declaration));
    }
| class_body[cblist] mix_declaration
    {
      $$ = std::move($cblist);
      $$.push_back(Nonnull<Declaration*>($mix_declaration));
    }
;
// EXPERIMENTAL MIXIN FEATURE
mixin_body:
  // Empty
    { $mixin_body = {}; }
| mixin_body[mblist] function_declaration
    {
      $$ = std::move($mblist);
      $$.push_back(Nonnull<Declaration*>($function_declaration));
    }
| mixin_body[mblist] mix_declaration
    {
      $$ = std::move($mblist);
      $$.push_back(Nonnull<Declaration*>($mix_declaration));
    }
;
interface_body:
  // Empty
    { $interface_body = {}; }
| interface_body[iblist] function_declaration
    {
      $$ = std::move($iblist);
      $$.push_back($function_declaration);
    }
| interface_body[iblist] LET generic_binding SEMICOLON
    {
      $$ = std::move($iblist);
      $$.push_back(
          arena->New<AssociatedConstantDeclaration>(pl_context.source_loc(), $generic_binding));
    }
;
impl_body:
  // Empty
    { $impl_body = {}; }
| impl_body[iblist] function_declaration
    {
      $$ = std::move($iblist);
      $$.push_back($function_declaration);
    }
| impl_body[iblist] alias_declaration
    {
      $$ = std::move($iblist);
      $$.push_back($alias_declaration);
    }
;
%%
