// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// RUN: %{not} %{explorer} %s 2>&1 | \
// RUN:   %{FileCheck} --match-full-lines --allow-unused-prefixes=false %s
// RUN: %{not} %{explorer} --parser_debug --trace_file=- %s 2>&1 | \
// RUN:   %{FileCheck} --match-full-lines --allow-unused-prefixes %s
// AUTOUPDATE: %{explorer} %s

package ExplorerTest api;

interface Vector(T:! Type) {
  fn Add[me: Self](b: Self) -> Self;
  fn Scale[me: Self](v: T) -> Self;
}

class Point(T:! Type) {
  var x: T;
  var y: T;
}

external impl Point(i32) as Vector(i32) {
  fn Add[me: Self](b: Self) -> Self {
    return {.x = me.x + b.x, .y = me.y + b.y};
  }
  fn Scale[me: Self](v: i32) -> Self {
    return {.x = me.x * v, .y = me.y * v};
  }
}

external impl forall [T:! Type] Point(T) as Vector(T) {
  fn Add[me: Self](b: Self) -> Self {
    return me;
  }
  fn Scale[me: Self](v: T) -> Self {
    return me;
  }
}

fn AddAndScaleGeneric[T:! Vector(i32)](a: T, b: T, s: i32) -> T {
  return a.Add(b).Scale(s);
}

fn Main() -> i32 {
  var a: Point(i32) = {.x = 1, .y = 1};
  var b: Point(i32) = {.x = 2, .y = 3};
  // TODO: This shouldn't be considered ambiguous.
  // CHECK: COMPILATION ERROR: {{.*}}/explorer/testdata/impl/fail_unambiguous_impl_generic.carbon:[[@LINE+1]]: ambiguous implementations of interface Vector(T = i32) for class Point(T = i32)
  var p: Point(i32) = AddAndScaleGeneric(a, b, 5);
  return p.x - 15;
}
