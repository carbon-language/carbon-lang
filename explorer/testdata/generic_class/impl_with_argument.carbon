// Part of the Carbon Language project, under the Apache License v2.0 with LLVM
// Exceptions. See /LICENSE for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// RUN: %{explorer} %s 2>&1 | \
// RUN:   %{FileCheck} --match-full-lines --allow-unused-prefixes=false %s
// RUN: %{explorer} --parser_debug --trace_file=- %s 2>&1 | \
// RUN:   %{FileCheck} --match-full-lines --allow-unused-prefixes %s
// AUTOUPDATE: %{explorer} %s
// CHECK: result: 0

package ExplorerTest api;

interface Vector {
  fn Zero() -> Self;
  fn Add[me: Self](b: Self) -> Self;
  fn Scale[me: Self](v: i32) -> Self;
}

class Point(T:! Type) {
  var x: T;
  var y: T;
}

// Can implement `Vector` for just `Point(i32)`, not all `Point(T)`.
external impl Point(i32) as Vector {
  fn Zero() -> Point(i32) {
    return {.x = 0, .y = 0};
  }

  fn Add[me: Point(i32)](b: Point(i32)) -> Point(i32) {
    return {.x = me.x + b.x, .y = me.y + b.y};
  }

  fn Scale[me: Point(i32)](v: i32) -> Point(i32) {
    return {.x = me.x * v, .y = me.y * v};
  }
}

fn AddAndScaleGeneric[T:! Vector](a: T, s: i32) -> T {
  return a.Add(T.Zero()).Scale(s);
}

fn Main() -> i32 {
  var a: Point(i32) = {.x = 2, .y = 1};
  var p: Point(i32) = AddAndScaleGeneric(a, 5);
  return p.x - 10;
}
