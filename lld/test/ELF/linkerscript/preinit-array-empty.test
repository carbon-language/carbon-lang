# REQUIRES: x86
# RUN: split-file %s %t
# RUN: llvm-mc -filetype=obj -triple=x86_64 %t/t.s -o %t.o

## PR52534: https://bugs.llvm.org/show_bug.cgi?id=52534
## Check case where .preinit_array is discarded.
## Link should succeed without causing an out of range relocation error.
# RUN: ld.lld -T %t/discarded.script %t.o -o %t1 --image-base=0x80000000
# RUN: llvm-readelf -s %t1 | FileCheck --check-prefixes=CHECK,DISCARDED %s

## Check case where .preinit_array is emitted but empty.
# RUN: ld.lld -T %t/empty.script %t.o -o %t2
# RUN: llvm-readelf -s %t2 | FileCheck --check-prefixes=CHECK,EMPTY %s

# CHECK:          [[#%x,ADDR:]] 0 NOTYPE  LOCAL  HIDDEN      [[#]] __preinit_array_start
# CHECK-NEXT:     [[#ADDR]]     0 NOTYPE  LOCAL  HIDDEN      [[#]] __preinit_array_end

# DISCARDED-NEXT: [[#ADDR]]     0 NOTYPE  GLOBAL DEFAULT     [[#]] _start

# EMPTY-NOT:      [[#ADDR]]     0 NOTYPE  GLOBAL DEFAULT     [[#]] _start
# EMPTY:          [[#ADDR]]     0 NOTYPE  GLOBAL DEFAULT     [[#]] ADDR

#--- t.s
.global _start
_start:
 movq __preinit_array_start@GOTPCREL(%rip),%rax
 movq __preinit_array_end@GOTPCREL(%rip),%rax

#--- discarded.script
SECTIONS {
  .text : { *(.text); }
  .preinit_array : { *(.preinit_array); }
}

#--- empty.script
SECTIONS {
  .text : { *(.text); }
  .preinit_array : { ADDR = .; *(.preinit_array); }
}
