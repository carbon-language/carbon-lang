## Show that llvm-objcopy/llvm-strip removes all symbols and debug sections.

# RUN: yaml2obj %p/Inputs/strip-all-with-dwarf.yaml -o %t

# RUN: llvm-objcopy --strip-debug %t %t.stripped
# RUN: llvm-readobj --sections %t.stripped | FileCheck /dev/null \
# RUN:   --implicit-check-not='Name: __debug' --implicit-check-not='Name: __apple'

## Make sure that all symbols are kept.
# RUN: llvm-readobj --symbols %t | FileCheck %s --check-prefix=SYM
# RUN: llvm-readobj --symbols %t.stripped | FileCheck %s --check-prefix=SYM

# SYM:         Symbols [
# SYM-COUNT-3: Symbol
# SYM:         ]

## Make sure that all relocations to non-debug sections are kept.
# RUN: llvm-readobj -r %t | FileCheck %s --check-prefixes=RELOC,DEBUG
# RUN: llvm-readobj -r %t.stripped | FileCheck %s --check-prefix=RELOC

# RUN: llvm-strip --strip-debug %t -o %t.stripped2
# RUN: cmp %t.stripped %t.stripped2

# RELOC:      Relocations [
# RELOC-NEXT:   Section __text {
# RELOC-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# RELOC-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _main
# RELOC-NEXT:   }
# DEBUG:        Section __debug_info {
# DEBUG-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# DEBUG-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# DEBUG-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# DEBUG-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# DEBUG-NEXT:   }
# RELOC-NEXT:   Section __compact_unwind {
# RELOC-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# RELOC-NEXT:   }
# DEBUG-NEXT:   Section __debug_line {
# DEBUG-NEXT:     0x0 0 0 1 X86_64_RELOC_UNSIGNED 0 _bar
# DEBUG-NEXT:   }
# RELOC-NEXT: ]
