# RUN: llc -emit-call-site-info -start-before=livedebugvalues -filetype=obj -o - %s \
# RUN:     | llvm-dwarfdump - | FileCheck %s --implicit-check-not=DW_TAG_GNU_call_site_parameter

--- |
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  ; Function Attrs: nounwind uwtable
  define void @move_around_args(i32 %a) #0 !dbg !12 {
  entry:
    call void @call2(i32 123, i32 %a), !dbg !15
    ret void, !dbg !16
  }

  declare !dbg !4 dso_local void @call2(i32, i32)

  attributes #0 = { nounwind uwtable }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!8, !9, !10}
  !llvm.ident = !{!11}

  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 11.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "worklist.c", directory: "/")
  !2 = !{}
  !3 = !{!4}
  !4 = !DISubprogram(name: "call2", scope: !1, file: !1, line: 1, type: !5, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
  !5 = !DISubroutineType(types: !6)
  !6 = !{null, !7, !7}
  !7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !8 = !{i32 7, !"Dwarf Version", i32 4}
  !9 = !{i32 2, !"Debug Info Version", i32 3}
  !10 = !{i32 1, !"wchar_size", i32 4}
  !11 = !{!"clang version 11.0.0"}
  !12 = distinct !DISubprogram(name: "move_around_args", scope: !1, file: !1, line: 3, type: !13, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
  !13 = !DISubroutineType(types: !14)
  !14 = !{null, !7}
  !15 = !DILocation(line: 4, scope: !12)
  !16 = !DILocation(line: 5, scope: !12)

...
---
name:            move_around_args
liveins:
  - { reg: '$edi' }
callSites:
  - { bb: 0, offset: 12, fwdArgRegs:
      - { arg: 0, reg: '$edi' }
      - { arg: 1, reg: '$esi' } }
body:             |
  bb.0.entry:
    liveins: $edi

    frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    $esi = MOV32ri 123

    ; Move the values around between different registers.

    $edx = MOV32rr $edi

    $edi = MOV32rr $esi
    $esi = MOV32rr $edx

    $edx = MOV32rr $edi
    $eax = MOV32rr $esi

    $esi = MOV32rr $edx
    $edx = MOV32rr $eax

    $edi = MOV32rr $esi
    $esi = MOV32rr $edx

    CALL64pcrel32 @call2, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !15
    $rax = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !16
    CFI_INSTRUCTION def_cfa_offset 8, debug-location !16
    RET64 debug-location !16

...

# Verify that we emit correct call site parameter entries even after moving
# around the call site values between different registers.
#
# This test uses an implicit CHECK-NOT to verify that only two call site
# parameter entries are emitted.

# CHECK: DW_TAG_GNU_call_site_parameter
# CHECK-NEXT: DW_AT_location	(DW_OP_reg5 RDI)
# CHECK-NEXT: DW_AT_GNU_call_site_value	(DW_OP_constu 0x7b)

# CHECK: DW_TAG_GNU_call_site_parameter
# CHECK-NEXT: DW_AT_location	(DW_OP_reg4 RSI)
# CHECK-NEXT: DW_AT_GNU_call_site_value	(DW_OP_GNU_entry_value(DW_OP_reg5 RDI))
