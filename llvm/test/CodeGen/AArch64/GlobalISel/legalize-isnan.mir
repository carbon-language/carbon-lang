# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=aarch64-unknown-unknown -run-pass=legalizer -global-isel-abort=0 -verify-machineinstrs %s -o - | FileCheck %s

...
---
name:            scalar_nofpexcept
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $h0

    ; CHECK-LABEL: name: scalar_nofpexcept
    ; CHECK: liveins: $h0
    ; CHECK: %val:_(s16) = COPY $h0
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 0.000000e+00
    ; CHECK: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[C]](s32)
    ; CHECK: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT %val(s16)
    ; CHECK: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC]](s16)
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uno), [[FPEXT]](s32), [[FPEXT1]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: %ext:_(s32) = G_AND [[FCMP]], [[C1]]
    ; CHECK: $w0 = COPY %ext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %val:_(s16) = COPY $h0
    %isnan:_(s1) = nofpexcept G_ISNAN %val(s16)
    %ext:_(s32) = G_ZEXT %isnan(s1)
    $w0 = COPY %ext(s32)
    RET_ReallyLR implicit $w0

...
---
name:            vector_nofpexcept
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $d0

    ; CHECK-LABEL: name: vector_nofpexcept
    ; CHECK: liveins: $d0
    ; CHECK: %val:_(<4 x s16>) = COPY $d0
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 0.000000e+00
    ; CHECK: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[C]](s32)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[FPTRUNC]](s16), [[FPTRUNC]](s16), [[FPTRUNC]](s16), [[FPTRUNC]](s16)
    ; CHECK: [[FCMP:%[0-9]+]]:_(<4 x s16>) = G_FCMP floatpred(uno), %val(<4 x s16>), [[BUILD_VECTOR]]
    ; CHECK: $d0 = COPY [[FCMP]](<4 x s16>)
    ; CHECK: RET_ReallyLR implicit $d0
    %val:_(<4 x s16>) = COPY $d0
    %isnan:_(<4 x s1>) = nofpexcept G_ISNAN %val(<4 x s16>)
    %ext:_(<4 x s16>) = G_ANYEXT %isnan(<4 x s1>)
    $d0 = COPY %ext(<4 x s16>)
    RET_ReallyLR implicit $d0

...
---
name:            scalar_no_flags
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $h0

    ; CHECK-LABEL: name: scalar_no_flags
    ; CHECK: liveins: $h0
    ; CHECK: %val:_(s16) = COPY $h0
    ; CHECK: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT %val(s16)
    ; CHECK: [[FPTOSI:%[0-9]+]]:_(s32) = G_FPTOSI [[FPEXT]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32767
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[FPTOSI]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 31744
    ; CHECK: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[AND]], 16
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[C1]](s32), [[SEXT_INREG]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: %ext:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK: $w0 = COPY %ext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %val:_(s16) = COPY $h0
    %isnan:_(s1) = G_ISNAN %val(s16)
    %ext:_(s32) = G_ZEXT %isnan(s1)
    $w0 = COPY %ext(s32)
    RET_ReallyLR implicit $w0

...
---
name:            vector_no_flags
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $d0

    ; CHECK-LABEL: name: vector_no_flags
    ; CHECK: liveins: $d0
    ; CHECK: %val:_(<4 x s16>) = COPY $d0
    ; CHECK: [[FPTOSI:%[0-9]+]]:_(<4 x s16>) = G_FPTOSI %val(<4 x s16>)
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 32767
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[C]](s16), [[C]](s16), [[C]](s16), [[C]](s16)
    ; CHECK: [[AND:%[0-9]+]]:_(<4 x s16>) = G_AND [[FPTOSI]], [[BUILD_VECTOR]]
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 31744
    ; CHECK: [[BUILD_VECTOR1:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR [[C1]](s16), [[C1]](s16), [[C1]](s16), [[C1]](s16)
    ; CHECK: [[ICMP:%[0-9]+]]:_(<4 x s16>) = G_ICMP intpred(slt), [[BUILD_VECTOR1]](<4 x s16>), [[AND]]
    ; CHECK: %isnan:_(<4 x s1>) = G_TRUNC [[ICMP]](<4 x s16>)
    ; CHECK: %ext:_(<4 x s16>) = G_ANYEXT %isnan(<4 x s1>)
    ; CHECK: $d0 = COPY %ext(<4 x s16>)
    ; CHECK: RET_ReallyLR implicit $d0
    %val:_(<4 x s16>) = COPY $d0
    %isnan:_(<4 x s1>) = G_ISNAN %val(<4 x s16>)
    %ext:_(<4 x s16>) = G_ANYEXT %isnan(<4 x s1>)
    $d0 = COPY %ext(<4 x s16>)
    RET_ReallyLR implicit $d0
