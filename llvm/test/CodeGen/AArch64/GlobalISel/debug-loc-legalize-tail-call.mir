# RUN: llc %s -mtriple=aarch64-unknown-unknown -run-pass=legalizer -verify-machineinstrs -pass-remarks-missed=gisel* -o - 2>&1 | FileCheck %s

# When we create a tail call, we expect to drop the return's debug location.
# Ensure that we don't get a missed remark for debug locations in this case.

# CHECK-NOT: remark: file.ll:[[#]]:[[#]]: lost [[#]] debug locations during pass

--- |
  define void @snork() !dbg !6 { unreachable }

  !llvm.module.flags = !{!0}
  !llvm.dbg.cu = !{!1}
  !llvm.debugify = !{!4, !5}

  !0 = !{i32 2, !"Debug Info Version", i32 3}
  !1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "debugify", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
  !2 = !DIFile(filename: "file.ll", directory: "/")
  !3 = !{}
  !4 = !{i32 2}
  !5 = !{i32 1}
  !6 = distinct !DISubprogram(name: "snork", linkageName: "snork", scope: null, file: !2, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1, retainedNodes: !8)
  !7 = !DISubroutineType(types: !3)
  !8 = !{!9}
  !9 = !DILocalVariable(name: "1", scope: !6, file: !2, line: 2, type: !10)
  !10 = !DIBasicType(name: "ty32", size: 32, encoding: DW_ATE_unsigned)
  !11 = !DILocation(line: 1, column: 1, scope: !6)
  !12 = !DILocation(line: 2, column: 1, scope: !6)

...
---
name:            snork
alignment:       4
tracksRegLiveness: true
body:             |
  bb.0:
    %0:_(p0) = G_IMPLICIT_DEF debug-location !DILocation(line: 0, scope: !6)
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s64) = G_IMPLICIT_DEF debug-location !DILocation(line: 0, scope: !6)
    G_MEMSET %0(p0), %1(s8), %2(s64), 1, debug-location !11 :: (store (s8))
    DBG_VALUE 0, 0, !9, !DIExpression(), debug-location !12
    RET_ReallyLR debug-location !12

...
