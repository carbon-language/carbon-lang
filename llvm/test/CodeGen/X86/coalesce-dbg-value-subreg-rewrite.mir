# RUN: llc -O0 -mtriple x86_64-pc-linux-gnu -run-pass simple-register-coalescing -verify-coalescing -o - %s | FileCheck %s

--- |
  define i16 @main() {
  entry:
    call void @llvm.dbg.value(metadata i8 0, metadata !11, metadata !DIExpression()), !dbg !13
    ret i16 0
  }

  ; Function Attrs: nounwind readnone speculatable
  declare void @llvm.dbg.value(metadata, metadata, metadata)

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!3, !4, !5}
  !llvm.ident = !{!6}

  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
  !1 = !DIFile(filename: "tmp.c", directory: "")
  !2 = !{}
  !3 = !{i32 2, !"Dwarf Version", i32 4}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 1}
  !6 = !{!"clang"}
  !7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 4, type: !8, isLocal: false, isDefinition: true, scopeLine: 4, isOptimized: false, unit: !0, retainedNodes: !2)
  !8 = !DISubroutineType(types: !9)
  !9 = !{!10}
  !10 = !DIBasicType(name: "int", size: 16, encoding: DW_ATE_signed)
  !11 = !DILocalVariable(name: "c", scope: !7, file: !1, line: 5, type: !12)
  !12 = !DIBasicType(name: "mytype", size: 16)
  !13 = !DILocation(line: 5, column: 11, scope: !7)

...
---
name:            main
tracksRegLiveness: true
body:             |
  bb.0.entry:
    %0:gr16_abcd = MOV16ri 0
    DBG_VALUE %0.sub_8bit:gr16_abcd, $noreg, !11, !DIExpression(), debug-location !13
    undef %6.sub_8bit:gr16_abcd = COPY killed %0.sub_8bit
    dead $dx = COPY killed %6

...

# Verify that we get $dl in the DBG_VALUE (and not $dx.sub_8bit as we used to
# do before the bugfix, which resulted in "Bad machine code: Illegal
# subregister index for physical register").
#
# CHECK:      bb.0.entry:
# CHECK-NEXT:    $dx = MOV16ri 0
# CHECK-NEXT:    DBG_VALUE $dl,
