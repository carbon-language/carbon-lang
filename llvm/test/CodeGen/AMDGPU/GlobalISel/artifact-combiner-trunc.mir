# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck %s

---
name: trunc_s16_merge_s64_s32

body: |
  bb.0:
    ; Test that trunc(merge) with trunc-size < merge-source-size creates a trunc
    ; of the merge source
    ; CHECK-LABEL: name: trunc_s16_merge_s64_s32
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](s32)
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s64) = G_MERGE_VALUES %0, %1
    %3:_(s16) = G_TRUNC %2
    %4:_(s32) = G_ANYEXT %3
    $vgpr0 = COPY %4
...

---
name: trunc_s32_merge_s64_s32

body: |
  bb.0:
    ; Test that trunc(merge) with trunc-size == merge-source-size is eliminated
    ; CHECK-LABEL: name: trunc_s32_merge_s64_s32
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](s32)
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s64) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_TRUNC %2
    $vgpr0 = COPY %3
...

---
name: trunc_s64_merge_s128_s32

body: |
  bb.0:
    ; Test that trunc(merge) with trunc-size > merge-source-size combines to a
    ; smaller merge
    ; CHECK-LABEL: name: trunc_s64_merge_s128_s32
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[C]](s32), [[C1]](s32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](s64)
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s128) = G_MERGE_VALUES %0, %1, %0, %1
    %3:_(s64) = G_TRUNC %2
    $vgpr0_vgpr1 = COPY %3
...

---
name: trunc_s32_merge_s128_p0

body: |
  bb.0:
    ; Test that trunc(merge) with a non-scalar merge source is not combined
    ; CHECK-LABEL: name: trunc_s32_merge_s128_p0
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s128) = G_MERGE_VALUES [[C]](p0), [[C1]](p0)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[MV]](s128)
    ; CHECK-NEXT: $vgpr0 = COPY [[TRUNC]](s32)
    %0:_(p0) = G_CONSTANT i64 0
    %1:_(p0) = G_CONSTANT i64 1
    %2:_(s128) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_TRUNC %2
    $vgpr0 = COPY %3
...

---
name: trunc_s64_merge_s128_p0

body: |
  bb.0:
    ; Test that trunc(merge) with a non-scalar merge source is not combined
    ; CHECK-LABEL: name: trunc_s64_merge_s128_p0
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s128) = G_MERGE_VALUES [[C]](p0), [[C1]](p0)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s64) = G_TRUNC [[MV]](s128)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[TRUNC]](s64)
    %0:_(p0) = G_CONSTANT i64 0
    %1:_(p0) = G_CONSTANT i64 1
    %2:_(s128) = G_MERGE_VALUES %0, %1
    %3:_(s64) = G_TRUNC %2
    $vgpr0_vgpr1 = COPY %3
...

---
name: trunc_s128_merge_s192_p0

body: |
  bb.0:
    ; Test that trunc(merge) with a non-scalar merge source is not combined
    ; CHECK-LABEL: name: trunc_s128_merge_s192_p0
    ; CHECK: [[C:%[0-9]+]]:_(p0) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p0) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(s192) = G_MERGE_VALUES [[C]](p0), [[C1]](p0), [[C]](p0)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s128) = G_TRUNC [[MV]](s192)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[TRUNC]](s128)
    %0:_(p0) = G_CONSTANT i64 0
    %1:_(p0) = G_CONSTANT i64 1
    %2:_(s192) = G_MERGE_VALUES %0, %1, %0
    %3:_(s128) = G_TRUNC %2
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3
...

---
name: trunc_s68_merge_s128_s32

body: |
  bb.0:
    ; Test that trunc(merge) with trunc-size > merge-source-size and
    ; trunc-size % merge-source-size != 0 can be combined after the G_TRUNCs
    ; have been combined.
    ; CHECK-LABEL: name: trunc_s68_merge_s128_s32
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](s32)
    %0:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s128) = G_MERGE_VALUES %0, %1, %0, %1
    %3:_(s68) = G_TRUNC %2
    %4:_(s32) = G_TRUNC %3
    $vgpr0 = COPY %4
...

---
name: trunc_trunc

body: |
  bb.0:
    ; Test that trunc(trunc) is combined to a single trunc
    ; CHECK-LABEL: name: trunc_trunc
    ; CHECK: [[DEF:%[0-9]+]]:_(s64) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[DEF]](s64)
    ; CHECK-NEXT: $vgpr0 = COPY [[TRUNC]](s32)
    %0:_(s64) = G_IMPLICIT_DEF
    %1:_(s48) = G_TRUNC %0
    %2:_(s32) = G_TRUNC %1
    $vgpr0 = COPY %2
...
