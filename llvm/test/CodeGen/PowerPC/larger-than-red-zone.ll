; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=pwr9 -mtriple=powerpc64le-unknown-unknown \
; RUN:   -ppc-vsr-nums-as-vr -ppc-asm-full-reg-names < %s | FileCheck %s

define dso_local signext i32 @caller(i32 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: caller:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mflr r0
; CHECK-NEXT:    std r0, 16(r1)
; CHECK-NEXT:    stdu r1, -320(r1)
; CHECK-NEXT:    .cfi_def_cfa_offset 320
; CHECK-NEXT:    .cfi_offset lr, 16
; CHECK-NEXT:    .cfi_offset r14, -288
; CHECK-NEXT:    .cfi_offset r15, -280
; CHECK-NEXT:    .cfi_offset r16, -272
; CHECK-NEXT:    .cfi_offset r17, -264
; CHECK-NEXT:    .cfi_offset r18, -256
; CHECK-NEXT:    .cfi_offset r19, -248
; CHECK-NEXT:    .cfi_offset r20, -240
; CHECK-NEXT:    .cfi_offset r21, -232
; CHECK-NEXT:    .cfi_offset r22, -224
; CHECK-NEXT:    .cfi_offset r23, -216
; CHECK-NEXT:    .cfi_offset r24, -208
; CHECK-NEXT:    .cfi_offset r25, -200
; CHECK-NEXT:    .cfi_offset r26, -192
; CHECK-NEXT:    .cfi_offset r27, -184
; CHECK-NEXT:    .cfi_offset r28, -176
; CHECK-NEXT:    .cfi_offset r29, -168
; CHECK-NEXT:    .cfi_offset r30, -160
; CHECK-NEXT:    .cfi_offset r31, -152
; CHECK-NEXT:    .cfi_offset f14, -144
; CHECK-NEXT:    std r14, 32(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r15, 40(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r16, 48(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r17, 56(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r18, 64(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r19, 72(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r20, 80(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r21, 88(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r22, 96(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r23, 104(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r24, 112(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r25, 120(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r26, 128(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r27, 136(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r28, 144(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r29, 152(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r30, 160(r1) # 8-byte Folded Spill
; CHECK-NEXT:    std r31, 168(r1) # 8-byte Folded Spill
; CHECK-NEXT:    stfd f14, 176(r1) # 8-byte Folded Spill
; CHECK-NEXT:    #APP
; CHECK-NEXT:    add r3, r3, r4
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    extsw r3, r3
; CHECK-NEXT:    bl callee
; CHECK-NEXT:    nop
; CHECK-NEXT:    lfd f14, 176(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r31, 168(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r30, 160(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r29, 152(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r28, 144(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r27, 136(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r26, 128(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r25, 120(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r24, 112(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r23, 104(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r22, 96(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r21, 88(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r20, 80(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r19, 72(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r18, 64(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r17, 56(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r16, 48(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r15, 40(r1) # 8-byte Folded Reload
; CHECK-NEXT:    ld r14, 32(r1) # 8-byte Folded Reload
; CHECK-NEXT:    addi r1, r1, 320
; CHECK-NEXT:    ld r0, 16(r1)
; CHECK-NEXT:    mtlr r0
; CHECK-NEXT:    blr
entry:
  %0 = tail call i32 asm "add $0, $1, $2", "=r,r,r,~{r14},~{r15},~{r16},~{r17},~{r18},~{r19},~{r20},~{r21},~{r22},~{r23},~{r24},~{r25},~{r26},~{r27},~{r28},~{r29},~{r30},~{r31},~{f14}"(i32 %a, i32 %b)
  %call = tail call signext i32 @callee(i32 signext %0)
  ret i32 %call
}

declare signext i32 @callee(i32 signext) local_unnamed_addr


